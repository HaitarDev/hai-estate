{
  "version": 3,
  "sources": ["../../@firebase/auth/src/core/persistence/index.ts", "../../@firebase/auth/src/platform_browser/messagechannel/promise.ts", "../../@firebase/auth/src/platform_browser/messagechannel/receiver.ts", "../../@firebase/auth/src/core/util/event_id.ts", "../../@firebase/auth/src/platform_browser/messagechannel/sender.ts", "../../@firebase/auth/src/platform_browser/auth_window.ts", "../../@firebase/auth/src/platform_browser/util/worker.ts", "../../@firebase/auth/src/platform_browser/persistence/indexed_db.ts", "../../@firebase/auth/src/core/errors.ts", "../../@firebase/auth/src/core/util/log.ts", "../../@firebase/auth/src/core/util/assert.ts", "../../@firebase/auth/src/core/util/location.ts", "../../@firebase/auth/src/core/util/navigator.ts", "../../@firebase/auth/src/core/util/delay.ts", "../../@firebase/auth/src/core/util/emulator.ts", "../../@firebase/auth/src/core/util/fetch_provider.ts", "../../@firebase/auth/src/api/errors.ts", "../../@firebase/auth/src/api/index.ts", "../../@firebase/auth/src/platform_browser/recaptcha/recaptcha.ts", "../../@firebase/auth/src/api/authentication/recaptcha.ts", "../../@firebase/auth/src/api/account_management/account.ts", "../../@firebase/auth/src/core/util/time.ts", "../../@firebase/auth/src/core/user/id_token_result.ts", "../../@firebase/auth/src/core/user/invalidation.ts", "../../@firebase/auth/src/core/user/proactive_refresh.ts", "../../@firebase/auth/src/core/user/user_metadata.ts", "../../@firebase/auth/src/core/user/reload.ts", "../../@firebase/auth/src/api/authentication/token.ts", "../../@firebase/auth/src/core/user/token_manager.ts", "../../@firebase/auth/src/core/user/user_impl.ts", "../../@firebase/auth/src/core/util/instantiator.ts", "../../@firebase/auth/src/core/persistence/in_memory.ts", "../../@firebase/auth/src/core/persistence/persistence_user_manager.ts", "../../@firebase/auth/src/core/util/browser.ts", "../../@firebase/auth/src/core/util/version.ts", "../../@firebase/auth/src/core/auth/middleware.ts", "../../@firebase/auth/src/api/password_policy/get_password_policy.ts", "../../@firebase/auth/src/core/auth/password_policy_impl.ts", "../../@firebase/auth/src/core/auth/auth_impl.ts", "../../@firebase/auth/src/platform_browser/load_js.ts", "../../@firebase/auth/src/platform_browser/recaptcha/recaptcha_enterprise_verifier.ts", "../../@firebase/auth/src/core/auth/initialize.ts", "../../@firebase/auth/src/core/auth/emulator.ts", "../../@firebase/auth/src/core/credentials/auth_credential.ts", "../../@firebase/auth/src/api/account_management/email_and_password.ts", "../../@firebase/auth/src/api/authentication/email_and_password.ts", "../../@firebase/auth/src/api/authentication/email_link.ts", "../../@firebase/auth/src/core/credentials/email.ts", "../../@firebase/auth/src/api/authentication/idp.ts", "../../@firebase/auth/src/core/credentials/oauth.ts", "../../@firebase/auth/src/api/authentication/sms.ts", "../../@firebase/auth/src/core/credentials/phone.ts", "../../@firebase/auth/src/core/action_code_url.ts", "../../@firebase/auth/src/core/providers/email.ts", "../../@firebase/auth/src/core/providers/federated.ts", "../../@firebase/auth/src/core/providers/oauth.ts", "../../@firebase/auth/src/core/providers/facebook.ts", "../../@firebase/auth/src/core/providers/google.ts", "../../@firebase/auth/src/core/providers/github.ts", "../../@firebase/auth/src/core/credentials/saml.ts", "../../@firebase/auth/src/core/providers/saml.ts", "../../@firebase/auth/src/core/providers/twitter.ts", "../../@firebase/auth/src/api/authentication/sign_up.ts", "../../@firebase/auth/src/core/user/user_credential_impl.ts", "../../@firebase/auth/src/core/strategies/anonymous.ts", "../../@firebase/auth/src/mfa/mfa_error.ts", "../../@firebase/auth/src/core/util/providers.ts", "../../@firebase/auth/src/core/user/link_unlink.ts", "../../@firebase/auth/src/core/user/reauthenticate.ts", "../../@firebase/auth/src/core/strategies/credential.ts", "../../@firebase/auth/src/api/authentication/custom_token.ts", "../../@firebase/auth/src/core/strategies/custom_token.ts", "../../@firebase/auth/src/mfa/mfa_info.ts", "../../@firebase/auth/src/core/strategies/action_code_settings.ts", "../../@firebase/auth/src/core/strategies/email_and_password.ts", "../../@firebase/auth/src/core/strategies/email_link.ts", "../../@firebase/auth/src/api/authentication/create_auth_uri.ts", "../../@firebase/auth/src/core/strategies/email.ts", "../../@firebase/auth/src/api/account_management/profile.ts", "../../@firebase/auth/src/core/user/account_info.ts", "../../@firebase/auth/src/core/user/additional_user_info.ts", "../../@firebase/auth/src/core/index.ts", "../../@firebase/auth/src/mfa/mfa_session.ts", "../../@firebase/auth/src/mfa/mfa_resolver.ts", "../../@firebase/auth/src/api/account_management/mfa.ts", "../../@firebase/auth/src/mfa/mfa_user.ts", "../../@firebase/auth/src/core/auth/firebase_internal.ts", "../../@firebase/auth/src/core/auth/register.ts", "../../@firebase/auth/src/model/enum_maps.ts", "../../@firebase/auth/src/platform_browser/persistence/browser.ts", "../../@firebase/auth/src/platform_browser/persistence/local_storage.ts", "../../@firebase/auth/src/platform_browser/persistence/session_storage.ts", "../../@firebase/auth/src/core/util/resolver.ts", "../../@firebase/auth/src/core/strategies/idp.ts", "../../@firebase/auth/src/core/strategies/abstract_popup_redirect_operation.ts", "../../@firebase/auth/src/core/strategies/redirect.ts", "../../@firebase/auth/src/platform_browser/strategies/redirect.ts", "../../@firebase/auth/src/core/util/handler.ts", "../../@firebase/auth/src/platform_cordova/plugins.ts", "../../@firebase/auth/src/api/project_config/get_project_config.ts", "../../@firebase/auth/src/platform_cordova/popup_redirect/utils.ts", "../../@firebase/auth/src/core/auth/auth_event_manager.ts", "../../@firebase/auth/src/platform_cordova/popup_redirect/events.ts", "../../@firebase/auth/src/platform_cordova/popup_redirect/popup_redirect.ts", "../../@firebase/auth/src/platform_cordova/strategies/redirect.ts", "../../@firebase/auth/index.cordova.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Persistence } from '../../model/public_types';\n\nexport const enum PersistenceType {\n  SESSION = 'SESSION',\n  LOCAL = 'LOCAL',\n  NONE = 'NONE'\n}\n\nexport type PersistedBlob = Record<string, unknown>;\n\nexport interface Instantiator<T> {\n  (blob: PersistedBlob): T;\n}\n\nexport type PersistenceValue = PersistedBlob | string;\n\nexport const STORAGE_AVAILABLE_KEY = '__sak';\n\nexport interface StorageEventListener {\n  (value: PersistenceValue | null): void;\n}\n\nexport interface PersistenceInternal extends Persistence {\n  type: PersistenceType;\n  _isAvailable(): Promise<boolean>;\n  _set(key: string, value: PersistenceValue): Promise<void>;\n  _get<T extends PersistenceValue>(key: string): Promise<T | null>;\n  _remove(key: string): Promise<void>;\n  _addListener(key: string, listener: StorageEventListener): void;\n  _removeListener(key: string, listener: StorageEventListener): void;\n  // Should this persistence allow migration up the chosen hierarchy?\n  _shouldAllowMigration?: boolean;\n}\n", "/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** TODO: remove this once tslib has a polyfill for Promise.allSettled */\ninterface PromiseFulfilledResult<T> {\n  fulfilled: true;\n  value: T;\n}\n\ninterface PromiseRejectedResult {\n  fulfilled: false;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  reason: any;\n}\n\nexport type PromiseSettledResult<T> =\n  | PromiseFulfilledResult<T>\n  | PromiseRejectedResult;\n\n/**\n * Shim for Promise.allSettled, note the slightly different format of `fulfilled` vs `status`.\n *\n * @param promises - Array of promises to wait on.\n */\nexport function _allSettled<T>(\n  promises: Array<Promise<T>>\n): Promise<Array<PromiseSettledResult<T>>> {\n  return Promise.all(\n    promises.map(async promise => {\n      try {\n        const value = await promise;\n        return {\n          fulfilled: true,\n          value\n        } as PromiseFulfilledResult<T>;\n      } catch (reason) {\n        return {\n          fulfilled: false,\n          reason\n        } as PromiseRejectedResult;\n      }\n    })\n  );\n}\n", "/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  ReceiverHandler,\n  _EventType,\n  _ReceiverResponse,\n  SenderMessageEvent,\n  _Status,\n  _SenderRequest\n} from './index';\nimport { _allSettled } from './promise';\n\n/**\n * Interface class for receiving messages.\n *\n */\nexport class Receiver {\n  private static readonly receivers: Receiver[] = [];\n  private readonly boundEventHandler: EventListener;\n\n  private readonly handlersMap: {\n    // Typescript doesn't have existential types :(\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    [eventType: string]: Set<ReceiverHandler<any, any>>;\n  } = {};\n\n  constructor(private readonly eventTarget: EventTarget) {\n    this.boundEventHandler = this.handleEvent.bind(this);\n  }\n\n  /**\n   * Obtain an instance of a Receiver for a given event target, if none exists it will be created.\n   *\n   * @param eventTarget - An event target (such as window or self) through which the underlying\n   * messages will be received.\n   */\n  static _getInstance(eventTarget: EventTarget): Receiver {\n    // The results are stored in an array since objects can't be keys for other\n    // objects. In addition, setting a unique property on an event target as a\n    // hash map key may not be allowed due to CORS restrictions.\n    const existingInstance = this.receivers.find(receiver =>\n      receiver.isListeningto(eventTarget)\n    );\n    if (existingInstance) {\n      return existingInstance;\n    }\n    const newInstance = new Receiver(eventTarget);\n    this.receivers.push(newInstance);\n    return newInstance;\n  }\n\n  private isListeningto(eventTarget: EventTarget): boolean {\n    return this.eventTarget === eventTarget;\n  }\n\n  /**\n   * Fans out a MessageEvent to the appropriate listeners.\n   *\n   * @remarks\n   * Sends an {@link Status.ACK} upon receipt and a {@link Status.DONE} once all handlers have\n   * finished processing.\n   *\n   * @param event - The MessageEvent.\n   *\n   */\n  private async handleEvent<\n    T extends _ReceiverResponse,\n    S extends _SenderRequest\n  >(event: Event): Promise<void> {\n    const messageEvent = event as MessageEvent<SenderMessageEvent<S>>;\n    const { eventId, eventType, data } = messageEvent.data;\n\n    const handlers: Set<ReceiverHandler<T, S>> | undefined =\n      this.handlersMap[eventType];\n    if (!handlers?.size) {\n      return;\n    }\n\n    messageEvent.ports[0].postMessage({\n      status: _Status.ACK,\n      eventId,\n      eventType\n    });\n\n    const promises = Array.from(handlers).map(async handler =>\n      handler(messageEvent.origin, data)\n    );\n    const response = await _allSettled(promises);\n    messageEvent.ports[0].postMessage({\n      status: _Status.DONE,\n      eventId,\n      eventType,\n      response\n    });\n  }\n\n  /**\n   * Subscribe an event handler for a particular event.\n   *\n   * @param eventType - Event name to subscribe to.\n   * @param eventHandler - The event handler which should receive the events.\n   *\n   */\n  _subscribe<T extends _ReceiverResponse, S extends _SenderRequest>(\n    eventType: _EventType,\n    eventHandler: ReceiverHandler<T, S>\n  ): void {\n    if (Object.keys(this.handlersMap).length === 0) {\n      this.eventTarget.addEventListener('message', this.boundEventHandler);\n    }\n\n    if (!this.handlersMap[eventType]) {\n      this.handlersMap[eventType] = new Set();\n    }\n\n    this.handlersMap[eventType].add(eventHandler);\n  }\n\n  /**\n   * Unsubscribe an event handler from a particular event.\n   *\n   * @param eventType - Event name to unsubscribe from.\n   * @param eventHandler - Optinoal event handler, if none provided, unsubscribe all handlers on this event.\n   *\n   */\n  _unsubscribe<T extends _ReceiverResponse, S extends _SenderRequest>(\n    eventType: _EventType,\n    eventHandler?: ReceiverHandler<T, S>\n  ): void {\n    if (this.handlersMap[eventType] && eventHandler) {\n      this.handlersMap[eventType].delete(eventHandler);\n    }\n    if (!eventHandler || this.handlersMap[eventType].size === 0) {\n      delete this.handlersMap[eventType];\n    }\n\n    if (Object.keys(this.handlersMap).length === 0) {\n      this.eventTarget.removeEventListener('message', this.boundEventHandler);\n    }\n  }\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport function _generateEventId(prefix = '', digits = 10): string {\n  let random = '';\n  for (let i = 0; i < digits; i++) {\n    random += Math.floor(Math.random() * 10);\n  }\n  return prefix + random;\n}\n", "/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { _generateEventId } from '../../core/util/event_id';\nimport {\n  _SenderRequest,\n  _EventType,\n  ReceiverMessageEvent,\n  _MessageError,\n  SenderMessageEvent,\n  _Status,\n  _ReceiverMessageResponse,\n  _ReceiverResponse,\n  _TimeoutDuration\n} from './index';\n\ninterface MessageHandler {\n  messageChannel: MessageChannel;\n  onMessage: EventListenerOrEventListenerObject;\n}\n\n/**\n * Interface for sending messages and waiting for a completion response.\n *\n */\nexport class Sender {\n  private readonly handlers = new Set<MessageHandler>();\n\n  constructor(private readonly target: ServiceWorker) {}\n\n  /**\n   * Unsubscribe the handler and remove it from our tracking Set.\n   *\n   * @param handler - The handler to unsubscribe.\n   */\n  private removeMessageHandler(handler: MessageHandler): void {\n    if (handler.messageChannel) {\n      handler.messageChannel.port1.removeEventListener(\n        'message',\n        handler.onMessage\n      );\n      handler.messageChannel.port1.close();\n    }\n    this.handlers.delete(handler);\n  }\n\n  /**\n   * Send a message to the Receiver located at {@link target}.\n   *\n   * @remarks\n   * We'll first wait a bit for an ACK , if we get one we will wait significantly longer until the\n   * receiver has had a chance to fully process the event.\n   *\n   * @param eventType - Type of event to send.\n   * @param data - The payload of the event.\n   * @param timeout - Timeout for waiting on an ACK from the receiver.\n   *\n   * @returns An array of settled promises from all the handlers that were listening on the receiver.\n   */\n  async _send<T extends _ReceiverResponse, S extends _SenderRequest>(\n    eventType: _EventType,\n    data: S,\n    timeout = _TimeoutDuration.ACK\n  ): Promise<_ReceiverMessageResponse<T>> {\n    const messageChannel =\n      typeof MessageChannel !== 'undefined' ? new MessageChannel() : null;\n    if (!messageChannel) {\n      throw new Error(_MessageError.CONNECTION_UNAVAILABLE);\n    }\n    // Node timers and browser timers return fundamentally different types.\n    // We don't actually care what the value is but TS won't accept unknown and\n    // we can't cast properly in both environments.\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    let completionTimer: any;\n    let handler: MessageHandler;\n    return new Promise<_ReceiverMessageResponse<T>>((resolve, reject) => {\n      const eventId = _generateEventId('', 20);\n      messageChannel.port1.start();\n      const ackTimer = setTimeout(() => {\n        reject(new Error(_MessageError.UNSUPPORTED_EVENT));\n      }, timeout);\n      handler = {\n        messageChannel,\n        onMessage(event: Event): void {\n          const messageEvent = event as MessageEvent<ReceiverMessageEvent<T>>;\n          if (messageEvent.data.eventId !== eventId) {\n            return;\n          }\n          switch (messageEvent.data.status) {\n            case _Status.ACK:\n              // The receiver should ACK first.\n              clearTimeout(ackTimer);\n              completionTimer = setTimeout(() => {\n                reject(new Error(_MessageError.TIMEOUT));\n              }, _TimeoutDuration.COMPLETION);\n              break;\n            case _Status.DONE:\n              // Once the receiver's handlers are finished we will get the results.\n              clearTimeout(completionTimer);\n              resolve(messageEvent.data.response);\n              break;\n            default:\n              clearTimeout(ackTimer);\n              clearTimeout(completionTimer);\n              reject(new Error(_MessageError.INVALID_RESPONSE));\n              break;\n          }\n        }\n      };\n      this.handlers.add(handler);\n      messageChannel.port1.addEventListener('message', handler.onMessage);\n      this.target.postMessage(\n        {\n          eventType,\n          eventId,\n          data\n        } as SenderMessageEvent<S>,\n        [messageChannel.port2]\n      );\n    }).finally(() => {\n      if (handler) {\n        this.removeMessageHandler(handler);\n      }\n    });\n  }\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Recaptcha, GreCAPTCHATopLevel } from './recaptcha/recaptcha';\n\n/**\n * A specialized window type that melds the normal window type plus the\n * various bits we need. The three different blocks that are &'d together\n * cant be defined in the same block together.\n */\nexport type AuthWindow = {\n  // Standard window types\n  [T in keyof Window]: Window[T];\n} & {\n  // Any known / named properties we want to add\n  grecaptcha?: Recaptcha | GreCAPTCHATopLevel;\n  /* eslint-disable-next-line @typescript-eslint/no-explicit-any */\n  ___jsl?: Record<string, any>;\n  gapi?: typeof gapi;\n} & {\n  // A final catch-all for callbacks (which will have random names) that\n  // we will stick on the window.\n  [callback: string]: (...args: unknown[]) => void;\n};\n\n/**\n * Lazy accessor for window, since the compat layer won't tree shake this out,\n * we need to make sure not to mess with window unless we have to\n */\nexport function _window(): AuthWindow {\n  return window as unknown as AuthWindow;\n}\n\nexport function _setWindowLocation(url: string): void {\n  _window().location.href = url;\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { _window } from '../auth_window';\n\nexport function _isWorker(): boolean {\n  return (\n    typeof _window()['WorkerGlobalScope'] !== 'undefined' &&\n    typeof _window()['importScripts'] === 'function'\n  );\n}\n\nexport async function _getActiveServiceWorker(): Promise<ServiceWorker | null> {\n  if (!navigator?.serviceWorker) {\n    return null;\n  }\n  try {\n    const registration = await navigator.serviceWorker.ready;\n    return registration.active;\n  } catch {\n    return null;\n  }\n}\n\nexport function _getServiceWorkerController(): ServiceWorker | null {\n  return navigator?.serviceWorker?.controller || null;\n}\n\nexport function _getWorkerGlobalScope(): ServiceWorker | null {\n  return _isWorker() ? (self as unknown as ServiceWorker) : null;\n}\n", "/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Persistence } from '../../model/public_types';\nimport {\n  PersistedBlob,\n  PersistenceInternal as InternalPersistence,\n  PersistenceType,\n  PersistenceValue,\n  StorageEventListener,\n  STORAGE_AVAILABLE_KEY\n} from '../../core/persistence/';\nimport {\n  _EventType,\n  _PingResponse,\n  KeyChangedResponse,\n  KeyChangedRequest,\n  PingRequest,\n  _TimeoutDuration\n} from '../messagechannel/index';\nimport { Receiver } from '../messagechannel/receiver';\nimport { Sender } from '../messagechannel/sender';\nimport {\n  _isWorker,\n  _getActiveServiceWorker,\n  _getServiceWorkerController,\n  _getWorkerGlobalScope\n} from '../util/worker';\n\nexport const DB_NAME = 'firebaseLocalStorageDb';\nconst DB_VERSION = 1;\nconst DB_OBJECTSTORE_NAME = 'firebaseLocalStorage';\nconst DB_DATA_KEYPATH = 'fbase_key';\n\ninterface DBObject {\n  [DB_DATA_KEYPATH]: string;\n  value: PersistedBlob;\n}\n\n/**\n * Promise wrapper for IDBRequest\n *\n * Unfortunately we can't cleanly extend Promise<T> since promises are not callable in ES6\n *\n */\nclass DBPromise<T> {\n  constructor(private readonly request: IDBRequest) {}\n\n  toPromise(): Promise<T> {\n    return new Promise<T>((resolve, reject) => {\n      this.request.addEventListener('success', () => {\n        resolve(this.request.result);\n      });\n      this.request.addEventListener('error', () => {\n        reject(this.request.error);\n      });\n    });\n  }\n}\n\nfunction getObjectStore(db: IDBDatabase, isReadWrite: boolean): IDBObjectStore {\n  return db\n    .transaction([DB_OBJECTSTORE_NAME], isReadWrite ? 'readwrite' : 'readonly')\n    .objectStore(DB_OBJECTSTORE_NAME);\n}\n\nexport async function _clearDatabase(db: IDBDatabase): Promise<void> {\n  const objectStore = getObjectStore(db, true);\n  return new DBPromise<void>(objectStore.clear()).toPromise();\n}\n\nexport function _deleteDatabase(): Promise<void> {\n  const request = indexedDB.deleteDatabase(DB_NAME);\n  return new DBPromise<void>(request).toPromise();\n}\n\nexport function _openDatabase(): Promise<IDBDatabase> {\n  const request = indexedDB.open(DB_NAME, DB_VERSION);\n  return new Promise((resolve, reject) => {\n    request.addEventListener('error', () => {\n      reject(request.error);\n    });\n\n    request.addEventListener('upgradeneeded', () => {\n      const db = request.result;\n\n      try {\n        db.createObjectStore(DB_OBJECTSTORE_NAME, { keyPath: DB_DATA_KEYPATH });\n      } catch (e) {\n        reject(e);\n      }\n    });\n\n    request.addEventListener('success', async () => {\n      const db: IDBDatabase = request.result;\n      // Strange bug that occurs in Firefox when multiple tabs are opened at the\n      // same time. The only way to recover seems to be deleting the database\n      // and re-initializing it.\n      // https://github.com/firebase/firebase-js-sdk/issues/634\n\n      if (!db.objectStoreNames.contains(DB_OBJECTSTORE_NAME)) {\n        // Need to close the database or else you get a `blocked` event\n        db.close();\n        await _deleteDatabase();\n        resolve(await _openDatabase());\n      } else {\n        resolve(db);\n      }\n    });\n  });\n}\n\nexport async function _putObject(\n  db: IDBDatabase,\n  key: string,\n  value: PersistenceValue | string\n): Promise<void> {\n  const request = getObjectStore(db, true).put({\n    [DB_DATA_KEYPATH]: key,\n    value\n  });\n  return new DBPromise<void>(request).toPromise();\n}\n\nasync function getObject(\n  db: IDBDatabase,\n  key: string\n): Promise<PersistedBlob | null> {\n  const request = getObjectStore(db, false).get(key);\n  const data = await new DBPromise<DBObject | undefined>(request).toPromise();\n  return data === undefined ? null : data.value;\n}\n\nexport function _deleteObject(db: IDBDatabase, key: string): Promise<void> {\n  const request = getObjectStore(db, true).delete(key);\n  return new DBPromise<void>(request).toPromise();\n}\n\nexport const _POLLING_INTERVAL_MS = 800;\nexport const _TRANSACTION_RETRY_COUNT = 3;\n\nclass IndexedDBLocalPersistence implements InternalPersistence {\n  static type: 'LOCAL' = 'LOCAL';\n\n  type = PersistenceType.LOCAL;\n  db?: IDBDatabase;\n  readonly _shouldAllowMigration = true;\n\n  private readonly listeners: Record<string, Set<StorageEventListener>> = {};\n  private readonly localCache: Record<string, PersistenceValue | null> = {};\n  // setTimeout return value is platform specific\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private pollTimer: any | null = null;\n  private pendingWrites = 0;\n\n  private receiver: Receiver | null = null;\n  private sender: Sender | null = null;\n  private serviceWorkerReceiverAvailable = false;\n  private activeServiceWorker: ServiceWorker | null = null;\n  // Visible for testing only\n  readonly _workerInitializationPromise: Promise<void>;\n\n  constructor() {\n    // Fire & forget the service worker registration as it may never resolve\n    this._workerInitializationPromise =\n      this.initializeServiceWorkerMessaging().then(\n        () => {},\n        () => {}\n      );\n  }\n\n  async _openDb(): Promise<IDBDatabase> {\n    if (this.db) {\n      return this.db;\n    }\n    this.db = await _openDatabase();\n    return this.db;\n  }\n\n  async _withRetries<T>(op: (db: IDBDatabase) => Promise<T>): Promise<T> {\n    let numAttempts = 0;\n\n    while (true) {\n      try {\n        const db = await this._openDb();\n        return await op(db);\n      } catch (e) {\n        if (numAttempts++ > _TRANSACTION_RETRY_COUNT) {\n          throw e;\n        }\n        if (this.db) {\n          this.db.close();\n          this.db = undefined;\n        }\n        // TODO: consider adding exponential backoff\n      }\n    }\n  }\n\n  /**\n   * IndexedDB events do not propagate from the main window to the worker context.  We rely on a\n   * postMessage interface to send these events to the worker ourselves.\n   */\n  private async initializeServiceWorkerMessaging(): Promise<void> {\n    return _isWorker() ? this.initializeReceiver() : this.initializeSender();\n  }\n\n  /**\n   * As the worker we should listen to events from the main window.\n   */\n  private async initializeReceiver(): Promise<void> {\n    this.receiver = Receiver._getInstance(_getWorkerGlobalScope()!);\n    // Refresh from persistence if we receive a KeyChanged message.\n    this.receiver._subscribe(\n      _EventType.KEY_CHANGED,\n      async (_origin: string, data: KeyChangedRequest) => {\n        const keys = await this._poll();\n        return {\n          keyProcessed: keys.includes(data.key)\n        };\n      }\n    );\n    // Let the sender know that we are listening so they give us more timeout.\n    this.receiver._subscribe(\n      _EventType.PING,\n      async (_origin: string, _data: PingRequest) => {\n        return [_EventType.KEY_CHANGED];\n      }\n    );\n  }\n\n  /**\n   * As the main window, we should let the worker know when keys change (set and remove).\n   *\n   * @remarks\n   * {@link https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerContainer/ready | ServiceWorkerContainer.ready}\n   * may not resolve.\n   */\n  private async initializeSender(): Promise<void> {\n    // Check to see if there's an active service worker.\n    this.activeServiceWorker = await _getActiveServiceWorker();\n    if (!this.activeServiceWorker) {\n      return;\n    }\n    this.sender = new Sender(this.activeServiceWorker);\n    // Ping the service worker to check what events they can handle.\n    const results = await this.sender._send<_PingResponse, PingRequest>(\n      _EventType.PING,\n      {},\n      _TimeoutDuration.LONG_ACK\n    );\n    if (!results) {\n      return;\n    }\n    if (\n      results[0]?.fulfilled &&\n      results[0]?.value.includes(_EventType.KEY_CHANGED)\n    ) {\n      this.serviceWorkerReceiverAvailable = true;\n    }\n  }\n\n  /**\n   * Let the worker know about a changed key, the exact key doesn't technically matter since the\n   * worker will just trigger a full sync anyway.\n   *\n   * @remarks\n   * For now, we only support one service worker per page.\n   *\n   * @param key - Storage key which changed.\n   */\n  private async notifyServiceWorker(key: string): Promise<void> {\n    if (\n      !this.sender ||\n      !this.activeServiceWorker ||\n      _getServiceWorkerController() !== this.activeServiceWorker\n    ) {\n      return;\n    }\n    try {\n      await this.sender._send<KeyChangedResponse, KeyChangedRequest>(\n        _EventType.KEY_CHANGED,\n        { key },\n        // Use long timeout if receiver has previously responded to a ping from us.\n        this.serviceWorkerReceiverAvailable\n          ? _TimeoutDuration.LONG_ACK\n          : _TimeoutDuration.ACK\n      );\n    } catch {\n      // This is a best effort approach. Ignore errors.\n    }\n  }\n\n  async _isAvailable(): Promise<boolean> {\n    try {\n      if (!indexedDB) {\n        return false;\n      }\n      const db = await _openDatabase();\n      await _putObject(db, STORAGE_AVAILABLE_KEY, '1');\n      await _deleteObject(db, STORAGE_AVAILABLE_KEY);\n      return true;\n    } catch {}\n    return false;\n  }\n\n  private async _withPendingWrite(write: () => Promise<void>): Promise<void> {\n    this.pendingWrites++;\n    try {\n      await write();\n    } finally {\n      this.pendingWrites--;\n    }\n  }\n\n  async _set(key: string, value: PersistenceValue): Promise<void> {\n    return this._withPendingWrite(async () => {\n      await this._withRetries((db: IDBDatabase) => _putObject(db, key, value));\n      this.localCache[key] = value;\n      return this.notifyServiceWorker(key);\n    });\n  }\n\n  async _get<T extends PersistenceValue>(key: string): Promise<T | null> {\n    const obj = (await this._withRetries((db: IDBDatabase) =>\n      getObject(db, key)\n    )) as T;\n    this.localCache[key] = obj;\n    return obj;\n  }\n\n  async _remove(key: string): Promise<void> {\n    return this._withPendingWrite(async () => {\n      await this._withRetries((db: IDBDatabase) => _deleteObject(db, key));\n      delete this.localCache[key];\n      return this.notifyServiceWorker(key);\n    });\n  }\n\n  private async _poll(): Promise<string[]> {\n    // TODO: check if we need to fallback if getAll is not supported\n    const result = await this._withRetries((db: IDBDatabase) => {\n      const getAllRequest = getObjectStore(db, false).getAll();\n      return new DBPromise<DBObject[] | null>(getAllRequest).toPromise();\n    });\n\n    if (!result) {\n      return [];\n    }\n\n    // If we have pending writes in progress abort, we'll get picked up on the next poll\n    if (this.pendingWrites !== 0) {\n      return [];\n    }\n\n    const keys = [];\n    const keysInResult = new Set();\n    if (result.length !== 0) {\n      for (const { fbase_key: key, value } of result) {\n        keysInResult.add(key);\n        if (JSON.stringify(this.localCache[key]) !== JSON.stringify(value)) {\n          this.notifyListeners(key, value as PersistenceValue);\n          keys.push(key);\n        }\n      }\n    }\n\n    for (const localKey of Object.keys(this.localCache)) {\n      if (this.localCache[localKey] && !keysInResult.has(localKey)) {\n        // Deleted\n        this.notifyListeners(localKey, null);\n        keys.push(localKey);\n      }\n    }\n    return keys;\n  }\n\n  private notifyListeners(\n    key: string,\n    newValue: PersistenceValue | null\n  ): void {\n    this.localCache[key] = newValue;\n    const listeners = this.listeners[key];\n    if (listeners) {\n      for (const listener of Array.from(listeners)) {\n        listener(newValue);\n      }\n    }\n  }\n\n  private startPolling(): void {\n    this.stopPolling();\n\n    this.pollTimer = setInterval(\n      async () => this._poll(),\n      _POLLING_INTERVAL_MS\n    );\n  }\n\n  private stopPolling(): void {\n    if (this.pollTimer) {\n      clearInterval(this.pollTimer);\n      this.pollTimer = null;\n    }\n  }\n\n  _addListener(key: string, listener: StorageEventListener): void {\n    if (Object.keys(this.listeners).length === 0) {\n      this.startPolling();\n    }\n    if (!this.listeners[key]) {\n      this.listeners[key] = new Set();\n      // Populate the cache to avoid spuriously triggering on first poll.\n      void this._get(key); // This can happen in the background async and we can return immediately.\n    }\n    this.listeners[key].add(listener);\n  }\n\n  _removeListener(key: string, listener: StorageEventListener): void {\n    if (this.listeners[key]) {\n      this.listeners[key].delete(listener);\n\n      if (this.listeners[key].size === 0) {\n        delete this.listeners[key];\n      }\n    }\n\n    if (Object.keys(this.listeners).length === 0) {\n      this.stopPolling();\n    }\n  }\n}\n\n/**\n * An implementation of {@link Persistence} of type `LOCAL` using `indexedDB`\n * for the underlying storage.\n *\n * @public\n */\nexport const indexedDBLocalPersistence: Persistence = IndexedDBLocalPersistence;\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AuthErrorMap, User } from '../model/public_types';\nimport { ErrorFactory, ErrorMap } from '@firebase/util';\n\nimport { IdTokenMfaResponse } from '../api/authentication/mfa';\nimport { AppName } from '../model/auth';\nimport { AuthCredential } from './credentials';\n\n/**\n * Enumeration of Firebase Auth error codes.\n *\n * @internal\n */\nexport const enum AuthErrorCode {\n  ADMIN_ONLY_OPERATION = 'admin-restricted-operation',\n  ARGUMENT_ERROR = 'argument-error',\n  APP_NOT_AUTHORIZED = 'app-not-authorized',\n  APP_NOT_INSTALLED = 'app-not-installed',\n  CAPTCHA_CHECK_FAILED = 'captcha-check-failed',\n  CODE_EXPIRED = 'code-expired',\n  CORDOVA_NOT_READY = 'cordova-not-ready',\n  CORS_UNSUPPORTED = 'cors-unsupported',\n  CREDENTIAL_ALREADY_IN_USE = 'credential-already-in-use',\n  CREDENTIAL_MISMATCH = 'custom-token-mismatch',\n  CREDENTIAL_TOO_OLD_LOGIN_AGAIN = 'requires-recent-login',\n  DEPENDENT_SDK_INIT_BEFORE_AUTH = 'dependent-sdk-initialized-before-auth',\n  DYNAMIC_LINK_NOT_ACTIVATED = 'dynamic-link-not-activated',\n  EMAIL_CHANGE_NEEDS_VERIFICATION = 'email-change-needs-verification',\n  EMAIL_EXISTS = 'email-already-in-use',\n  EMULATOR_CONFIG_FAILED = 'emulator-config-failed',\n  EXPIRED_OOB_CODE = 'expired-action-code',\n  EXPIRED_POPUP_REQUEST = 'cancelled-popup-request',\n  INTERNAL_ERROR = 'internal-error',\n  INVALID_API_KEY = 'invalid-api-key',\n  INVALID_APP_CREDENTIAL = 'invalid-app-credential',\n  INVALID_APP_ID = 'invalid-app-id',\n  INVALID_AUTH = 'invalid-user-token',\n  INVALID_AUTH_EVENT = 'invalid-auth-event',\n  INVALID_CERT_HASH = 'invalid-cert-hash',\n  INVALID_CODE = 'invalid-verification-code',\n  INVALID_CONTINUE_URI = 'invalid-continue-uri',\n  INVALID_CORDOVA_CONFIGURATION = 'invalid-cordova-configuration',\n  INVALID_CUSTOM_TOKEN = 'invalid-custom-token',\n  INVALID_DYNAMIC_LINK_DOMAIN = 'invalid-dynamic-link-domain',\n  INVALID_EMAIL = 'invalid-email',\n  INVALID_EMULATOR_SCHEME = 'invalid-emulator-scheme',\n  INVALID_CREDENTIAL = 'invalid-credential',\n  INVALID_MESSAGE_PAYLOAD = 'invalid-message-payload',\n  INVALID_MFA_SESSION = 'invalid-multi-factor-session',\n  INVALID_OAUTH_CLIENT_ID = 'invalid-oauth-client-id',\n  INVALID_OAUTH_PROVIDER = 'invalid-oauth-provider',\n  INVALID_OOB_CODE = 'invalid-action-code',\n  INVALID_ORIGIN = 'unauthorized-domain',\n  INVALID_PASSWORD = 'wrong-password',\n  INVALID_PERSISTENCE = 'invalid-persistence-type',\n  INVALID_PHONE_NUMBER = 'invalid-phone-number',\n  INVALID_PROVIDER_ID = 'invalid-provider-id',\n  INVALID_RECIPIENT_EMAIL = 'invalid-recipient-email',\n  INVALID_SENDER = 'invalid-sender',\n  INVALID_SESSION_INFO = 'invalid-verification-id',\n  INVALID_TENANT_ID = 'invalid-tenant-id',\n  LOGIN_BLOCKED = 'login-blocked',\n  MFA_INFO_NOT_FOUND = 'multi-factor-info-not-found',\n  MFA_REQUIRED = 'multi-factor-auth-required',\n  MISSING_ANDROID_PACKAGE_NAME = 'missing-android-pkg-name',\n  MISSING_APP_CREDENTIAL = 'missing-app-credential',\n  MISSING_AUTH_DOMAIN = 'auth-domain-config-required',\n  MISSING_CODE = 'missing-verification-code',\n  MISSING_CONTINUE_URI = 'missing-continue-uri',\n  MISSING_IFRAME_START = 'missing-iframe-start',\n  MISSING_IOS_BUNDLE_ID = 'missing-ios-bundle-id',\n  MISSING_OR_INVALID_NONCE = 'missing-or-invalid-nonce',\n  MISSING_MFA_INFO = 'missing-multi-factor-info',\n  MISSING_MFA_SESSION = 'missing-multi-factor-session',\n  MISSING_PHONE_NUMBER = 'missing-phone-number',\n  MISSING_PASSWORD = 'missing-password',\n  MISSING_SESSION_INFO = 'missing-verification-id',\n  MODULE_DESTROYED = 'app-deleted',\n  NEED_CONFIRMATION = 'account-exists-with-different-credential',\n  NETWORK_REQUEST_FAILED = 'network-request-failed',\n  NULL_USER = 'null-user',\n  NO_AUTH_EVENT = 'no-auth-event',\n  NO_SUCH_PROVIDER = 'no-such-provider',\n  OPERATION_NOT_ALLOWED = 'operation-not-allowed',\n  OPERATION_NOT_SUPPORTED = 'operation-not-supported-in-this-environment',\n  POPUP_BLOCKED = 'popup-blocked',\n  POPUP_CLOSED_BY_USER = 'popup-closed-by-user',\n  PROVIDER_ALREADY_LINKED = 'provider-already-linked',\n  QUOTA_EXCEEDED = 'quota-exceeded',\n  REDIRECT_CANCELLED_BY_USER = 'redirect-cancelled-by-user',\n  REDIRECT_OPERATION_PENDING = 'redirect-operation-pending',\n  REJECTED_CREDENTIAL = 'rejected-credential',\n  SECOND_FACTOR_ALREADY_ENROLLED = 'second-factor-already-in-use',\n  SECOND_FACTOR_LIMIT_EXCEEDED = 'maximum-second-factor-count-exceeded',\n  TENANT_ID_MISMATCH = 'tenant-id-mismatch',\n  TIMEOUT = 'timeout',\n  TOKEN_EXPIRED = 'user-token-expired',\n  TOO_MANY_ATTEMPTS_TRY_LATER = 'too-many-requests',\n  UNAUTHORIZED_DOMAIN = 'unauthorized-continue-uri',\n  UNSUPPORTED_FIRST_FACTOR = 'unsupported-first-factor',\n  UNSUPPORTED_PERSISTENCE = 'unsupported-persistence-type',\n  UNSUPPORTED_TENANT_OPERATION = 'unsupported-tenant-operation',\n  UNVERIFIED_EMAIL = 'unverified-email',\n  USER_CANCELLED = 'user-cancelled',\n  USER_DELETED = 'user-not-found',\n  USER_DISABLED = 'user-disabled',\n  USER_MISMATCH = 'user-mismatch',\n  USER_SIGNED_OUT = 'user-signed-out',\n  WEAK_PASSWORD = 'weak-password',\n  WEB_STORAGE_UNSUPPORTED = 'web-storage-unsupported',\n  ALREADY_INITIALIZED = 'already-initialized',\n  RECAPTCHA_NOT_ENABLED = 'recaptcha-not-enabled',\n  MISSING_RECAPTCHA_TOKEN = 'missing-recaptcha-token',\n  INVALID_RECAPTCHA_TOKEN = 'invalid-recaptcha-token',\n  INVALID_RECAPTCHA_ACTION = 'invalid-recaptcha-action',\n  MISSING_CLIENT_TYPE = 'missing-client-type',\n  MISSING_RECAPTCHA_VERSION = 'missing-recaptcha-version',\n  INVALID_RECAPTCHA_VERSION = 'invalid-recaptcha-version',\n  INVALID_REQ_TYPE = 'invalid-req-type',\n  UNSUPPORTED_PASSWORD_POLICY_SCHEMA_VERSION = 'unsupported-password-policy-schema-version',\n  PASSWORD_DOES_NOT_MEET_REQUIREMENTS = 'password-does-not-meet-requirements'\n}\n\nfunction _debugErrorMap(): ErrorMap<AuthErrorCode> {\n  return {\n    [AuthErrorCode.ADMIN_ONLY_OPERATION]:\n      'This operation is restricted to administrators only.',\n    [AuthErrorCode.ARGUMENT_ERROR]: '',\n    [AuthErrorCode.APP_NOT_AUTHORIZED]:\n      \"This app, identified by the domain where it's hosted, is not \" +\n      'authorized to use Firebase Authentication with the provided API key. ' +\n      'Review your key configuration in the Google API console.',\n    [AuthErrorCode.APP_NOT_INSTALLED]:\n      'The requested mobile application corresponding to the identifier (' +\n      'Android package name or iOS bundle ID) provided is not installed on ' +\n      'this device.',\n    [AuthErrorCode.CAPTCHA_CHECK_FAILED]:\n      'The reCAPTCHA response token provided is either invalid, expired, ' +\n      'already used or the domain associated with it does not match the list ' +\n      'of whitelisted domains.',\n    [AuthErrorCode.CODE_EXPIRED]:\n      'The SMS code has expired. Please re-send the verification code to try ' +\n      'again.',\n    [AuthErrorCode.CORDOVA_NOT_READY]: 'Cordova framework is not ready.',\n    [AuthErrorCode.CORS_UNSUPPORTED]: 'This browser is not supported.',\n    [AuthErrorCode.CREDENTIAL_ALREADY_IN_USE]:\n      'This credential is already associated with a different user account.',\n    [AuthErrorCode.CREDENTIAL_MISMATCH]:\n      'The custom token corresponds to a different audience.',\n    [AuthErrorCode.CREDENTIAL_TOO_OLD_LOGIN_AGAIN]:\n      'This operation is sensitive and requires recent authentication. Log in ' +\n      'again before retrying this request.',\n    [AuthErrorCode.DEPENDENT_SDK_INIT_BEFORE_AUTH]:\n      'Another Firebase SDK was initialized and is trying to use Auth before Auth is ' +\n      'initialized. Please be sure to call `initializeAuth` or `getAuth` before ' +\n      'starting any other Firebase SDK.',\n    [AuthErrorCode.DYNAMIC_LINK_NOT_ACTIVATED]:\n      'Please activate Dynamic Links in the Firebase Console and agree to the terms and ' +\n      'conditions.',\n    [AuthErrorCode.EMAIL_CHANGE_NEEDS_VERIFICATION]:\n      'Multi-factor users must always have a verified email.',\n    [AuthErrorCode.EMAIL_EXISTS]:\n      'The email address is already in use by another account.',\n    [AuthErrorCode.EMULATOR_CONFIG_FAILED]:\n      'Auth instance has already been used to make a network call. Auth can ' +\n      'no longer be configured to use the emulator. Try calling ' +\n      '\"connectAuthEmulator()\" sooner.',\n    [AuthErrorCode.EXPIRED_OOB_CODE]: 'The action code has expired.',\n    [AuthErrorCode.EXPIRED_POPUP_REQUEST]:\n      'This operation has been cancelled due to another conflicting popup being opened.',\n    [AuthErrorCode.INTERNAL_ERROR]: 'An internal AuthError has occurred.',\n    [AuthErrorCode.INVALID_APP_CREDENTIAL]:\n      'The phone verification request contains an invalid application verifier.' +\n      ' The reCAPTCHA token response is either invalid or expired.',\n    [AuthErrorCode.INVALID_APP_ID]:\n      'The mobile app identifier is not registed for the current project.',\n    [AuthErrorCode.INVALID_AUTH]:\n      \"This user's credential isn't valid for this project. This can happen \" +\n      \"if the user's token has been tampered with, or if the user isn't for \" +\n      'the project associated with this API key.',\n    [AuthErrorCode.INVALID_AUTH_EVENT]: 'An internal AuthError has occurred.',\n    [AuthErrorCode.INVALID_CODE]:\n      'The SMS verification code used to create the phone auth credential is ' +\n      'invalid. Please resend the verification code sms and be sure to use the ' +\n      'verification code provided by the user.',\n    [AuthErrorCode.INVALID_CONTINUE_URI]:\n      'The continue URL provided in the request is invalid.',\n    [AuthErrorCode.INVALID_CORDOVA_CONFIGURATION]:\n      'The following Cordova plugins must be installed to enable OAuth sign-in: ' +\n      'cordova-plugin-buildinfo, cordova-universal-links-plugin, ' +\n      'cordova-plugin-browsertab, cordova-plugin-inappbrowser and ' +\n      'cordova-plugin-customurlscheme.',\n    [AuthErrorCode.INVALID_CUSTOM_TOKEN]:\n      'The custom token format is incorrect. Please check the documentation.',\n    [AuthErrorCode.INVALID_DYNAMIC_LINK_DOMAIN]:\n      'The provided dynamic link domain is not configured or authorized for the current project.',\n    [AuthErrorCode.INVALID_EMAIL]: 'The email address is badly formatted.',\n    [AuthErrorCode.INVALID_EMULATOR_SCHEME]:\n      'Emulator URL must start with a valid scheme (http:// or https://).',\n    [AuthErrorCode.INVALID_API_KEY]:\n      'Your API key is invalid, please check you have copied it correctly.',\n    [AuthErrorCode.INVALID_CERT_HASH]:\n      'The SHA-1 certificate hash provided is invalid.',\n    [AuthErrorCode.INVALID_CREDENTIAL]:\n      'The supplied auth credential is incorrect, malformed or has expired.',\n    [AuthErrorCode.INVALID_MESSAGE_PAYLOAD]:\n      'The email template corresponding to this action contains invalid characters in its message. ' +\n      'Please fix by going to the Auth email templates section in the Firebase Console.',\n    [AuthErrorCode.INVALID_MFA_SESSION]:\n      'The request does not contain a valid proof of first factor successful sign-in.',\n    [AuthErrorCode.INVALID_OAUTH_PROVIDER]:\n      'EmailAuthProvider is not supported for this operation. This operation ' +\n      'only supports OAuth providers.',\n    [AuthErrorCode.INVALID_OAUTH_CLIENT_ID]:\n      'The OAuth client ID provided is either invalid or does not match the ' +\n      'specified API key.',\n    [AuthErrorCode.INVALID_ORIGIN]:\n      'This domain is not authorized for OAuth operations for your Firebase ' +\n      'project. Edit the list of authorized domains from the Firebase console.',\n    [AuthErrorCode.INVALID_OOB_CODE]:\n      'The action code is invalid. This can happen if the code is malformed, ' +\n      'expired, or has already been used.',\n    [AuthErrorCode.INVALID_PASSWORD]:\n      'The password is invalid or the user does not have a password.',\n    [AuthErrorCode.INVALID_PERSISTENCE]:\n      'The specified persistence type is invalid. It can only be local, session or none.',\n    [AuthErrorCode.INVALID_PHONE_NUMBER]:\n      'The format of the phone number provided is incorrect. Please enter the ' +\n      'phone number in a format that can be parsed into E.164 format. E.164 ' +\n      'phone numbers are written in the format [+][country code][subscriber ' +\n      'number including area code].',\n    [AuthErrorCode.INVALID_PROVIDER_ID]:\n      'The specified provider ID is invalid.',\n    [AuthErrorCode.INVALID_RECIPIENT_EMAIL]:\n      'The email corresponding to this action failed to send as the provided ' +\n      'recipient email address is invalid.',\n    [AuthErrorCode.INVALID_SENDER]:\n      'The email template corresponding to this action contains an invalid sender email or name. ' +\n      'Please fix by going to the Auth email templates section in the Firebase Console.',\n    [AuthErrorCode.INVALID_SESSION_INFO]:\n      'The verification ID used to create the phone auth credential is invalid.',\n    [AuthErrorCode.INVALID_TENANT_ID]:\n      \"The Auth instance's tenant ID is invalid.\",\n    [AuthErrorCode.LOGIN_BLOCKED]:\n      'Login blocked by user-provided method: {$originalMessage}',\n    [AuthErrorCode.MISSING_ANDROID_PACKAGE_NAME]:\n      'An Android Package Name must be provided if the Android App is required to be installed.',\n    [AuthErrorCode.MISSING_AUTH_DOMAIN]:\n      'Be sure to include authDomain when calling firebase.initializeApp(), ' +\n      'by following the instructions in the Firebase console.',\n    [AuthErrorCode.MISSING_APP_CREDENTIAL]:\n      'The phone verification request is missing an application verifier ' +\n      'assertion. A reCAPTCHA response token needs to be provided.',\n    [AuthErrorCode.MISSING_CODE]:\n      'The phone auth credential was created with an empty SMS verification code.',\n    [AuthErrorCode.MISSING_CONTINUE_URI]:\n      'A continue URL must be provided in the request.',\n    [AuthErrorCode.MISSING_IFRAME_START]: 'An internal AuthError has occurred.',\n    [AuthErrorCode.MISSING_IOS_BUNDLE_ID]:\n      'An iOS Bundle ID must be provided if an App Store ID is provided.',\n    [AuthErrorCode.MISSING_OR_INVALID_NONCE]:\n      'The request does not contain a valid nonce. This can occur if the ' +\n      'SHA-256 hash of the provided raw nonce does not match the hashed nonce ' +\n      'in the ID token payload.',\n    [AuthErrorCode.MISSING_PASSWORD]: 'A non-empty password must be provided',\n    [AuthErrorCode.MISSING_MFA_INFO]:\n      'No second factor identifier is provided.',\n    [AuthErrorCode.MISSING_MFA_SESSION]:\n      'The request is missing proof of first factor successful sign-in.',\n    [AuthErrorCode.MISSING_PHONE_NUMBER]:\n      'To send verification codes, provide a phone number for the recipient.',\n    [AuthErrorCode.MISSING_SESSION_INFO]:\n      'The phone auth credential was created with an empty verification ID.',\n    [AuthErrorCode.MODULE_DESTROYED]:\n      'This instance of FirebaseApp has been deleted.',\n    [AuthErrorCode.MFA_INFO_NOT_FOUND]:\n      'The user does not have a second factor matching the identifier provided.',\n    [AuthErrorCode.MFA_REQUIRED]:\n      'Proof of ownership of a second factor is required to complete sign-in.',\n    [AuthErrorCode.NEED_CONFIRMATION]:\n      'An account already exists with the same email address but different ' +\n      'sign-in credentials. Sign in using a provider associated with this ' +\n      'email address.',\n    [AuthErrorCode.NETWORK_REQUEST_FAILED]:\n      'A network AuthError (such as timeout, interrupted connection or unreachable host) has occurred.',\n    [AuthErrorCode.NO_AUTH_EVENT]: 'An internal AuthError has occurred.',\n    [AuthErrorCode.NO_SUCH_PROVIDER]:\n      'User was not linked to an account with the given provider.',\n    [AuthErrorCode.NULL_USER]:\n      'A null user object was provided as the argument for an operation which ' +\n      'requires a non-null user object.',\n    [AuthErrorCode.OPERATION_NOT_ALLOWED]:\n      'The given sign-in provider is disabled for this Firebase project. ' +\n      'Enable it in the Firebase console, under the sign-in method tab of the ' +\n      'Auth section.',\n    [AuthErrorCode.OPERATION_NOT_SUPPORTED]:\n      'This operation is not supported in the environment this application is ' +\n      'running on. \"location.protocol\" must be http, https or chrome-extension' +\n      ' and web storage must be enabled.',\n    [AuthErrorCode.POPUP_BLOCKED]:\n      'Unable to establish a connection with the popup. It may have been blocked by the browser.',\n    [AuthErrorCode.POPUP_CLOSED_BY_USER]:\n      'The popup has been closed by the user before finalizing the operation.',\n    [AuthErrorCode.PROVIDER_ALREADY_LINKED]:\n      'User can only be linked to one identity for the given provider.',\n    [AuthErrorCode.QUOTA_EXCEEDED]:\n      \"The project's quota for this operation has been exceeded.\",\n    [AuthErrorCode.REDIRECT_CANCELLED_BY_USER]:\n      'The redirect operation has been cancelled by the user before finalizing.',\n    [AuthErrorCode.REDIRECT_OPERATION_PENDING]:\n      'A redirect sign-in operation is already pending.',\n    [AuthErrorCode.REJECTED_CREDENTIAL]:\n      'The request contains malformed or mismatching credentials.',\n    [AuthErrorCode.SECOND_FACTOR_ALREADY_ENROLLED]:\n      'The second factor is already enrolled on this account.',\n    [AuthErrorCode.SECOND_FACTOR_LIMIT_EXCEEDED]:\n      'The maximum allowed number of second factors on a user has been exceeded.',\n    [AuthErrorCode.TENANT_ID_MISMATCH]:\n      \"The provided tenant ID does not match the Auth instance's tenant ID\",\n    [AuthErrorCode.TIMEOUT]: 'The operation has timed out.',\n    [AuthErrorCode.TOKEN_EXPIRED]:\n      \"The user's credential is no longer valid. The user must sign in again.\",\n    [AuthErrorCode.TOO_MANY_ATTEMPTS_TRY_LATER]:\n      'We have blocked all requests from this device due to unusual activity. ' +\n      'Try again later.',\n    [AuthErrorCode.UNAUTHORIZED_DOMAIN]:\n      'The domain of the continue URL is not whitelisted.  Please whitelist ' +\n      'the domain in the Firebase console.',\n    [AuthErrorCode.UNSUPPORTED_FIRST_FACTOR]:\n      'Enrolling a second factor or signing in with a multi-factor account requires sign-in with a supported first factor.',\n    [AuthErrorCode.UNSUPPORTED_PERSISTENCE]:\n      'The current environment does not support the specified persistence type.',\n    [AuthErrorCode.UNSUPPORTED_TENANT_OPERATION]:\n      'This operation is not supported in a multi-tenant context.',\n    [AuthErrorCode.UNVERIFIED_EMAIL]:\n      'The operation requires a verified email.',\n    [AuthErrorCode.USER_CANCELLED]:\n      'The user did not grant your application the permissions it requested.',\n    [AuthErrorCode.USER_DELETED]:\n      'There is no user record corresponding to this identifier. The user may ' +\n      'have been deleted.',\n    [AuthErrorCode.USER_DISABLED]:\n      'The user account has been disabled by an administrator.',\n    [AuthErrorCode.USER_MISMATCH]:\n      'The supplied credentials do not correspond to the previously signed in user.',\n    [AuthErrorCode.USER_SIGNED_OUT]: '',\n    [AuthErrorCode.WEAK_PASSWORD]:\n      'The password must be 6 characters long or more.',\n    [AuthErrorCode.WEB_STORAGE_UNSUPPORTED]:\n      'This browser is not supported or 3rd party cookies and data may be disabled.',\n    [AuthErrorCode.ALREADY_INITIALIZED]:\n      'initializeAuth() has already been called with ' +\n      'different options. To avoid this error, call initializeAuth() with the ' +\n      'same options as when it was originally called, or call getAuth() to return the' +\n      ' already initialized instance.',\n    [AuthErrorCode.MISSING_RECAPTCHA_TOKEN]:\n      'The reCAPTCHA token is missing when sending request to the backend.',\n    [AuthErrorCode.INVALID_RECAPTCHA_TOKEN]:\n      'The reCAPTCHA token is invalid when sending request to the backend.',\n    [AuthErrorCode.INVALID_RECAPTCHA_ACTION]:\n      'The reCAPTCHA action is invalid when sending request to the backend.',\n    [AuthErrorCode.RECAPTCHA_NOT_ENABLED]:\n      'reCAPTCHA Enterprise integration is not enabled for this project.',\n    [AuthErrorCode.MISSING_CLIENT_TYPE]:\n      'The reCAPTCHA client type is missing when sending request to the backend.',\n    [AuthErrorCode.MISSING_RECAPTCHA_VERSION]:\n      'The reCAPTCHA version is missing when sending request to the backend.',\n    [AuthErrorCode.INVALID_REQ_TYPE]: 'Invalid request parameters.',\n    [AuthErrorCode.INVALID_RECAPTCHA_VERSION]:\n      'The reCAPTCHA version is invalid when sending request to the backend.',\n    [AuthErrorCode.UNSUPPORTED_PASSWORD_POLICY_SCHEMA_VERSION]:\n      'The password policy received from the backend uses a schema version that is not supported by this version of the Firebase SDK.',\n    [AuthErrorCode.PASSWORD_DOES_NOT_MEET_REQUIREMENTS]:\n      'The password does not meet the requirements.'\n  };\n}\n\nexport interface ErrorMapRetriever extends AuthErrorMap {\n  (): ErrorMap<AuthErrorCode>;\n}\n\nfunction _prodErrorMap(): ErrorMap<AuthErrorCode> {\n  // We will include this one message in the prod error map since by the very\n  // nature of this error, developers will never be able to see the message\n  // using the debugErrorMap (which is installed during auth initialization).\n  return {\n    [AuthErrorCode.DEPENDENT_SDK_INIT_BEFORE_AUTH]:\n      'Another Firebase SDK was initialized and is trying to use Auth before Auth is ' +\n      'initialized. Please be sure to call `initializeAuth` or `getAuth` before ' +\n      'starting any other Firebase SDK.'\n  } as ErrorMap<AuthErrorCode>;\n}\n\n/**\n * A verbose error map with detailed descriptions for most error codes.\n *\n * See discussion at {@link AuthErrorMap}\n *\n * @public\n */\nexport const debugErrorMap: AuthErrorMap = _debugErrorMap;\n\n/**\n * A minimal error map with all verbose error messages stripped.\n *\n * See discussion at {@link AuthErrorMap}\n *\n * @public\n */\nexport const prodErrorMap: AuthErrorMap = _prodErrorMap;\n\nexport interface NamedErrorParams {\n  appName: AppName;\n  credential?: AuthCredential;\n  email?: string;\n  phoneNumber?: string;\n  tenantId?: string;\n  user?: User;\n  _serverResponse?: object;\n}\n\n/**\n * @internal\n */\ntype GenericAuthErrorParams = {\n  [key in Exclude<\n    AuthErrorCode,\n    | AuthErrorCode.ARGUMENT_ERROR\n    | AuthErrorCode.DEPENDENT_SDK_INIT_BEFORE_AUTH\n    | AuthErrorCode.INTERNAL_ERROR\n    | AuthErrorCode.MFA_REQUIRED\n    | AuthErrorCode.NO_AUTH_EVENT\n    | AuthErrorCode.OPERATION_NOT_SUPPORTED\n  >]: {\n    appName?: AppName;\n    email?: string;\n    phoneNumber?: string;\n    message?: string;\n  };\n};\n\n/**\n * @internal\n */\nexport interface AuthErrorParams extends GenericAuthErrorParams {\n  [AuthErrorCode.ARGUMENT_ERROR]: { appName?: AppName };\n  [AuthErrorCode.DEPENDENT_SDK_INIT_BEFORE_AUTH]: { appName?: AppName };\n  [AuthErrorCode.INTERNAL_ERROR]: { appName?: AppName };\n  [AuthErrorCode.LOGIN_BLOCKED]: {\n    appName?: AppName;\n    originalMessage?: string;\n  };\n  [AuthErrorCode.OPERATION_NOT_SUPPORTED]: { appName?: AppName };\n  [AuthErrorCode.NO_AUTH_EVENT]: { appName?: AppName };\n  [AuthErrorCode.MFA_REQUIRED]: {\n    appName: AppName;\n    _serverResponse: IdTokenMfaResponse;\n  };\n  [AuthErrorCode.INVALID_CORDOVA_CONFIGURATION]: {\n    appName: AppName;\n    missingPlugin?: string;\n  };\n}\n\nexport const _DEFAULT_AUTH_ERROR_FACTORY = new ErrorFactory<\n  AuthErrorCode,\n  AuthErrorParams\n>('auth', 'Firebase', _prodErrorMap());\n\n/**\n * A map of potential `Auth` error codes, for easier comparison with errors\n * thrown by the SDK.\n *\n * @remarks\n * Note that you can't tree-shake individual keys\n * in the map, so by using the map you might substantially increase your\n * bundle size.\n *\n * @public\n */\nexport const AUTH_ERROR_CODES_MAP_DO_NOT_USE_INTERNALLY = {\n  ADMIN_ONLY_OPERATION: 'auth/admin-restricted-operation',\n  ARGUMENT_ERROR: 'auth/argument-error',\n  APP_NOT_AUTHORIZED: 'auth/app-not-authorized',\n  APP_NOT_INSTALLED: 'auth/app-not-installed',\n  CAPTCHA_CHECK_FAILED: 'auth/captcha-check-failed',\n  CODE_EXPIRED: 'auth/code-expired',\n  CORDOVA_NOT_READY: 'auth/cordova-not-ready',\n  CORS_UNSUPPORTED: 'auth/cors-unsupported',\n  CREDENTIAL_ALREADY_IN_USE: 'auth/credential-already-in-use',\n  CREDENTIAL_MISMATCH: 'auth/custom-token-mismatch',\n  CREDENTIAL_TOO_OLD_LOGIN_AGAIN: 'auth/requires-recent-login',\n  DEPENDENT_SDK_INIT_BEFORE_AUTH: 'auth/dependent-sdk-initialized-before-auth',\n  DYNAMIC_LINK_NOT_ACTIVATED: 'auth/dynamic-link-not-activated',\n  EMAIL_CHANGE_NEEDS_VERIFICATION: 'auth/email-change-needs-verification',\n  EMAIL_EXISTS: 'auth/email-already-in-use',\n  EMULATOR_CONFIG_FAILED: 'auth/emulator-config-failed',\n  EXPIRED_OOB_CODE: 'auth/expired-action-code',\n  EXPIRED_POPUP_REQUEST: 'auth/cancelled-popup-request',\n  INTERNAL_ERROR: 'auth/internal-error',\n  INVALID_API_KEY: 'auth/invalid-api-key',\n  INVALID_APP_CREDENTIAL: 'auth/invalid-app-credential',\n  INVALID_APP_ID: 'auth/invalid-app-id',\n  INVALID_AUTH: 'auth/invalid-user-token',\n  INVALID_AUTH_EVENT: 'auth/invalid-auth-event',\n  INVALID_CERT_HASH: 'auth/invalid-cert-hash',\n  INVALID_CODE: 'auth/invalid-verification-code',\n  INVALID_CONTINUE_URI: 'auth/invalid-continue-uri',\n  INVALID_CORDOVA_CONFIGURATION: 'auth/invalid-cordova-configuration',\n  INVALID_CUSTOM_TOKEN: 'auth/invalid-custom-token',\n  INVALID_DYNAMIC_LINK_DOMAIN: 'auth/invalid-dynamic-link-domain',\n  INVALID_EMAIL: 'auth/invalid-email',\n  INVALID_EMULATOR_SCHEME: 'auth/invalid-emulator-scheme',\n  INVALID_IDP_RESPONSE: 'auth/invalid-credential',\n  INVALID_LOGIN_CREDENTIALS: 'auth/invalid-credential',\n  INVALID_MESSAGE_PAYLOAD: 'auth/invalid-message-payload',\n  INVALID_MFA_SESSION: 'auth/invalid-multi-factor-session',\n  INVALID_OAUTH_CLIENT_ID: 'auth/invalid-oauth-client-id',\n  INVALID_OAUTH_PROVIDER: 'auth/invalid-oauth-provider',\n  INVALID_OOB_CODE: 'auth/invalid-action-code',\n  INVALID_ORIGIN: 'auth/unauthorized-domain',\n  INVALID_PASSWORD: 'auth/wrong-password',\n  INVALID_PERSISTENCE: 'auth/invalid-persistence-type',\n  INVALID_PHONE_NUMBER: 'auth/invalid-phone-number',\n  INVALID_PROVIDER_ID: 'auth/invalid-provider-id',\n  INVALID_RECIPIENT_EMAIL: 'auth/invalid-recipient-email',\n  INVALID_SENDER: 'auth/invalid-sender',\n  INVALID_SESSION_INFO: 'auth/invalid-verification-id',\n  INVALID_TENANT_ID: 'auth/invalid-tenant-id',\n  MFA_INFO_NOT_FOUND: 'auth/multi-factor-info-not-found',\n  MFA_REQUIRED: 'auth/multi-factor-auth-required',\n  MISSING_ANDROID_PACKAGE_NAME: 'auth/missing-android-pkg-name',\n  MISSING_APP_CREDENTIAL: 'auth/missing-app-credential',\n  MISSING_AUTH_DOMAIN: 'auth/auth-domain-config-required',\n  MISSING_CODE: 'auth/missing-verification-code',\n  MISSING_CONTINUE_URI: 'auth/missing-continue-uri',\n  MISSING_IFRAME_START: 'auth/missing-iframe-start',\n  MISSING_IOS_BUNDLE_ID: 'auth/missing-ios-bundle-id',\n  MISSING_OR_INVALID_NONCE: 'auth/missing-or-invalid-nonce',\n  MISSING_MFA_INFO: 'auth/missing-multi-factor-info',\n  MISSING_MFA_SESSION: 'auth/missing-multi-factor-session',\n  MISSING_PHONE_NUMBER: 'auth/missing-phone-number',\n  MISSING_SESSION_INFO: 'auth/missing-verification-id',\n  MODULE_DESTROYED: 'auth/app-deleted',\n  NEED_CONFIRMATION: 'auth/account-exists-with-different-credential',\n  NETWORK_REQUEST_FAILED: 'auth/network-request-failed',\n  NULL_USER: 'auth/null-user',\n  NO_AUTH_EVENT: 'auth/no-auth-event',\n  NO_SUCH_PROVIDER: 'auth/no-such-provider',\n  OPERATION_NOT_ALLOWED: 'auth/operation-not-allowed',\n  OPERATION_NOT_SUPPORTED: 'auth/operation-not-supported-in-this-environment',\n  POPUP_BLOCKED: 'auth/popup-blocked',\n  POPUP_CLOSED_BY_USER: 'auth/popup-closed-by-user',\n  PROVIDER_ALREADY_LINKED: 'auth/provider-already-linked',\n  QUOTA_EXCEEDED: 'auth/quota-exceeded',\n  REDIRECT_CANCELLED_BY_USER: 'auth/redirect-cancelled-by-user',\n  REDIRECT_OPERATION_PENDING: 'auth/redirect-operation-pending',\n  REJECTED_CREDENTIAL: 'auth/rejected-credential',\n  SECOND_FACTOR_ALREADY_ENROLLED: 'auth/second-factor-already-in-use',\n  SECOND_FACTOR_LIMIT_EXCEEDED: 'auth/maximum-second-factor-count-exceeded',\n  TENANT_ID_MISMATCH: 'auth/tenant-id-mismatch',\n  TIMEOUT: 'auth/timeout',\n  TOKEN_EXPIRED: 'auth/user-token-expired',\n  TOO_MANY_ATTEMPTS_TRY_LATER: 'auth/too-many-requests',\n  UNAUTHORIZED_DOMAIN: 'auth/unauthorized-continue-uri',\n  UNSUPPORTED_FIRST_FACTOR: 'auth/unsupported-first-factor',\n  UNSUPPORTED_PERSISTENCE: 'auth/unsupported-persistence-type',\n  UNSUPPORTED_TENANT_OPERATION: 'auth/unsupported-tenant-operation',\n  UNVERIFIED_EMAIL: 'auth/unverified-email',\n  USER_CANCELLED: 'auth/user-cancelled',\n  USER_DELETED: 'auth/user-not-found',\n  USER_DISABLED: 'auth/user-disabled',\n  USER_MISMATCH: 'auth/user-mismatch',\n  USER_SIGNED_OUT: 'auth/user-signed-out',\n  WEAK_PASSWORD: 'auth/weak-password',\n  WEB_STORAGE_UNSUPPORTED: 'auth/web-storage-unsupported',\n  ALREADY_INITIALIZED: 'auth/already-initialized',\n  RECAPTCHA_NOT_ENABLED: 'auth/recaptcha-not-enabled',\n  MISSING_RECAPTCHA_TOKEN: 'auth/missing-recaptcha-token',\n  INVALID_RECAPTCHA_TOKEN: 'auth/invalid-recaptcha-token',\n  INVALID_RECAPTCHA_ACTION: 'auth/invalid-recaptcha-action',\n  MISSING_CLIENT_TYPE: 'auth/missing-client-type',\n  MISSING_RECAPTCHA_VERSION: 'auth/missing-recaptcha-version',\n  INVALID_RECAPTCHA_VERSION: 'auth/invalid-recaptcha-version',\n  INVALID_REQ_TYPE: 'auth/invalid-req-type'\n} as const;\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Logger, LogLevel } from '@firebase/logger';\nimport { SDK_VERSION } from '@firebase/app';\n\nexport { LogLevel };\n\nconst logClient = new Logger('@firebase/auth');\n\n// Helper methods are needed because variables can't be exported as read/write\nexport function _getLogLevel(): LogLevel {\n  return logClient.logLevel;\n}\n\nexport function _setLogLevel(newLevel: LogLevel): void {\n  logClient.logLevel = newLevel;\n}\n\nexport function _logDebug(msg: string, ...args: string[]): void {\n  if (logClient.logLevel <= LogLevel.DEBUG) {\n    logClient.debug(`Auth (${SDK_VERSION}): ${msg}`, ...args);\n  }\n}\n\nexport function _logWarn(msg: string, ...args: string[]): void {\n  if (logClient.logLevel <= LogLevel.WARN) {\n    logClient.warn(`Auth (${SDK_VERSION}): ${msg}`, ...args);\n  }\n}\n\nexport function _logError(msg: string, ...args: string[]): void {\n  if (logClient.logLevel <= LogLevel.ERROR) {\n    logClient.error(`Auth (${SDK_VERSION}): ${msg}`, ...args);\n  }\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Auth } from '../../model/public_types';\nimport { ErrorFactory, FirebaseError } from '@firebase/util';\nimport { AuthInternal } from '../../model/auth';\nimport {\n  _DEFAULT_AUTH_ERROR_FACTORY,\n  AuthErrorCode,\n  AuthErrorParams,\n  prodErrorMap,\n  ErrorMapRetriever\n} from '../errors';\nimport { _logError } from './log';\n\ntype AuthErrorListParams<K> = K extends keyof AuthErrorParams\n  ? [AuthErrorParams[K]]\n  : [];\ntype LessAppName<K extends AuthErrorCode> = Omit<AuthErrorParams[K], 'appName'>;\n\n/**\n * Unconditionally fails, throwing a developer facing INTERNAL_ERROR\n *\n * @example\n * ```javascript\n * fail(auth, AuthErrorCode.MFA_REQUIRED);  // Error: the MFA_REQUIRED error needs more params than appName\n * fail(auth, AuthErrorCode.MFA_REQUIRED, {serverResponse});  // Compiles\n * fail(AuthErrorCode.INTERNAL_ERROR);  // Compiles; internal error does not need appName\n * fail(AuthErrorCode.USER_DELETED);  // Error: USER_DELETED requires app name\n * fail(auth, AuthErrorCode.USER_DELETED);  // Compiles; USER_DELETED _only_ needs app name\n * ```\n *\n * @param appName App name for tagging the error\n * @throws FirebaseError\n */\nexport function _fail<K extends AuthErrorCode>(\n  code: K,\n  ...data: {} extends AuthErrorParams[K]\n    ? [AuthErrorParams[K]?]\n    : [AuthErrorParams[K]]\n): never;\nexport function _fail<K extends AuthErrorCode>(\n  auth: Auth,\n  code: K,\n  ...data: {} extends LessAppName<K> ? [LessAppName<K>?] : [LessAppName<K>]\n): never;\nexport function _fail<K extends AuthErrorCode>(\n  authOrCode: Auth | K,\n  ...rest: unknown[]\n): never {\n  throw createErrorInternal(authOrCode, ...rest);\n}\n\nexport function _createError<K extends AuthErrorCode>(\n  code: K,\n  ...data: {} extends AuthErrorParams[K]\n    ? [AuthErrorParams[K]?]\n    : [AuthErrorParams[K]]\n): FirebaseError;\nexport function _createError<K extends AuthErrorCode>(\n  auth: Auth,\n  code: K,\n  ...data: {} extends LessAppName<K> ? [LessAppName<K>?] : [LessAppName<K>]\n): FirebaseError;\nexport function _createError<K extends AuthErrorCode>(\n  authOrCode: Auth | K,\n  ...rest: unknown[]\n): FirebaseError {\n  return createErrorInternal(authOrCode, ...rest);\n}\n\nexport function _errorWithCustomMessage(\n  auth: Auth,\n  code: AuthErrorCode,\n  message: string\n): FirebaseError {\n  const errorMap = {\n    ...(prodErrorMap as ErrorMapRetriever)(),\n    [code]: message\n  };\n  const factory = new ErrorFactory<AuthErrorCode, AuthErrorParams>(\n    'auth',\n    'Firebase',\n    errorMap\n  );\n  return factory.create(code, {\n    appName: auth.name\n  });\n}\n\nexport function _assertInstanceOf(\n  auth: Auth,\n  object: object,\n  instance: unknown\n): void {\n  const constructorInstance = instance as { new (...args: unknown[]): unknown };\n  if (!(object instanceof constructorInstance)) {\n    if (constructorInstance.name !== object.constructor.name) {\n      _fail(auth, AuthErrorCode.ARGUMENT_ERROR);\n    }\n\n    throw _errorWithCustomMessage(\n      auth,\n      AuthErrorCode.ARGUMENT_ERROR,\n      `Type of ${object.constructor.name} does not match expected instance.` +\n        `Did you pass a reference from a different Auth SDK?`\n    );\n  }\n}\n\nfunction createErrorInternal<K extends AuthErrorCode>(\n  authOrCode: Auth | K,\n  ...rest: unknown[]\n): FirebaseError {\n  if (typeof authOrCode !== 'string') {\n    const code = rest[0] as K;\n    const fullParams = [...rest.slice(1)] as AuthErrorListParams<K>;\n    if (fullParams[0]) {\n      fullParams[0].appName = authOrCode.name;\n    }\n\n    return (authOrCode as AuthInternal)._errorFactory.create(\n      code,\n      ...fullParams\n    );\n  }\n\n  return _DEFAULT_AUTH_ERROR_FACTORY.create(\n    authOrCode,\n    ...(rest as AuthErrorListParams<K>)\n  );\n}\n\nexport function _assert<K extends AuthErrorCode>(\n  assertion: unknown,\n  code: K,\n  ...data: {} extends AuthErrorParams[K]\n    ? [AuthErrorParams[K]?]\n    : [AuthErrorParams[K]]\n): asserts assertion;\nexport function _assert<K extends AuthErrorCode>(\n  assertion: unknown,\n  auth: Auth,\n  code: K,\n  ...data: {} extends LessAppName<K> ? [LessAppName<K>?] : [LessAppName<K>]\n): asserts assertion;\nexport function _assert<K extends AuthErrorCode>(\n  assertion: unknown,\n  authOrCode: Auth | K,\n  ...rest: unknown[]\n): asserts assertion {\n  if (!assertion) {\n    throw createErrorInternal(authOrCode, ...rest);\n  }\n}\n\n// We really do want to accept literally any function type here\n// eslint-disable-next-line @typescript-eslint/ban-types\ntype TypeExpectation = Function | string | MapType;\n\ninterface MapType extends Record<string, TypeExpectation | Optional> {}\n\nclass Optional {\n  constructor(readonly type: TypeExpectation) {}\n}\n\nexport function opt(type: TypeExpectation): Optional {\n  return new Optional(type);\n}\n\n/**\n * Asserts the runtime types of arguments. The 'expected' field can be one of\n * a class, a string (representing a \"typeof\" call), or a record map of name\n * to type. Furthermore, the opt() function can be used to mark a field as\n * optional. For example:\n *\n * function foo(auth: Auth, profile: {displayName?: string}, update = false) {\n *   assertTypes(arguments, [AuthImpl, {displayName: opt('string')}, opt('boolean')]);\n * }\n *\n * opt() can be used for any type:\n * function foo(auth?: Auth) {\n *   assertTypes(arguments, [opt(AuthImpl)]);\n * }\n *\n * The string types can be or'd together, and you can use \"null\" as well (note\n * that typeof null === 'object'; this is an edge case). For example:\n *\n * function foo(profile: {displayName?: string | null}) {\n *   assertTypes(arguments, [{displayName: opt('string|null')}]);\n * }\n *\n * @param args\n * @param expected\n */\nexport function assertTypes(\n  args: Omit<IArguments, 'callee'>,\n  ...expected: Array<TypeExpectation | Optional>\n): void {\n  if (args.length > expected.length) {\n    _fail(AuthErrorCode.ARGUMENT_ERROR, {});\n  }\n\n  for (let i = 0; i < expected.length; i++) {\n    let expect = expected[i];\n    const arg = args[i];\n\n    if (expect instanceof Optional) {\n      // If the arg is undefined, then it matches \"optional\" and we can move to\n      // the next arg\n      if (typeof arg === 'undefined') {\n        continue;\n      }\n      expect = expect.type;\n    }\n\n    if (typeof expect === 'string') {\n      // Handle the edge case for null because typeof null === 'object'\n      if (expect.includes('null') && arg === null) {\n        continue;\n      }\n\n      const required = expect.split('|');\n      _assert(required.includes(typeof arg), AuthErrorCode.ARGUMENT_ERROR, {});\n    } else if (typeof expect === 'object') {\n      // Recursively check record arguments\n      const record = arg as Record<string, unknown>;\n      const map = expect as MapType;\n      const keys = Object.keys(expect);\n\n      assertTypes(\n        keys.map(k => record[k]),\n        ...keys.map(k => map[k])\n      );\n    } else {\n      _assert(arg instanceof expect, AuthErrorCode.ARGUMENT_ERROR, {});\n    }\n  }\n}\n\n/**\n * Unconditionally fails, throwing an internal error with the given message.\n *\n * @param failure type of failure encountered\n * @throws Error\n */\nexport function debugFail(failure: string): never {\n  // Log the failure in addition to throw an exception, just in case the\n  // exception is swallowed.\n  const message = `INTERNAL ASSERTION FAILED: ` + failure;\n  _logError(message);\n\n  // NOTE: We don't use FirebaseError here because these are internal failures\n  // that cannot be handled by the user. (Also it would create a circular\n  // dependency between the error and assert modules which doesn't work.)\n  throw new Error(message);\n}\n\n/**\n * Fails if the given assertion condition is false, throwing an Error with the\n * given message if it did.\n *\n * @param assertion\n * @param message\n */\nexport function debugAssert(\n  assertion: unknown,\n  message: string\n): asserts assertion {\n  if (!assertion) {\n    debugFail(message);\n  }\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport function _getCurrentUrl(): string {\n  return (typeof self !== 'undefined' && self.location?.href) || '';\n}\n\nexport function _isHttpOrHttps(): boolean {\n  return _getCurrentScheme() === 'http:' || _getCurrentScheme() === 'https:';\n}\n\nexport function _getCurrentScheme(): string | null {\n  return (typeof self !== 'undefined' && self.location?.protocol) || null;\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { isBrowserExtension } from '@firebase/util';\nimport { _isHttpOrHttps } from './location';\n\n/**\n * Determine whether the browser is working online\n */\nexport function _isOnline(): boolean {\n  if (\n    typeof navigator !== 'undefined' &&\n    navigator &&\n    'onLine' in navigator &&\n    typeof navigator.onLine === 'boolean' &&\n    // Apply only for traditional web apps and Chrome extensions.\n    // This is especially true for Cordova apps which have unreliable\n    // navigator.onLine behavior unless cordova-plugin-network-information is\n    // installed which overwrites the native navigator.onLine value and\n    // defines navigator.connection.\n    (_isHttpOrHttps() || isBrowserExtension() || 'connection' in navigator)\n  ) {\n    return navigator.onLine;\n  }\n  // If we can't determine the state, assume it is online.\n  return true;\n}\n\nexport function _getUserLanguage(): string | null {\n  if (typeof navigator === 'undefined') {\n    return null;\n  }\n  const navigatorLanguage: NavigatorLanguage = navigator;\n  return (\n    // Most reliable, but only supported in Chrome/Firefox.\n    (navigatorLanguage.languages && navigatorLanguage.languages[0]) ||\n    // Supported in most browsers, but returns the language of the browser\n    // UI, not the language set in browser settings.\n    navigatorLanguage.language ||\n    // Couldn't determine language.\n    null\n  );\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { isMobileCordova, isReactNative } from '@firebase/util';\nimport { _isOnline } from './navigator';\nimport { debugAssert } from './assert';\n\nexport const enum DelayMin {\n  OFFLINE = 5000\n}\n\n/**\n * A structure to help pick between a range of long and short delay durations\n * depending on the current environment. In general, the long delay is used for\n * mobile environments whereas short delays are used for desktop environments.\n */\nexport class Delay {\n  // The default value for the offline delay timeout in ms.\n\n  private readonly isMobile: boolean;\n  constructor(\n    private readonly shortDelay: number,\n    private readonly longDelay: number\n  ) {\n    // Internal error when improperly initialized.\n    debugAssert(\n      longDelay > shortDelay,\n      'Short delay should be less than long delay!'\n    );\n    this.isMobile = isMobileCordova() || isReactNative();\n  }\n\n  get(): number {\n    if (!_isOnline()) {\n      // Pick the shorter timeout.\n      return Math.min(DelayMin.OFFLINE, this.shortDelay);\n    }\n    // If running in a mobile environment, return the long delay, otherwise\n    // return the short delay.\n    // This could be improved in the future to dynamically change based on other\n    // variables instead of just reading the current environment.\n    return this.isMobile ? this.longDelay : this.shortDelay;\n  }\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ConfigInternal } from '../../model/auth';\nimport { debugAssert } from './assert';\n\nexport function _emulatorUrl(config: ConfigInternal, path?: string): string {\n  debugAssert(config.emulator, 'Emulator should always be set here');\n  const { url } = config.emulator;\n\n  if (!path) {\n    return url;\n  }\n\n  return `${url}${path.startsWith('/') ? path.slice(1) : path}`;\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { debugFail } from './assert';\n\nexport class FetchProvider {\n  private static fetchImpl: typeof fetch | null;\n  private static headersImpl: typeof Headers | null;\n  private static responseImpl: typeof Response | null;\n\n  static initialize(\n    fetchImpl: typeof fetch,\n    headersImpl?: typeof Headers,\n    responseImpl?: typeof Response\n  ): void {\n    this.fetchImpl = fetchImpl;\n    if (headersImpl) {\n      this.headersImpl = headersImpl;\n    }\n    if (responseImpl) {\n      this.responseImpl = responseImpl;\n    }\n  }\n\n  static fetch(): typeof fetch {\n    if (this.fetchImpl) {\n      return this.fetchImpl;\n    }\n    if (typeof self !== 'undefined' && 'fetch' in self) {\n      return self.fetch;\n    }\n    if (typeof globalThis !== 'undefined' && globalThis.fetch) {\n      return globalThis.fetch;\n    }\n    if (typeof fetch !== 'undefined') {\n      return fetch;\n    }\n    debugFail(\n      'Could not find fetch implementation, make sure you call FetchProvider.initialize() with an appropriate polyfill'\n    );\n  }\n\n  static headers(): typeof Headers {\n    if (this.headersImpl) {\n      return this.headersImpl;\n    }\n    if (typeof self !== 'undefined' && 'Headers' in self) {\n      return self.Headers;\n    }\n    if (typeof globalThis !== 'undefined' && globalThis.Headers) {\n      return globalThis.Headers;\n    }\n    if (typeof Headers !== 'undefined') {\n      return Headers;\n    }\n    debugFail(\n      'Could not find Headers implementation, make sure you call FetchProvider.initialize() with an appropriate polyfill'\n    );\n  }\n\n  static response(): typeof Response {\n    if (this.responseImpl) {\n      return this.responseImpl;\n    }\n    if (typeof self !== 'undefined' && 'Response' in self) {\n      return self.Response;\n    }\n    if (typeof globalThis !== 'undefined' && globalThis.Response) {\n      return globalThis.Response;\n    }\n    if (typeof Response !== 'undefined') {\n      return Response;\n    }\n    debugFail(\n      'Could not find Response implementation, make sure you call FetchProvider.initialize() with an appropriate polyfill'\n    );\n  }\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AuthErrorCode } from '../core/errors';\n\n/**\n * Errors that can be returned by the backend\n */\nexport const enum ServerError {\n  ADMIN_ONLY_OPERATION = 'ADMIN_ONLY_OPERATION',\n  BLOCKING_FUNCTION_ERROR_RESPONSE = 'BLOCKING_FUNCTION_ERROR_RESPONSE',\n  CAPTCHA_CHECK_FAILED = 'CAPTCHA_CHECK_FAILED',\n  CORS_UNSUPPORTED = 'CORS_UNSUPPORTED',\n  CREDENTIAL_MISMATCH = 'CREDENTIAL_MISMATCH',\n  CREDENTIAL_TOO_OLD_LOGIN_AGAIN = 'CREDENTIAL_TOO_OLD_LOGIN_AGAIN',\n  DYNAMIC_LINK_NOT_ACTIVATED = 'DYNAMIC_LINK_NOT_ACTIVATED',\n  EMAIL_CHANGE_NEEDS_VERIFICATION = 'EMAIL_CHANGE_NEEDS_VERIFICATION',\n  EMAIL_EXISTS = 'EMAIL_EXISTS',\n  EMAIL_NOT_FOUND = 'EMAIL_NOT_FOUND',\n  EXPIRED_OOB_CODE = 'EXPIRED_OOB_CODE',\n  FEDERATED_USER_ID_ALREADY_LINKED = 'FEDERATED_USER_ID_ALREADY_LINKED',\n  INVALID_APP_CREDENTIAL = 'INVALID_APP_CREDENTIAL',\n  INVALID_APP_ID = 'INVALID_APP_ID',\n  INVALID_CERT_HASH = 'INVALID_CERT_HASH',\n  INVALID_CODE = 'INVALID_CODE',\n  INVALID_CONTINUE_URI = 'INVALID_CONTINUE_URI',\n  INVALID_CUSTOM_TOKEN = 'INVALID_CUSTOM_TOKEN',\n  INVALID_DYNAMIC_LINK_DOMAIN = 'INVALID_DYNAMIC_LINK_DOMAIN',\n  INVALID_EMAIL = 'INVALID_EMAIL',\n  INVALID_ID_TOKEN = 'INVALID_ID_TOKEN',\n  INVALID_IDP_RESPONSE = 'INVALID_IDP_RESPONSE',\n  INVALID_IDENTIFIER = 'INVALID_IDENTIFIER',\n  INVALID_LOGIN_CREDENTIALS = 'INVALID_LOGIN_CREDENTIALS',\n  INVALID_MESSAGE_PAYLOAD = 'INVALID_MESSAGE_PAYLOAD',\n  INVALID_MFA_PENDING_CREDENTIAL = 'INVALID_MFA_PENDING_CREDENTIAL',\n  INVALID_OAUTH_CLIENT_ID = 'INVALID_OAUTH_CLIENT_ID',\n  INVALID_OOB_CODE = 'INVALID_OOB_CODE',\n  INVALID_PASSWORD = 'INVALID_PASSWORD',\n  INVALID_PENDING_TOKEN = 'INVALID_PENDING_TOKEN',\n  INVALID_PHONE_NUMBER = 'INVALID_PHONE_NUMBER',\n  INVALID_PROVIDER_ID = 'INVALID_PROVIDER_ID',\n  INVALID_RECIPIENT_EMAIL = 'INVALID_RECIPIENT_EMAIL',\n  INVALID_SENDER = 'INVALID_SENDER',\n  INVALID_SESSION_INFO = 'INVALID_SESSION_INFO',\n  INVALID_TEMPORARY_PROOF = 'INVALID_TEMPORARY_PROOF',\n  INVALID_TENANT_ID = 'INVALID_TENANT_ID',\n  MFA_ENROLLMENT_NOT_FOUND = 'MFA_ENROLLMENT_NOT_FOUND',\n  MISSING_ANDROID_PACKAGE_NAME = 'MISSING_ANDROID_PACKAGE_NAME',\n  MISSING_APP_CREDENTIAL = 'MISSING_APP_CREDENTIAL',\n  MISSING_CODE = 'MISSING_CODE',\n  MISSING_CONTINUE_URI = 'MISSING_CONTINUE_URI',\n  MISSING_CUSTOM_TOKEN = 'MISSING_CUSTOM_TOKEN',\n  MISSING_IOS_BUNDLE_ID = 'MISSING_IOS_BUNDLE_ID',\n  MISSING_MFA_ENROLLMENT_ID = 'MISSING_MFA_ENROLLMENT_ID',\n  MISSING_MFA_PENDING_CREDENTIAL = 'MISSING_MFA_PENDING_CREDENTIAL',\n  MISSING_OOB_CODE = 'MISSING_OOB_CODE',\n  MISSING_OR_INVALID_NONCE = 'MISSING_OR_INVALID_NONCE',\n  MISSING_PASSWORD = 'MISSING_PASSWORD',\n  MISSING_REQ_TYPE = 'MISSING_REQ_TYPE',\n  MISSING_PHONE_NUMBER = 'MISSING_PHONE_NUMBER',\n  MISSING_SESSION_INFO = 'MISSING_SESSION_INFO',\n  OPERATION_NOT_ALLOWED = 'OPERATION_NOT_ALLOWED',\n  PASSWORD_LOGIN_DISABLED = 'PASSWORD_LOGIN_DISABLED',\n  QUOTA_EXCEEDED = 'QUOTA_EXCEEDED',\n  RESET_PASSWORD_EXCEED_LIMIT = 'RESET_PASSWORD_EXCEED_LIMIT',\n  REJECTED_CREDENTIAL = 'REJECTED_CREDENTIAL',\n  SECOND_FACTOR_EXISTS = 'SECOND_FACTOR_EXISTS',\n  SECOND_FACTOR_LIMIT_EXCEEDED = 'SECOND_FACTOR_LIMIT_EXCEEDED',\n  SESSION_EXPIRED = 'SESSION_EXPIRED',\n  TENANT_ID_MISMATCH = 'TENANT_ID_MISMATCH',\n  TOKEN_EXPIRED = 'TOKEN_EXPIRED',\n  TOO_MANY_ATTEMPTS_TRY_LATER = 'TOO_MANY_ATTEMPTS_TRY_LATER',\n  UNSUPPORTED_FIRST_FACTOR = 'UNSUPPORTED_FIRST_FACTOR',\n  UNSUPPORTED_TENANT_OPERATION = 'UNSUPPORTED_TENANT_OPERATION',\n  UNAUTHORIZED_DOMAIN = 'UNAUTHORIZED_DOMAIN',\n  UNVERIFIED_EMAIL = 'UNVERIFIED_EMAIL',\n  USER_CANCELLED = 'USER_CANCELLED',\n  USER_DISABLED = 'USER_DISABLED',\n  USER_NOT_FOUND = 'USER_NOT_FOUND',\n  WEAK_PASSWORD = 'WEAK_PASSWORD',\n  RECAPTCHA_NOT_ENABLED = 'RECAPTCHA_NOT_ENABLED',\n  MISSING_RECAPTCHA_TOKEN = 'MISSING_RECAPTCHA_TOKEN',\n  INVALID_RECAPTCHA_TOKEN = 'INVALID_RECAPTCHA_TOKEN',\n  INVALID_RECAPTCHA_ACTION = 'INVALID_RECAPTCHA_ACTION',\n  MISSING_CLIENT_TYPE = 'MISSING_CLIENT_TYPE',\n  MISSING_RECAPTCHA_VERSION = 'MISSING_RECAPTCHA_VERSION',\n  INVALID_RECAPTCHA_VERSION = 'INVALID_RECAPTCHA_VERSION',\n  INVALID_REQ_TYPE = 'INVALID_REQ_TYPE',\n  PASSWORD_DOES_NOT_MEET_REQUIREMENTS = 'PASSWORD_DOES_NOT_MEET_REQUIREMENTS'\n}\n\n/**\n * API Response in the event of an error\n */\nexport interface JsonError {\n  error: {\n    code: number;\n    message: string;\n    errors?: [\n      {\n        message: ServerError;\n        domain: string;\n        reason: string;\n      }\n    ];\n  };\n}\n\n/**\n * Type definition for a map from server errors to developer visible errors\n */\nexport declare type ServerErrorMap<ApiError extends string> = {\n  readonly [K in ApiError]: AuthErrorCode;\n};\n\n/**\n * Map from errors returned by the server to errors to developer visible errors\n */\nexport const SERVER_ERROR_MAP: Partial<ServerErrorMap<ServerError>> = {\n  // Custom token errors.\n  [ServerError.CREDENTIAL_MISMATCH]: AuthErrorCode.CREDENTIAL_MISMATCH,\n  // This can only happen if the SDK sends a bad request.\n  [ServerError.MISSING_CUSTOM_TOKEN]: AuthErrorCode.INTERNAL_ERROR,\n\n  // Create Auth URI errors.\n  [ServerError.INVALID_IDENTIFIER]: AuthErrorCode.INVALID_EMAIL,\n  // This can only happen if the SDK sends a bad request.\n  [ServerError.MISSING_CONTINUE_URI]: AuthErrorCode.INTERNAL_ERROR,\n\n  // Sign in with email and password errors (some apply to sign up too).\n  [ServerError.INVALID_PASSWORD]: AuthErrorCode.INVALID_PASSWORD,\n  // This can only happen if the SDK sends a bad request.\n  [ServerError.MISSING_PASSWORD]: AuthErrorCode.MISSING_PASSWORD,\n  // Thrown if Email Enumeration Protection is enabled in the project and the email or password is\n  // invalid.\n  [ServerError.INVALID_LOGIN_CREDENTIALS]: AuthErrorCode.INVALID_CREDENTIAL,\n\n  // Sign up with email and password errors.\n  [ServerError.EMAIL_EXISTS]: AuthErrorCode.EMAIL_EXISTS,\n  [ServerError.PASSWORD_LOGIN_DISABLED]: AuthErrorCode.OPERATION_NOT_ALLOWED,\n\n  // Verify assertion for sign in with credential errors:\n  [ServerError.INVALID_IDP_RESPONSE]: AuthErrorCode.INVALID_CREDENTIAL,\n  [ServerError.INVALID_PENDING_TOKEN]: AuthErrorCode.INVALID_CREDENTIAL,\n  [ServerError.FEDERATED_USER_ID_ALREADY_LINKED]:\n    AuthErrorCode.CREDENTIAL_ALREADY_IN_USE,\n\n  // This can only happen if the SDK sends a bad request.\n  [ServerError.MISSING_REQ_TYPE]: AuthErrorCode.INTERNAL_ERROR,\n\n  // Send Password reset email errors:\n  [ServerError.EMAIL_NOT_FOUND]: AuthErrorCode.USER_DELETED,\n  [ServerError.RESET_PASSWORD_EXCEED_LIMIT]:\n    AuthErrorCode.TOO_MANY_ATTEMPTS_TRY_LATER,\n\n  [ServerError.EXPIRED_OOB_CODE]: AuthErrorCode.EXPIRED_OOB_CODE,\n  [ServerError.INVALID_OOB_CODE]: AuthErrorCode.INVALID_OOB_CODE,\n  // This can only happen if the SDK sends a bad request.\n  [ServerError.MISSING_OOB_CODE]: AuthErrorCode.INTERNAL_ERROR,\n\n  // Operations that require ID token in request:\n  [ServerError.CREDENTIAL_TOO_OLD_LOGIN_AGAIN]:\n    AuthErrorCode.CREDENTIAL_TOO_OLD_LOGIN_AGAIN,\n  [ServerError.INVALID_ID_TOKEN]: AuthErrorCode.INVALID_AUTH,\n  [ServerError.TOKEN_EXPIRED]: AuthErrorCode.TOKEN_EXPIRED,\n  [ServerError.USER_NOT_FOUND]: AuthErrorCode.TOKEN_EXPIRED,\n\n  // Other errors.\n  [ServerError.TOO_MANY_ATTEMPTS_TRY_LATER]:\n    AuthErrorCode.TOO_MANY_ATTEMPTS_TRY_LATER,\n  [ServerError.PASSWORD_DOES_NOT_MEET_REQUIREMENTS]:\n    AuthErrorCode.PASSWORD_DOES_NOT_MEET_REQUIREMENTS,\n\n  // Phone Auth related errors.\n  [ServerError.INVALID_CODE]: AuthErrorCode.INVALID_CODE,\n  [ServerError.INVALID_SESSION_INFO]: AuthErrorCode.INVALID_SESSION_INFO,\n  [ServerError.INVALID_TEMPORARY_PROOF]: AuthErrorCode.INVALID_CREDENTIAL,\n  [ServerError.MISSING_SESSION_INFO]: AuthErrorCode.MISSING_SESSION_INFO,\n  [ServerError.SESSION_EXPIRED]: AuthErrorCode.CODE_EXPIRED,\n\n  // Other action code errors when additional settings passed.\n  // MISSING_CONTINUE_URI is getting mapped to INTERNAL_ERROR above.\n  // This is OK as this error will be caught by client side validation.\n  [ServerError.MISSING_ANDROID_PACKAGE_NAME]:\n    AuthErrorCode.MISSING_ANDROID_PACKAGE_NAME,\n  [ServerError.UNAUTHORIZED_DOMAIN]: AuthErrorCode.UNAUTHORIZED_DOMAIN,\n\n  // getProjectConfig errors when clientId is passed.\n  [ServerError.INVALID_OAUTH_CLIENT_ID]: AuthErrorCode.INVALID_OAUTH_CLIENT_ID,\n\n  // User actions (sign-up or deletion) disabled errors.\n  [ServerError.ADMIN_ONLY_OPERATION]: AuthErrorCode.ADMIN_ONLY_OPERATION,\n\n  // Multi factor related errors.\n  [ServerError.INVALID_MFA_PENDING_CREDENTIAL]:\n    AuthErrorCode.INVALID_MFA_SESSION,\n  [ServerError.MFA_ENROLLMENT_NOT_FOUND]: AuthErrorCode.MFA_INFO_NOT_FOUND,\n  [ServerError.MISSING_MFA_ENROLLMENT_ID]: AuthErrorCode.MISSING_MFA_INFO,\n  [ServerError.MISSING_MFA_PENDING_CREDENTIAL]:\n    AuthErrorCode.MISSING_MFA_SESSION,\n  [ServerError.SECOND_FACTOR_EXISTS]:\n    AuthErrorCode.SECOND_FACTOR_ALREADY_ENROLLED,\n  [ServerError.SECOND_FACTOR_LIMIT_EXCEEDED]:\n    AuthErrorCode.SECOND_FACTOR_LIMIT_EXCEEDED,\n\n  // Blocking functions related errors.\n  [ServerError.BLOCKING_FUNCTION_ERROR_RESPONSE]: AuthErrorCode.INTERNAL_ERROR,\n\n  // Recaptcha related errors.\n  [ServerError.RECAPTCHA_NOT_ENABLED]: AuthErrorCode.RECAPTCHA_NOT_ENABLED,\n  [ServerError.MISSING_RECAPTCHA_TOKEN]: AuthErrorCode.MISSING_RECAPTCHA_TOKEN,\n  [ServerError.INVALID_RECAPTCHA_TOKEN]: AuthErrorCode.INVALID_RECAPTCHA_TOKEN,\n  [ServerError.INVALID_RECAPTCHA_ACTION]:\n    AuthErrorCode.INVALID_RECAPTCHA_ACTION,\n  [ServerError.MISSING_CLIENT_TYPE]: AuthErrorCode.MISSING_CLIENT_TYPE,\n  [ServerError.MISSING_RECAPTCHA_VERSION]:\n    AuthErrorCode.MISSING_RECAPTCHA_VERSION,\n  [ServerError.INVALID_RECAPTCHA_VERSION]:\n    AuthErrorCode.INVALID_RECAPTCHA_VERSION,\n  [ServerError.INVALID_REQ_TYPE]: AuthErrorCode.INVALID_REQ_TYPE\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseError, querystring } from '@firebase/util';\n\nimport { AuthErrorCode, NamedErrorParams } from '../core/errors';\nimport {\n  _createError,\n  _errorWithCustomMessage,\n  _fail\n} from '../core/util/assert';\nimport { Delay } from '../core/util/delay';\nimport { _emulatorUrl } from '../core/util/emulator';\nimport { FetchProvider } from '../core/util/fetch_provider';\nimport { Auth } from '../model/public_types';\nimport { AuthInternal, ConfigInternal } from '../model/auth';\nimport { IdTokenResponse, TaggedWithTokenResponse } from '../model/id_token';\nimport { IdTokenMfaResponse } from './authentication/mfa';\nimport { SERVER_ERROR_MAP, ServerError, ServerErrorMap } from './errors';\n\nexport const enum HttpMethod {\n  POST = 'POST',\n  GET = 'GET'\n}\n\nexport const enum HttpHeader {\n  CONTENT_TYPE = 'Content-Type',\n  X_FIREBASE_LOCALE = 'X-Firebase-Locale',\n  X_CLIENT_VERSION = 'X-Client-Version',\n  X_FIREBASE_GMPID = 'X-Firebase-gmpid',\n  X_FIREBASE_CLIENT = 'X-Firebase-Client',\n  X_FIREBASE_APP_CHECK = 'X-Firebase-AppCheck'\n}\n\nexport const enum Endpoint {\n  CREATE_AUTH_URI = '/v1/accounts:createAuthUri',\n  DELETE_ACCOUNT = '/v1/accounts:delete',\n  RESET_PASSWORD = '/v1/accounts:resetPassword',\n  SIGN_UP = '/v1/accounts:signUp',\n  SIGN_IN_WITH_CUSTOM_TOKEN = '/v1/accounts:signInWithCustomToken',\n  SIGN_IN_WITH_EMAIL_LINK = '/v1/accounts:signInWithEmailLink',\n  SIGN_IN_WITH_IDP = '/v1/accounts:signInWithIdp',\n  SIGN_IN_WITH_PASSWORD = '/v1/accounts:signInWithPassword',\n  SIGN_IN_WITH_PHONE_NUMBER = '/v1/accounts:signInWithPhoneNumber',\n  SEND_VERIFICATION_CODE = '/v1/accounts:sendVerificationCode',\n  SEND_OOB_CODE = '/v1/accounts:sendOobCode',\n  SET_ACCOUNT_INFO = '/v1/accounts:update',\n  GET_ACCOUNT_INFO = '/v1/accounts:lookup',\n  GET_RECAPTCHA_PARAM = '/v1/recaptchaParams',\n  START_MFA_ENROLLMENT = '/v2/accounts/mfaEnrollment:start',\n  FINALIZE_MFA_ENROLLMENT = '/v2/accounts/mfaEnrollment:finalize',\n  START_MFA_SIGN_IN = '/v2/accounts/mfaSignIn:start',\n  FINALIZE_MFA_SIGN_IN = '/v2/accounts/mfaSignIn:finalize',\n  WITHDRAW_MFA = '/v2/accounts/mfaEnrollment:withdraw',\n  GET_PROJECT_CONFIG = '/v1/projects',\n  GET_RECAPTCHA_CONFIG = '/v2/recaptchaConfig',\n  GET_PASSWORD_POLICY = '/v2/passwordPolicy',\n  TOKEN = '/v1/token',\n  REVOKE_TOKEN = '/v2/accounts:revokeToken'\n}\n\nexport const enum RecaptchaClientType {\n  WEB = 'CLIENT_TYPE_WEB',\n  ANDROID = 'CLIENT_TYPE_ANDROID',\n  IOS = 'CLIENT_TYPE_IOS'\n}\n\nexport const enum RecaptchaVersion {\n  ENTERPRISE = 'RECAPTCHA_ENTERPRISE'\n}\n\nexport const enum RecaptchaActionName {\n  SIGN_IN_WITH_PASSWORD = 'signInWithPassword',\n  GET_OOB_CODE = 'getOobCode',\n  SIGN_UP_PASSWORD = 'signUpPassword'\n}\n\nexport const enum EnforcementState {\n  ENFORCE = 'ENFORCE',\n  AUDIT = 'AUDIT',\n  OFF = 'OFF',\n  ENFORCEMENT_STATE_UNSPECIFIED = 'ENFORCEMENT_STATE_UNSPECIFIED'\n}\n\n// Providers that have reCAPTCHA Enterprise support.\nexport const enum RecaptchaProvider {\n  EMAIL_PASSWORD_PROVIDER = 'EMAIL_PASSWORD_PROVIDER'\n}\n\nexport const DEFAULT_API_TIMEOUT_MS = new Delay(30_000, 60_000);\n\nexport function _addTidIfNecessary<T extends { tenantId?: string }>(\n  auth: Auth,\n  request: T\n): T {\n  if (auth.tenantId && !request.tenantId) {\n    return {\n      ...request,\n      tenantId: auth.tenantId\n    };\n  }\n  return request;\n}\n\nexport async function _performApiRequest<T, V>(\n  auth: Auth,\n  method: HttpMethod,\n  path: Endpoint,\n  request?: T,\n  customErrorMap: Partial<ServerErrorMap<ServerError>> = {}\n): Promise<V> {\n  return _performFetchWithErrorHandling(auth, customErrorMap, async () => {\n    let body = {};\n    let params = {};\n    if (request) {\n      if (method === HttpMethod.GET) {\n        params = request;\n      } else {\n        body = {\n          body: JSON.stringify(request)\n        };\n      }\n    }\n\n    const query = querystring({\n      key: auth.config.apiKey,\n      ...params\n    }).slice(1);\n\n    const headers = await (auth as AuthInternal)._getAdditionalHeaders();\n    headers[HttpHeader.CONTENT_TYPE] = 'application/json';\n\n    if (auth.languageCode) {\n      headers[HttpHeader.X_FIREBASE_LOCALE] = auth.languageCode;\n    }\n\n    return FetchProvider.fetch()(\n      _getFinalTarget(auth, auth.config.apiHost, path, query),\n      {\n        method,\n        headers,\n        referrerPolicy: 'no-referrer',\n        ...body\n      }\n    );\n  });\n}\n\nexport async function _performFetchWithErrorHandling<V>(\n  auth: Auth,\n  customErrorMap: Partial<ServerErrorMap<ServerError>>,\n  fetchFn: () => Promise<Response>\n): Promise<V> {\n  (auth as AuthInternal)._canInitEmulator = false;\n  const errorMap = { ...SERVER_ERROR_MAP, ...customErrorMap };\n  try {\n    const networkTimeout = new NetworkTimeout<Response>(auth);\n    const response: Response = await Promise.race<Promise<Response>>([\n      fetchFn(),\n      networkTimeout.promise\n    ]);\n\n    // If we've reached this point, the fetch succeeded and the networkTimeout\n    // didn't throw; clear the network timeout delay so that Node won't hang\n    networkTimeout.clearNetworkTimeout();\n\n    const json = await response.json();\n    if ('needConfirmation' in json) {\n      throw _makeTaggedError(auth, AuthErrorCode.NEED_CONFIRMATION, json);\n    }\n\n    if (response.ok && !('errorMessage' in json)) {\n      return json;\n    } else {\n      const errorMessage = response.ok ? json.errorMessage : json.error.message;\n      const [serverErrorCode, serverErrorMessage] = errorMessage.split(' : ');\n      if (serverErrorCode === ServerError.FEDERATED_USER_ID_ALREADY_LINKED) {\n        throw _makeTaggedError(\n          auth,\n          AuthErrorCode.CREDENTIAL_ALREADY_IN_USE,\n          json\n        );\n      } else if (serverErrorCode === ServerError.EMAIL_EXISTS) {\n        throw _makeTaggedError(auth, AuthErrorCode.EMAIL_EXISTS, json);\n      } else if (serverErrorCode === ServerError.USER_DISABLED) {\n        throw _makeTaggedError(auth, AuthErrorCode.USER_DISABLED, json);\n      }\n      const authError =\n        errorMap[serverErrorCode as ServerError] ||\n        (serverErrorCode\n          .toLowerCase()\n          .replace(/[_\\s]+/g, '-') as unknown as AuthErrorCode);\n      if (serverErrorMessage) {\n        throw _errorWithCustomMessage(auth, authError, serverErrorMessage);\n      } else {\n        _fail(auth, authError);\n      }\n    }\n  } catch (e) {\n    if (e instanceof FirebaseError) {\n      throw e;\n    }\n    // Changing this to a different error code will log user out when there is a network error\n    // because we treat any error other than NETWORK_REQUEST_FAILED as token is invalid.\n    // https://github.com/firebase/firebase-js-sdk/blob/4fbc73610d70be4e0852e7de63a39cb7897e8546/packages/auth/src/core/auth/auth_impl.ts#L309-L316\n    _fail(auth, AuthErrorCode.NETWORK_REQUEST_FAILED, { 'message': String(e) });\n  }\n}\n\nexport async function _performSignInRequest<T, V extends IdTokenResponse>(\n  auth: Auth,\n  method: HttpMethod,\n  path: Endpoint,\n  request?: T,\n  customErrorMap: Partial<ServerErrorMap<ServerError>> = {}\n): Promise<V> {\n  const serverResponse = (await _performApiRequest<T, V | IdTokenMfaResponse>(\n    auth,\n    method,\n    path,\n    request,\n    customErrorMap\n  )) as V;\n  if ('mfaPendingCredential' in serverResponse) {\n    _fail(auth, AuthErrorCode.MFA_REQUIRED, {\n      _serverResponse: serverResponse\n    });\n  }\n\n  return serverResponse;\n}\n\nexport function _getFinalTarget(\n  auth: Auth,\n  host: string,\n  path: string,\n  query: string\n): string {\n  const base = `${host}${path}?${query}`;\n\n  if (!(auth as AuthInternal).config.emulator) {\n    return `${auth.config.apiScheme}://${base}`;\n  }\n\n  return _emulatorUrl(auth.config as ConfigInternal, base);\n}\n\nexport function _parseEnforcementState(\n  enforcementStateStr: string\n): EnforcementState {\n  switch (enforcementStateStr) {\n    case 'ENFORCE':\n      return EnforcementState.ENFORCE;\n    case 'AUDIT':\n      return EnforcementState.AUDIT;\n    case 'OFF':\n      return EnforcementState.OFF;\n    default:\n      return EnforcementState.ENFORCEMENT_STATE_UNSPECIFIED;\n  }\n}\n\nclass NetworkTimeout<T> {\n  // Node timers and browser timers are fundamentally incompatible, but we\n  // don't care about the value here\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private timer: any | null = null;\n  readonly promise = new Promise<T>((_, reject) => {\n    this.timer = setTimeout(() => {\n      return reject(\n        _createError(this.auth, AuthErrorCode.NETWORK_REQUEST_FAILED)\n      );\n    }, DEFAULT_API_TIMEOUT_MS.get());\n  });\n\n  clearNetworkTimeout(): void {\n    clearTimeout(this.timer);\n  }\n\n  constructor(private readonly auth: Auth) {}\n}\n\ninterface PotentialResponse extends IdTokenResponse {\n  email?: string;\n  phoneNumber?: string;\n}\n\nexport function _makeTaggedError(\n  auth: Auth,\n  code: AuthErrorCode,\n  response: PotentialResponse\n): FirebaseError {\n  const errorParams: NamedErrorParams = {\n    appName: auth.name\n  };\n\n  if (response.email) {\n    errorParams.email = response.email;\n  }\n  if (response.phoneNumber) {\n    errorParams.phoneNumber = response.phoneNumber;\n  }\n\n  const error = _createError(auth, code, errorParams);\n\n  // We know customData is defined on error because errorParams is defined\n  (error.customData! as TaggedWithTokenResponse)._tokenResponse = response;\n  return error;\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { RecaptchaParameters } from '../../model/public_types';\nimport {\n  GetRecaptchaConfigResponse,\n  RecaptchaEnforcementProviderState\n} from '../../api/authentication/recaptcha';\nimport { EnforcementState, _parseEnforcementState } from '../../api/index';\n\n// reCAPTCHA v2 interface\nexport interface Recaptcha {\n  render: (container: HTMLElement, parameters: RecaptchaParameters) => number;\n  getResponse: (id: number) => string;\n  execute: (id: number) => unknown;\n  reset: (id: number) => unknown;\n}\n\nexport function isV2(\n  grecaptcha: Recaptcha | GreCAPTCHA | undefined\n): grecaptcha is Recaptcha {\n  return (\n    grecaptcha !== undefined &&\n    (grecaptcha as Recaptcha).getResponse !== undefined\n  );\n}\n\n// reCAPTCHA Enterprise & v3 shared interface\nexport interface GreCAPTCHATopLevel extends GreCAPTCHA {\n  enterprise: GreCAPTCHA;\n}\n\n// reCAPTCHA Enterprise interface\nexport interface GreCAPTCHA {\n  ready: (callback: () => void) => void;\n  execute: (siteKey: string, options: { action: string }) => Promise<string>;\n  render: (\n    container: string | HTMLElement,\n    parameters: GreCAPTCHARenderOption\n  ) => string;\n}\n\nexport interface GreCAPTCHARenderOption {\n  sitekey: string;\n  size: 'invisible';\n}\n\nexport function isEnterprise(\n  grecaptcha: Recaptcha | GreCAPTCHA | undefined\n): grecaptcha is GreCAPTCHATopLevel {\n  return (\n    grecaptcha !== undefined &&\n    (grecaptcha as GreCAPTCHATopLevel).enterprise !== undefined\n  );\n}\n\n// TODO(chuanr): Replace this with the AuthWindow after resolving the dependency issue in Node.js env.\ndeclare global {\n  interface Window {\n    grecaptcha?: Recaptcha | GreCAPTCHATopLevel;\n  }\n}\n\nexport class RecaptchaConfig {\n  /**\n   * The reCAPTCHA site key.\n   */\n  siteKey: string = '';\n\n  /**\n   * The list of providers and their enablement status for reCAPTCHA Enterprise.\n   */\n  recaptchaEnforcementState: RecaptchaEnforcementProviderState[] = [];\n\n  constructor(response: GetRecaptchaConfigResponse) {\n    if (response.recaptchaKey === undefined) {\n      throw new Error('recaptchaKey undefined');\n    }\n    // Example response.recaptchaKey: \"projects/proj123/keys/sitekey123\"\n    this.siteKey = response.recaptchaKey.split('/')[3];\n    this.recaptchaEnforcementState = response.recaptchaEnforcementState;\n  }\n\n  /**\n   * Returns the reCAPTCHA Enterprise enforcement state for the given provider.\n   *\n   * @param providerStr - The provider whose enforcement state is to be returned.\n   * @returns The reCAPTCHA Enterprise enforcement state for the given provider.\n   */\n  getProviderEnforcementState(providerStr: string): EnforcementState | null {\n    if (\n      !this.recaptchaEnforcementState ||\n      this.recaptchaEnforcementState.length === 0\n    ) {\n      return null;\n    }\n\n    for (const recaptchaEnforcementState of this.recaptchaEnforcementState) {\n      if (\n        recaptchaEnforcementState.provider &&\n        recaptchaEnforcementState.provider === providerStr\n      ) {\n        return _parseEnforcementState(\n          recaptchaEnforcementState.enforcementState\n        );\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Returns true if the reCAPTCHA Enterprise enforcement state for the provider is set to ENFORCE or AUDIT.\n   *\n   * @param providerStr - The provider whose enablement state is to be returned.\n   * @returns Whether or not reCAPTCHA Enterprise protection is enabled for the given provider.\n   */\n  isProviderEnabled(providerStr: string): boolean {\n    return (\n      this.getProviderEnforcementState(providerStr) ===\n        EnforcementState.ENFORCE ||\n      this.getProviderEnforcementState(providerStr) === EnforcementState.AUDIT\n    );\n  }\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Endpoint,\n  HttpMethod,\n  RecaptchaClientType,\n  RecaptchaVersion,\n  _performApiRequest,\n  _addTidIfNecessary\n} from '../index';\nimport { Auth } from '../../model/public_types';\n\ninterface GetRecaptchaParamResponse {\n  recaptchaSiteKey?: string;\n}\n\nexport async function getRecaptchaParams(auth: Auth): Promise<string> {\n  return (\n    (\n      await _performApiRequest<void, GetRecaptchaParamResponse>(\n        auth,\n        HttpMethod.GET,\n        Endpoint.GET_RECAPTCHA_PARAM\n      )\n    ).recaptchaSiteKey || ''\n  );\n}\n\n// The following functions are for reCAPTCHA enterprise integration.\ninterface GetRecaptchaConfigRequest {\n  tenantId?: string;\n  clientType?: RecaptchaClientType;\n  version?: RecaptchaVersion;\n}\n\nexport interface RecaptchaEnforcementProviderState {\n  provider: string;\n  enforcementState: string;\n}\n\nexport interface GetRecaptchaConfigResponse {\n  recaptchaKey: string;\n  recaptchaEnforcementState: RecaptchaEnforcementProviderState[];\n}\n\nexport async function getRecaptchaConfig(\n  auth: Auth,\n  request: GetRecaptchaConfigRequest\n): Promise<GetRecaptchaConfigResponse> {\n  return _performApiRequest<\n    GetRecaptchaConfigRequest,\n    GetRecaptchaConfigResponse\n  >(\n    auth,\n    HttpMethod.GET,\n    Endpoint.GET_RECAPTCHA_CONFIG,\n    _addTidIfNecessary(auth, request)\n  );\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Endpoint, HttpMethod, _performApiRequest } from '../index';\nimport { MfaEnrollment } from './mfa';\nimport { Auth } from '../../model/public_types';\n\nexport interface DeleteAccountRequest {\n  idToken: string;\n}\n\nexport async function deleteAccount(\n  auth: Auth,\n  request: DeleteAccountRequest\n): Promise<void> {\n  return _performApiRequest<DeleteAccountRequest, void>(\n    auth,\n    HttpMethod.POST,\n    Endpoint.DELETE_ACCOUNT,\n    request\n  );\n}\n\nexport interface ProviderUserInfo {\n  providerId: string;\n  rawId?: string;\n  email?: string;\n  displayName?: string;\n  photoUrl?: string;\n  phoneNumber?: string;\n}\n\nexport interface DeleteLinkedAccountsRequest {\n  idToken: string;\n  deleteProvider: string[];\n}\n\nexport interface DeleteLinkedAccountsResponse {\n  providerUserInfo: ProviderUserInfo[];\n}\n\nexport async function deleteLinkedAccounts(\n  auth: Auth,\n  request: DeleteLinkedAccountsRequest\n): Promise<DeleteLinkedAccountsResponse> {\n  return _performApiRequest<\n    DeleteLinkedAccountsRequest,\n    DeleteLinkedAccountsResponse\n  >(auth, HttpMethod.POST, Endpoint.SET_ACCOUNT_INFO, request);\n}\n\nexport interface APIUserInfo {\n  localId?: string;\n  displayName?: string;\n  photoUrl?: string;\n  email?: string;\n  emailVerified?: boolean;\n  phoneNumber?: string;\n  lastLoginAt?: number;\n  createdAt?: number;\n  tenantId?: string;\n  passwordHash?: string;\n  providerUserInfo?: ProviderUserInfo[];\n  mfaInfo?: MfaEnrollment[];\n}\n\nexport interface GetAccountInfoRequest {\n  idToken: string;\n}\n\nexport interface GetAccountInfoResponse {\n  users: APIUserInfo[];\n}\n\nexport async function getAccountInfo(\n  auth: Auth,\n  request: GetAccountInfoRequest\n): Promise<GetAccountInfoResponse> {\n  return _performApiRequest<GetAccountInfoRequest, GetAccountInfoResponse>(\n    auth,\n    HttpMethod.POST,\n    Endpoint.GET_ACCOUNT_INFO,\n    request\n  );\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport function utcTimestampToDateString(\n  utcTimestamp?: string | number\n): string | undefined {\n  if (!utcTimestamp) {\n    return undefined;\n  }\n  try {\n    // Convert to date object.\n    const date = new Date(Number(utcTimestamp));\n    // Test date is valid.\n    if (!isNaN(date.getTime())) {\n      // Convert to UTC date string.\n      return date.toUTCString();\n    }\n  } catch (e) {\n    // Do nothing. undefined will be returned.\n  }\n  return undefined;\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { IdTokenResult, ParsedToken, User } from '../../model/public_types';\nimport { base64Decode, getModularInstance } from '@firebase/util';\n\nimport { UserInternal } from '../../model/user';\nimport { _assert } from '../util/assert';\nimport { _logError } from '../util/log';\nimport { utcTimestampToDateString } from '../util/time';\nimport { AuthErrorCode } from '../errors';\n\n/**\n * Returns a JSON Web Token (JWT) used to identify the user to a Firebase service.\n *\n * @remarks\n * Returns the current token if it has not expired or if it will not expire in the next five\n * minutes. Otherwise, this will refresh the token and return a new one.\n *\n * @param user - The user.\n * @param forceRefresh - Force refresh regardless of token expiration.\n *\n * @public\n */\nexport function getIdToken(user: User, forceRefresh = false): Promise<string> {\n  return getModularInstance(user).getIdToken(forceRefresh);\n}\n\n/**\n * Returns a deserialized JSON Web Token (JWT) used to identify the user to a Firebase service.\n *\n * @remarks\n * Returns the current token if it has not expired or if it will not expire in the next five\n * minutes. Otherwise, this will refresh the token and return a new one.\n *\n * @param user - The user.\n * @param forceRefresh - Force refresh regardless of token expiration.\n *\n * @public\n */\nexport async function getIdTokenResult(\n  user: User,\n  forceRefresh = false\n): Promise<IdTokenResult> {\n  const userInternal = getModularInstance(user) as UserInternal;\n  const token = await userInternal.getIdToken(forceRefresh);\n  const claims = _parseToken(token);\n\n  _assert(\n    claims && claims.exp && claims.auth_time && claims.iat,\n    userInternal.auth,\n    AuthErrorCode.INTERNAL_ERROR\n  );\n  const firebase =\n    typeof claims.firebase === 'object' ? claims.firebase : undefined;\n\n  const signInProvider: string | undefined = firebase?.['sign_in_provider'];\n\n  return {\n    claims,\n    token,\n    authTime: utcTimestampToDateString(\n      secondsStringToMilliseconds(claims.auth_time)\n    )!,\n    issuedAtTime: utcTimestampToDateString(\n      secondsStringToMilliseconds(claims.iat)\n    )!,\n    expirationTime: utcTimestampToDateString(\n      secondsStringToMilliseconds(claims.exp)\n    )!,\n    signInProvider: signInProvider || null,\n    signInSecondFactor: firebase?.['sign_in_second_factor'] || null\n  };\n}\n\nfunction secondsStringToMilliseconds(seconds: string): number {\n  return Number(seconds) * 1000;\n}\n\nexport function _parseToken(token: string): ParsedToken | null {\n  const [algorithm, payload, signature] = token.split('.');\n  if (\n    algorithm === undefined ||\n    payload === undefined ||\n    signature === undefined\n  ) {\n    _logError('JWT malformed, contained fewer than 3 sections');\n    return null;\n  }\n\n  try {\n    const decoded = base64Decode(payload);\n    if (!decoded) {\n      _logError('Failed to decode base64 JWT payload');\n      return null;\n    }\n    return JSON.parse(decoded);\n  } catch (e) {\n    _logError(\n      'Caught error parsing JWT payload as JSON',\n      (e as Error)?.toString()\n    );\n    return null;\n  }\n}\n\n/**\n * Extract expiresIn TTL from a token by subtracting the expiration from the issuance.\n */\nexport function _tokenExpiresIn(token: string): number {\n  const parsedToken = _parseToken(token);\n  _assert(parsedToken, AuthErrorCode.INTERNAL_ERROR);\n  _assert(typeof parsedToken.exp !== 'undefined', AuthErrorCode.INTERNAL_ERROR);\n  _assert(typeof parsedToken.iat !== 'undefined', AuthErrorCode.INTERNAL_ERROR);\n  return Number(parsedToken.exp) - Number(parsedToken.iat);\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseError } from '@firebase/util';\n\nimport { UserInternal } from '../../model/user';\nimport { AuthErrorCode } from '../errors';\n\nexport async function _logoutIfInvalidated<T>(\n  user: UserInternal,\n  promise: Promise<T>,\n  bypassAuthState = false\n): Promise<T> {\n  if (bypassAuthState) {\n    return promise;\n  }\n  try {\n    return await promise;\n  } catch (e) {\n    if (e instanceof FirebaseError && isUserInvalidated(e)) {\n      if (user.auth.currentUser === user) {\n        await user.auth.signOut();\n      }\n    }\n\n    throw e;\n  }\n}\n\nfunction isUserInvalidated({ code }: FirebaseError): boolean {\n  return (\n    code === `auth/${AuthErrorCode.USER_DISABLED}` ||\n    code === `auth/${AuthErrorCode.TOKEN_EXPIRED}`\n  );\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseError } from '@firebase/util';\nimport { UserInternal } from '../../model/user';\nimport { AuthErrorCode } from '../errors';\n\n// Refresh the token five minutes before expiration\nexport const enum Duration {\n  OFFSET = 5 * 1000 * 60,\n  RETRY_BACKOFF_MIN = 30 * 1000,\n  RETRY_BACKOFF_MAX = 16 * 60 * 1000\n}\n\nexport class ProactiveRefresh {\n  private isRunning = false;\n\n  // Node timers and browser timers return fundamentally different types.\n  // We don't actually care what the value is but TS won't accept unknown and\n  // we can't cast properly in both environments.\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private timerId: any | null = null;\n  private errorBackoff = Duration.RETRY_BACKOFF_MIN;\n\n  constructor(private readonly user: UserInternal) {}\n\n  _start(): void {\n    if (this.isRunning) {\n      return;\n    }\n\n    this.isRunning = true;\n    this.schedule();\n  }\n\n  _stop(): void {\n    if (!this.isRunning) {\n      return;\n    }\n\n    this.isRunning = false;\n    if (this.timerId !== null) {\n      clearTimeout(this.timerId);\n    }\n  }\n\n  private getInterval(wasError: boolean): number {\n    if (wasError) {\n      const interval = this.errorBackoff;\n      this.errorBackoff = Math.min(\n        this.errorBackoff * 2,\n        Duration.RETRY_BACKOFF_MAX\n      );\n      return interval;\n    } else {\n      // Reset the error backoff\n      this.errorBackoff = Duration.RETRY_BACKOFF_MIN;\n      const expTime = this.user.stsTokenManager.expirationTime ?? 0;\n      const interval = expTime - Date.now() - Duration.OFFSET;\n\n      return Math.max(0, interval);\n    }\n  }\n\n  private schedule(wasError = false): void {\n    if (!this.isRunning) {\n      // Just in case...\n      return;\n    }\n\n    const interval = this.getInterval(wasError);\n    this.timerId = setTimeout(async () => {\n      await this.iteration();\n    }, interval);\n  }\n\n  private async iteration(): Promise<void> {\n    try {\n      await this.user.getIdToken(true);\n    } catch (e) {\n      // Only retry on network errors\n      if (\n        (e as FirebaseError)?.code ===\n        `auth/${AuthErrorCode.NETWORK_REQUEST_FAILED}`\n      ) {\n        this.schedule(/* wasError */ true);\n      }\n\n      return;\n    }\n    this.schedule();\n  }\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { UserMetadata as UserMetadataType } from '../../model/public_types';\n\nimport { utcTimestampToDateString } from '../util/time';\n\nexport class UserMetadata implements UserMetadataType {\n  creationTime?: string;\n  lastSignInTime?: string;\n\n  constructor(\n    private createdAt?: string | number,\n    private lastLoginAt?: string | number\n  ) {\n    this._initializeTime();\n  }\n\n  private _initializeTime(): void {\n    this.lastSignInTime = utcTimestampToDateString(this.lastLoginAt);\n    this.creationTime = utcTimestampToDateString(this.createdAt);\n  }\n\n  _copy(metadata: UserMetadata): void {\n    this.createdAt = metadata.createdAt;\n    this.lastLoginAt = metadata.lastLoginAt;\n    this._initializeTime();\n  }\n\n  toJSON(): object {\n    return {\n      createdAt: this.createdAt,\n      lastLoginAt: this.lastLoginAt\n    };\n  }\n}\n", "/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { User, UserInfo } from '../../model/public_types';\n\nimport {\n  getAccountInfo,\n  ProviderUserInfo\n} from '../../api/account_management/account';\nimport { UserInternal } from '../../model/user';\nimport { AuthErrorCode } from '../errors';\nimport { _assert } from '../util/assert';\nimport { _logoutIfInvalidated } from './invalidation';\nimport { UserMetadata } from './user_metadata';\nimport { getModularInstance } from '@firebase/util';\n\nexport async function _reloadWithoutSaving(user: UserInternal): Promise<void> {\n  const auth = user.auth;\n  const idToken = await user.getIdToken();\n  const response = await _logoutIfInvalidated(\n    user,\n    getAccountInfo(auth, { idToken })\n  );\n\n  _assert(response?.users.length, auth, AuthErrorCode.INTERNAL_ERROR);\n\n  const coreAccount = response.users[0];\n\n  user._notifyReloadListener(coreAccount);\n\n  const newProviderData = coreAccount.providerUserInfo?.length\n    ? extractProviderData(coreAccount.providerUserInfo)\n    : [];\n\n  const providerData = mergeProviderData(user.providerData, newProviderData);\n\n  // Preserves the non-nonymous status of the stored user, even if no more\n  // credentials (federated or email/password) are linked to the user. If\n  // the user was previously anonymous, then use provider data to update.\n  // On the other hand, if it was not anonymous before, it should never be\n  // considered anonymous now.\n  const oldIsAnonymous = user.isAnonymous;\n  const newIsAnonymous =\n    !(user.email && coreAccount.passwordHash) && !providerData?.length;\n  const isAnonymous = !oldIsAnonymous ? false : newIsAnonymous;\n\n  const updates: Partial<UserInternal> = {\n    uid: coreAccount.localId,\n    displayName: coreAccount.displayName || null,\n    photoURL: coreAccount.photoUrl || null,\n    email: coreAccount.email || null,\n    emailVerified: coreAccount.emailVerified || false,\n    phoneNumber: coreAccount.phoneNumber || null,\n    tenantId: coreAccount.tenantId || null,\n    providerData,\n    metadata: new UserMetadata(coreAccount.createdAt, coreAccount.lastLoginAt),\n    isAnonymous\n  };\n\n  Object.assign(user, updates);\n}\n\n/**\n * Reloads user account data, if signed in.\n *\n * @param user - The user.\n *\n * @public\n */\nexport async function reload(user: User): Promise<void> {\n  const userInternal: UserInternal = getModularInstance(user) as UserInternal;\n  await _reloadWithoutSaving(userInternal);\n\n  // Even though the current user hasn't changed, update\n  // current user will trigger a persistence update w/ the\n  // new info.\n  await userInternal.auth._persistUserIfCurrent(userInternal);\n  userInternal.auth._notifyListenersIfCurrent(userInternal);\n}\n\nfunction mergeProviderData(\n  original: UserInfo[],\n  newData: UserInfo[]\n): UserInfo[] {\n  const deduped = original.filter(\n    o => !newData.some(n => n.providerId === o.providerId)\n  );\n  return [...deduped, ...newData];\n}\n\nfunction extractProviderData(providers: ProviderUserInfo[]): UserInfo[] {\n  return providers.map(({ providerId, ...provider }) => {\n    return {\n      providerId,\n      uid: provider.rawId || '',\n      displayName: provider.displayName || null,\n      email: provider.email || null,\n      phoneNumber: provider.phoneNumber || null,\n      photoURL: provider.photoUrl || null\n    };\n  });\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* eslint-disable camelcase */\n\nimport { querystring } from '@firebase/util';\n\nimport {\n  _getFinalTarget,\n  _performFetchWithErrorHandling,\n  _performApiRequest,\n  _addTidIfNecessary,\n  HttpMethod,\n  HttpHeader,\n  Endpoint\n} from '../index';\nimport { FetchProvider } from '../../core/util/fetch_provider';\nimport { Auth } from '../../model/public_types';\nimport { AuthInternal } from '../../model/auth';\n\nexport const enum TokenType {\n  REFRESH_TOKEN = 'REFRESH_TOKEN',\n  ACCESS_TOKEN = 'ACCESS_TOKEN'\n}\n\n/** The server responses with snake_case; we convert to camelCase */\ninterface RequestStsTokenServerResponse {\n  access_token: string;\n  expires_in: string;\n  refresh_token: string;\n}\n\nexport interface RequestStsTokenResponse {\n  accessToken: string;\n  expiresIn: string;\n  refreshToken: string;\n}\n\nexport interface RevokeTokenRequest {\n  providerId: string;\n  tokenType: TokenType;\n  token: string;\n  idToken: string;\n  tenantId?: string;\n}\n\nexport interface RevokeTokenResponse {}\n\nexport async function requestStsToken(\n  auth: Auth,\n  refreshToken: string\n): Promise<RequestStsTokenResponse> {\n  const response =\n    await _performFetchWithErrorHandling<RequestStsTokenServerResponse>(\n      auth,\n      {},\n      async () => {\n        const body = querystring({\n          'grant_type': 'refresh_token',\n          'refresh_token': refreshToken\n        }).slice(1);\n        const { tokenApiHost, apiKey } = auth.config;\n        const url = _getFinalTarget(\n          auth,\n          tokenApiHost,\n          Endpoint.TOKEN,\n          `key=${apiKey}`\n        );\n\n        const headers = await (auth as AuthInternal)._getAdditionalHeaders();\n        headers[HttpHeader.CONTENT_TYPE] = 'application/x-www-form-urlencoded';\n\n        return FetchProvider.fetch()(url, {\n          method: HttpMethod.POST,\n          headers,\n          body\n        });\n      }\n    );\n\n  // The response comes back in snake_case. Convert to camel:\n  return {\n    accessToken: response.access_token,\n    expiresIn: response.expires_in,\n    refreshToken: response.refresh_token\n  };\n}\n\nexport async function revokeToken(\n  auth: Auth,\n  request: RevokeTokenRequest\n): Promise<RevokeTokenResponse> {\n  return _performApiRequest<RevokeTokenRequest, RevokeTokenResponse>(\n    auth,\n    HttpMethod.POST,\n    Endpoint.REVOKE_TOKEN,\n    _addTidIfNecessary(auth, request)\n  );\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FinalizeMfaResponse } from '../../api/authentication/mfa';\nimport { requestStsToken } from '../../api/authentication/token';\nimport { AuthInternal } from '../../model/auth';\nimport { IdTokenResponse } from '../../model/id_token';\nimport { AuthErrorCode } from '../errors';\nimport { PersistedBlob } from '../persistence';\nimport { _assert, debugFail } from '../util/assert';\nimport { _tokenExpiresIn } from './id_token_result';\n\n/**\n * The number of milliseconds before the official expiration time of a token\n * to refresh that token, to provide a buffer for RPCs to complete.\n */\nexport const enum Buffer {\n  TOKEN_REFRESH = 30_000\n}\n\n/**\n * We need to mark this class as internal explicitly to exclude it in the public typings, because\n * it references AuthInternal which has a circular dependency with UserInternal.\n *\n * @internal\n */\nexport class StsTokenManager {\n  refreshToken: string | null = null;\n  accessToken: string | null = null;\n  expirationTime: number | null = null;\n\n  get isExpired(): boolean {\n    return (\n      !this.expirationTime ||\n      Date.now() > this.expirationTime - Buffer.TOKEN_REFRESH\n    );\n  }\n\n  updateFromServerResponse(\n    response: IdTokenResponse | FinalizeMfaResponse\n  ): void {\n    _assert(response.idToken, AuthErrorCode.INTERNAL_ERROR);\n    _assert(\n      typeof response.idToken !== 'undefined',\n      AuthErrorCode.INTERNAL_ERROR\n    );\n    _assert(\n      typeof response.refreshToken !== 'undefined',\n      AuthErrorCode.INTERNAL_ERROR\n    );\n    const expiresIn =\n      'expiresIn' in response && typeof response.expiresIn !== 'undefined'\n        ? Number(response.expiresIn)\n        : _tokenExpiresIn(response.idToken);\n    this.updateTokensAndExpiration(\n      response.idToken,\n      response.refreshToken,\n      expiresIn\n    );\n  }\n\n  async getToken(\n    auth: AuthInternal,\n    forceRefresh = false\n  ): Promise<string | null> {\n    _assert(\n      !this.accessToken || this.refreshToken,\n      auth,\n      AuthErrorCode.TOKEN_EXPIRED\n    );\n\n    if (!forceRefresh && this.accessToken && !this.isExpired) {\n      return this.accessToken;\n    }\n\n    if (this.refreshToken) {\n      await this.refresh(auth, this.refreshToken!);\n      return this.accessToken;\n    }\n\n    return null;\n  }\n\n  clearRefreshToken(): void {\n    this.refreshToken = null;\n  }\n\n  private async refresh(auth: AuthInternal, oldToken: string): Promise<void> {\n    const { accessToken, refreshToken, expiresIn } = await requestStsToken(\n      auth,\n      oldToken\n    );\n    this.updateTokensAndExpiration(\n      accessToken,\n      refreshToken,\n      Number(expiresIn)\n    );\n  }\n\n  private updateTokensAndExpiration(\n    accessToken: string,\n    refreshToken: string,\n    expiresInSec: number\n  ): void {\n    this.refreshToken = refreshToken || null;\n    this.accessToken = accessToken || null;\n    this.expirationTime = Date.now() + expiresInSec * 1000;\n  }\n\n  static fromJSON(appName: string, object: PersistedBlob): StsTokenManager {\n    const { refreshToken, accessToken, expirationTime } = object;\n\n    const manager = new StsTokenManager();\n    if (refreshToken) {\n      _assert(typeof refreshToken === 'string', AuthErrorCode.INTERNAL_ERROR, {\n        appName\n      });\n      manager.refreshToken = refreshToken;\n    }\n    if (accessToken) {\n      _assert(typeof accessToken === 'string', AuthErrorCode.INTERNAL_ERROR, {\n        appName\n      });\n      manager.accessToken = accessToken;\n    }\n    if (expirationTime) {\n      _assert(\n        typeof expirationTime === 'number',\n        AuthErrorCode.INTERNAL_ERROR,\n        {\n          appName\n        }\n      );\n      manager.expirationTime = expirationTime;\n    }\n    return manager;\n  }\n\n  toJSON(): object {\n    return {\n      refreshToken: this.refreshToken,\n      accessToken: this.accessToken,\n      expirationTime: this.expirationTime\n    };\n  }\n\n  _assign(stsTokenManager: StsTokenManager): void {\n    this.accessToken = stsTokenManager.accessToken;\n    this.refreshToken = stsTokenManager.refreshToken;\n    this.expirationTime = stsTokenManager.expirationTime;\n  }\n\n  _clone(): StsTokenManager {\n    return Object.assign(new StsTokenManager(), this.toJSON());\n  }\n\n  _performRefresh(): never {\n    return debugFail('not implemented');\n  }\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { IdTokenResult } from '../../model/public_types';\nimport { NextFn } from '@firebase/util';\n\nimport {\n  APIUserInfo,\n  deleteAccount\n} from '../../api/account_management/account';\nimport { FinalizeMfaResponse } from '../../api/authentication/mfa';\nimport { AuthInternal } from '../../model/auth';\nimport { IdTokenResponse } from '../../model/id_token';\nimport {\n  MutableUserInfo,\n  UserInternal,\n  UserParameters\n} from '../../model/user';\nimport { AuthErrorCode } from '../errors';\nimport { PersistedBlob } from '../persistence';\nimport { _assert } from '../util/assert';\nimport { getIdTokenResult } from './id_token_result';\nimport { _logoutIfInvalidated } from './invalidation';\nimport { ProactiveRefresh } from './proactive_refresh';\nimport { _reloadWithoutSaving, reload } from './reload';\nimport { StsTokenManager } from './token_manager';\nimport { UserMetadata } from './user_metadata';\nimport { ProviderId } from '../../model/enums';\n\nfunction assertStringOrUndefined(\n  assertion: unknown,\n  appName: string\n): asserts assertion is string | undefined {\n  _assert(\n    typeof assertion === 'string' || typeof assertion === 'undefined',\n    AuthErrorCode.INTERNAL_ERROR,\n    { appName }\n  );\n}\n\nexport class UserImpl implements UserInternal {\n  // For the user object, provider is always Firebase.\n  readonly providerId = ProviderId.FIREBASE;\n  stsTokenManager: StsTokenManager;\n  // Last known accessToken so we know when it changes\n  private accessToken: string | null;\n\n  uid: string;\n  auth: AuthInternal;\n  emailVerified: boolean;\n  isAnonymous: boolean;\n  tenantId: string | null;\n  readonly metadata: UserMetadata;\n  providerData: MutableUserInfo[];\n\n  // Optional fields from UserInfo\n  displayName: string | null;\n  email: string | null;\n  phoneNumber: string | null;\n  photoURL: string | null;\n\n  _redirectEventId?: string;\n  private readonly proactiveRefresh = new ProactiveRefresh(this);\n\n  constructor({ uid, auth, stsTokenManager, ...opt }: UserParameters) {\n    this.uid = uid;\n    this.auth = auth;\n    this.stsTokenManager = stsTokenManager;\n    this.accessToken = stsTokenManager.accessToken;\n    this.displayName = opt.displayName || null;\n    this.email = opt.email || null;\n    this.emailVerified = opt.emailVerified || false;\n    this.phoneNumber = opt.phoneNumber || null;\n    this.photoURL = opt.photoURL || null;\n    this.isAnonymous = opt.isAnonymous || false;\n    this.tenantId = opt.tenantId || null;\n    this.providerData = opt.providerData ? [...opt.providerData] : [];\n    this.metadata = new UserMetadata(\n      opt.createdAt || undefined,\n      opt.lastLoginAt || undefined\n    );\n  }\n\n  async getIdToken(forceRefresh?: boolean): Promise<string> {\n    const accessToken = await _logoutIfInvalidated(\n      this,\n      this.stsTokenManager.getToken(this.auth, forceRefresh)\n    );\n    _assert(accessToken, this.auth, AuthErrorCode.INTERNAL_ERROR);\n\n    if (this.accessToken !== accessToken) {\n      this.accessToken = accessToken;\n      await this.auth._persistUserIfCurrent(this);\n      this.auth._notifyListenersIfCurrent(this);\n    }\n\n    return accessToken;\n  }\n\n  getIdTokenResult(forceRefresh?: boolean): Promise<IdTokenResult> {\n    return getIdTokenResult(this, forceRefresh);\n  }\n\n  reload(): Promise<void> {\n    return reload(this);\n  }\n\n  private reloadUserInfo: APIUserInfo | null = null;\n  private reloadListener: NextFn<APIUserInfo> | null = null;\n\n  _assign(user: UserInternal): void {\n    if (this === user) {\n      return;\n    }\n    _assert(this.uid === user.uid, this.auth, AuthErrorCode.INTERNAL_ERROR);\n    this.displayName = user.displayName;\n    this.photoURL = user.photoURL;\n    this.email = user.email;\n    this.emailVerified = user.emailVerified;\n    this.phoneNumber = user.phoneNumber;\n    this.isAnonymous = user.isAnonymous;\n    this.tenantId = user.tenantId;\n    this.providerData = user.providerData.map(userInfo => ({ ...userInfo }));\n    this.metadata._copy(user.metadata);\n    this.stsTokenManager._assign(user.stsTokenManager);\n  }\n\n  _clone(auth: AuthInternal): UserInternal {\n    const newUser = new UserImpl({\n      ...this,\n      auth,\n      stsTokenManager: this.stsTokenManager._clone()\n    });\n    newUser.metadata._copy(this.metadata);\n    return newUser;\n  }\n\n  _onReload(callback: NextFn<APIUserInfo>): void {\n    // There should only ever be one listener, and that is a single instance of MultiFactorUser\n    _assert(!this.reloadListener, this.auth, AuthErrorCode.INTERNAL_ERROR);\n    this.reloadListener = callback;\n    if (this.reloadUserInfo) {\n      this._notifyReloadListener(this.reloadUserInfo);\n      this.reloadUserInfo = null;\n    }\n  }\n\n  _notifyReloadListener(userInfo: APIUserInfo): void {\n    if (this.reloadListener) {\n      this.reloadListener(userInfo);\n    } else {\n      // If no listener is subscribed yet, save the result so it's available when they do subscribe\n      this.reloadUserInfo = userInfo;\n    }\n  }\n\n  _startProactiveRefresh(): void {\n    this.proactiveRefresh._start();\n  }\n\n  _stopProactiveRefresh(): void {\n    this.proactiveRefresh._stop();\n  }\n\n  async _updateTokensIfNecessary(\n    response: IdTokenResponse | FinalizeMfaResponse,\n    reload = false\n  ): Promise<void> {\n    let tokensRefreshed = false;\n    if (\n      response.idToken &&\n      response.idToken !== this.stsTokenManager.accessToken\n    ) {\n      this.stsTokenManager.updateFromServerResponse(response);\n      tokensRefreshed = true;\n    }\n\n    if (reload) {\n      await _reloadWithoutSaving(this);\n    }\n\n    await this.auth._persistUserIfCurrent(this);\n    if (tokensRefreshed) {\n      this.auth._notifyListenersIfCurrent(this);\n    }\n  }\n\n  async delete(): Promise<void> {\n    const idToken = await this.getIdToken();\n    await _logoutIfInvalidated(this, deleteAccount(this.auth, { idToken }));\n    this.stsTokenManager.clearRefreshToken();\n\n    // TODO: Determine if cancellable-promises are necessary to use in this class so that delete()\n    //       cancels pending actions...\n\n    return this.auth.signOut();\n  }\n\n  toJSON(): PersistedBlob {\n    return {\n      uid: this.uid,\n      email: this.email || undefined,\n      emailVerified: this.emailVerified,\n      displayName: this.displayName || undefined,\n      isAnonymous: this.isAnonymous,\n      photoURL: this.photoURL || undefined,\n      phoneNumber: this.phoneNumber || undefined,\n      tenantId: this.tenantId || undefined,\n      providerData: this.providerData.map(userInfo => ({ ...userInfo })),\n      stsTokenManager: this.stsTokenManager.toJSON(),\n      // Redirect event ID must be maintained in case there is a pending\n      // redirect event.\n      _redirectEventId: this._redirectEventId,\n      ...this.metadata.toJSON(),\n\n      // Required for compatibility with the legacy SDK (go/firebase-auth-sdk-persistence-parsing):\n      apiKey: this.auth.config.apiKey,\n      appName: this.auth.name\n      // Missing authDomain will be tolerated by the legacy SDK.\n      // stsTokenManager.apiKey isn't actually required (despite the legacy SDK persisting it).\n    };\n  }\n\n  get refreshToken(): string {\n    return this.stsTokenManager.refreshToken || '';\n  }\n\n  static _fromJSON(auth: AuthInternal, object: PersistedBlob): UserInternal {\n    const displayName = object.displayName ?? undefined;\n    const email = object.email ?? undefined;\n    const phoneNumber = object.phoneNumber ?? undefined;\n    const photoURL = object.photoURL ?? undefined;\n    const tenantId = object.tenantId ?? undefined;\n    const _redirectEventId = object._redirectEventId ?? undefined;\n    const createdAt = object.createdAt ?? undefined;\n    const lastLoginAt = object.lastLoginAt ?? undefined;\n    const {\n      uid,\n      emailVerified,\n      isAnonymous,\n      providerData,\n      stsTokenManager: plainObjectTokenManager\n    } = object;\n\n    _assert(uid && plainObjectTokenManager, auth, AuthErrorCode.INTERNAL_ERROR);\n\n    const stsTokenManager = StsTokenManager.fromJSON(\n      this.name,\n      plainObjectTokenManager as PersistedBlob\n    );\n\n    _assert(typeof uid === 'string', auth, AuthErrorCode.INTERNAL_ERROR);\n    assertStringOrUndefined(displayName, auth.name);\n    assertStringOrUndefined(email, auth.name);\n    _assert(\n      typeof emailVerified === 'boolean',\n      auth,\n      AuthErrorCode.INTERNAL_ERROR\n    );\n    _assert(\n      typeof isAnonymous === 'boolean',\n      auth,\n      AuthErrorCode.INTERNAL_ERROR\n    );\n    assertStringOrUndefined(phoneNumber, auth.name);\n    assertStringOrUndefined(photoURL, auth.name);\n    assertStringOrUndefined(tenantId, auth.name);\n    assertStringOrUndefined(_redirectEventId, auth.name);\n    assertStringOrUndefined(createdAt, auth.name);\n    assertStringOrUndefined(lastLoginAt, auth.name);\n    const user = new UserImpl({\n      uid,\n      auth,\n      email,\n      emailVerified,\n      displayName,\n      isAnonymous,\n      photoURL,\n      phoneNumber,\n      tenantId,\n      stsTokenManager,\n      createdAt,\n      lastLoginAt\n    });\n\n    if (providerData && Array.isArray(providerData)) {\n      user.providerData = providerData.map(userInfo => ({ ...userInfo }));\n    }\n\n    if (_redirectEventId) {\n      user._redirectEventId = _redirectEventId;\n    }\n\n    return user;\n  }\n\n  /**\n   * Initialize a User from an idToken server response\n   * @param auth\n   * @param idTokenResponse\n   */\n  static async _fromIdTokenResponse(\n    auth: AuthInternal,\n    idTokenResponse: IdTokenResponse,\n    isAnonymous: boolean = false\n  ): Promise<UserInternal> {\n    const stsTokenManager = new StsTokenManager();\n    stsTokenManager.updateFromServerResponse(idTokenResponse);\n\n    // Initialize the Firebase Auth user.\n    const user = new UserImpl({\n      uid: idTokenResponse.localId,\n      auth,\n      stsTokenManager,\n      isAnonymous\n    });\n\n    // Updates the user info and data and resolves with a user instance.\n    await _reloadWithoutSaving(user);\n    return user;\n  }\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { debugAssert } from './assert';\n\n/**\n * Our API has a lot of one-off constants that are used to do things.\n * Unfortunately we can't export these as classes instantiated directly since\n * the constructor may side effect and therefore can't be proven to be safely\n * culled. Instead, we export these classes themselves as a lowerCamelCase\n * constant, and instantiate them under the hood.\n */\nexport interface SingletonInstantiator<T> {\n  new (): T;\n}\n\nconst instanceCache: Map<unknown, unknown> = new Map();\n\nexport function _getInstance<T>(cls: unknown): T {\n  debugAssert(cls instanceof Function, 'Expected a class definition');\n  let instance = instanceCache.get(cls) as T | undefined;\n\n  if (instance) {\n    debugAssert(\n      instance instanceof cls,\n      'Instance stored in cache mismatched with class'\n    );\n    return instance;\n  }\n\n  instance = new (cls as SingletonInstantiator<T>)();\n  instanceCache.set(cls, instance);\n  return instance;\n}\n\nexport function _clearInstanceMap(): void {\n  instanceCache.clear();\n}\n", "/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Persistence } from '../../model/public_types';\n\nimport {\n  PersistenceInternal,\n  PersistenceType,\n  PersistenceValue,\n  StorageEventListener\n} from '../persistence';\n\nexport class InMemoryPersistence implements PersistenceInternal {\n  static type: 'NONE' = 'NONE';\n  readonly type = PersistenceType.NONE;\n  storage: Record<string, PersistenceValue> = {};\n\n  async _isAvailable(): Promise<boolean> {\n    return true;\n  }\n\n  async _set(key: string, value: PersistenceValue): Promise<void> {\n    this.storage[key] = value;\n  }\n\n  async _get<T extends PersistenceValue>(key: string): Promise<T | null> {\n    const value = this.storage[key];\n    return value === undefined ? null : (value as T);\n  }\n\n  async _remove(key: string): Promise<void> {\n    delete this.storage[key];\n  }\n\n  _addListener(_key: string, _listener: StorageEventListener): void {\n    // Listeners are not supported for in-memory storage since it cannot be shared across windows/workers\n    return;\n  }\n\n  _removeListener(_key: string, _listener: StorageEventListener): void {\n    // Listeners are not supported for in-memory storage since it cannot be shared across windows/workers\n    return;\n  }\n}\n\n/**\n * An implementation of {@link Persistence} of type 'NONE'.\n *\n * @public\n */\nexport const inMemoryPersistence: Persistence = InMemoryPersistence;\n", "/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ApiKey, AppName, AuthInternal } from '../../model/auth';\nimport { UserInternal } from '../../model/user';\nimport { PersistedBlob, PersistenceInternal } from '../persistence';\nimport { UserImpl } from '../user/user_impl';\nimport { _getInstance } from '../util/instantiator';\nimport { inMemoryPersistence } from './in_memory';\n\nexport const enum KeyName {\n  AUTH_USER = 'authUser',\n  AUTH_EVENT = 'authEvent',\n  REDIRECT_USER = 'redirectUser',\n  PERSISTENCE_USER = 'persistence'\n}\nexport const enum Namespace {\n  PERSISTENCE = 'firebase'\n}\n\nexport function _persistenceKeyName(\n  key: string,\n  apiKey: ApiKey,\n  appName: AppName\n): string {\n  return `${Namespace.PERSISTENCE}:${key}:${apiKey}:${appName}`;\n}\n\nexport class PersistenceUserManager {\n  private readonly fullUserKey: string;\n  private readonly fullPersistenceKey: string;\n  private readonly boundEventHandler: () => void;\n\n  private constructor(\n    public persistence: PersistenceInternal,\n    private readonly auth: AuthInternal,\n    private readonly userKey: string\n  ) {\n    const { config, name } = this.auth;\n    this.fullUserKey = _persistenceKeyName(this.userKey, config.apiKey, name);\n    this.fullPersistenceKey = _persistenceKeyName(\n      KeyName.PERSISTENCE_USER,\n      config.apiKey,\n      name\n    );\n    this.boundEventHandler = auth._onStorageEvent.bind(auth);\n    this.persistence._addListener(this.fullUserKey, this.boundEventHandler);\n  }\n\n  setCurrentUser(user: UserInternal): Promise<void> {\n    return this.persistence._set(this.fullUserKey, user.toJSON());\n  }\n\n  async getCurrentUser(): Promise<UserInternal | null> {\n    const blob = await this.persistence._get<PersistedBlob>(this.fullUserKey);\n    return blob ? UserImpl._fromJSON(this.auth, blob) : null;\n  }\n\n  removeCurrentUser(): Promise<void> {\n    return this.persistence._remove(this.fullUserKey);\n  }\n\n  savePersistenceForRedirect(): Promise<void> {\n    return this.persistence._set(\n      this.fullPersistenceKey,\n      this.persistence.type\n    );\n  }\n\n  async setPersistence(newPersistence: PersistenceInternal): Promise<void> {\n    if (this.persistence === newPersistence) {\n      return;\n    }\n\n    const currentUser = await this.getCurrentUser();\n    await this.removeCurrentUser();\n\n    this.persistence = newPersistence;\n\n    if (currentUser) {\n      return this.setCurrentUser(currentUser);\n    }\n  }\n\n  delete(): void {\n    this.persistence._removeListener(this.fullUserKey, this.boundEventHandler);\n  }\n\n  static async create(\n    auth: AuthInternal,\n    persistenceHierarchy: PersistenceInternal[],\n    userKey = KeyName.AUTH_USER\n  ): Promise<PersistenceUserManager> {\n    if (!persistenceHierarchy.length) {\n      return new PersistenceUserManager(\n        _getInstance(inMemoryPersistence),\n        auth,\n        userKey\n      );\n    }\n\n    // Eliminate any persistences that are not available\n    const availablePersistences = (\n      await Promise.all(\n        persistenceHierarchy.map(async persistence => {\n          if (await persistence._isAvailable()) {\n            return persistence;\n          }\n          return undefined;\n        })\n      )\n    ).filter(persistence => persistence) as PersistenceInternal[];\n\n    // Fall back to the first persistence listed, or in memory if none available\n    let selectedPersistence =\n      availablePersistences[0] ||\n      _getInstance<PersistenceInternal>(inMemoryPersistence);\n\n    const key = _persistenceKeyName(userKey, auth.config.apiKey, auth.name);\n\n    // Pull out the existing user, setting the chosen persistence to that\n    // persistence if the user exists.\n    let userToMigrate: UserInternal | null = null;\n    // Note, here we check for a user in _all_ persistences, not just the\n    // ones deemed available. If we can migrate a user out of a broken\n    // persistence, we will (but only if that persistence supports migration).\n    for (const persistence of persistenceHierarchy) {\n      try {\n        const blob = await persistence._get<PersistedBlob>(key);\n        if (blob) {\n          const user = UserImpl._fromJSON(auth, blob); // throws for unparsable blob (wrong format)\n          if (persistence !== selectedPersistence) {\n            userToMigrate = user;\n          }\n          selectedPersistence = persistence;\n          break;\n        }\n      } catch {}\n    }\n\n    // If we find the user in a persistence that does support migration, use\n    // that migration path (of only persistences that support migration)\n    const migrationHierarchy = availablePersistences.filter(\n      p => p._shouldAllowMigration\n    );\n\n    // If the persistence does _not_ allow migration, just finish off here\n    if (\n      !selectedPersistence._shouldAllowMigration ||\n      !migrationHierarchy.length\n    ) {\n      return new PersistenceUserManager(selectedPersistence, auth, userKey);\n    }\n\n    selectedPersistence = migrationHierarchy[0];\n    if (userToMigrate) {\n      // This normally shouldn't throw since chosenPersistence.isAvailable() is true, but if it does\n      // we'll just let it bubble to surface the error.\n      await selectedPersistence._set(key, userToMigrate.toJSON());\n    }\n\n    // Attempt to clear the key in other persistences but ignore errors. This helps prevent issues\n    // such as users getting stuck with a previous account after signing out and refreshing the tab.\n    await Promise.all(\n      persistenceHierarchy.map(async persistence => {\n        if (persistence !== selectedPersistence) {\n          try {\n            await persistence._remove(key);\n          } catch {}\n        }\n      })\n    );\n    return new PersistenceUserManager(selectedPersistence, auth, userKey);\n  }\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { isIE, getUA } from '@firebase/util';\n\ninterface NavigatorStandalone extends Navigator {\n  standalone?: unknown;\n}\n\ninterface Document {\n  documentMode?: number;\n}\n\n/**\n * Enums for Browser name.\n */\nexport const enum BrowserName {\n  ANDROID = 'Android',\n  BLACKBERRY = 'Blackberry',\n  EDGE = 'Edge',\n  FIREFOX = 'Firefox',\n  IE = 'IE',\n  IEMOBILE = 'IEMobile',\n  OPERA = 'Opera',\n  OTHER = 'Other',\n  CHROME = 'Chrome',\n  SAFARI = 'Safari',\n  SILK = 'Silk',\n  WEBOS = 'Webos'\n}\n\n/**\n * Determine the browser for the purposes of reporting usage to the API\n */\nexport function _getBrowserName(userAgent: string): BrowserName | string {\n  const ua = userAgent.toLowerCase();\n  if (ua.includes('opera/') || ua.includes('opr/') || ua.includes('opios/')) {\n    return BrowserName.OPERA;\n  } else if (_isIEMobile(ua)) {\n    // Windows phone IEMobile browser.\n    return BrowserName.IEMOBILE;\n  } else if (ua.includes('msie') || ua.includes('trident/')) {\n    return BrowserName.IE;\n  } else if (ua.includes('edge/')) {\n    return BrowserName.EDGE;\n  } else if (_isFirefox(ua)) {\n    return BrowserName.FIREFOX;\n  } else if (ua.includes('silk/')) {\n    return BrowserName.SILK;\n  } else if (_isBlackBerry(ua)) {\n    // Blackberry browser.\n    return BrowserName.BLACKBERRY;\n  } else if (_isWebOS(ua)) {\n    // WebOS default browser.\n    return BrowserName.WEBOS;\n  } else if (_isSafari(ua)) {\n    return BrowserName.SAFARI;\n  } else if (\n    (ua.includes('chrome/') || _isChromeIOS(ua)) &&\n    !ua.includes('edge/')\n  ) {\n    return BrowserName.CHROME;\n  } else if (_isAndroid(ua)) {\n    // Android stock browser.\n    return BrowserName.ANDROID;\n  } else {\n    // Most modern browsers have name/version at end of user agent string.\n    const re = /([a-zA-Z\\d\\.]+)\\/[a-zA-Z\\d\\.]*$/;\n    const matches = userAgent.match(re);\n    if (matches?.length === 2) {\n      return matches[1];\n    }\n  }\n  return BrowserName.OTHER;\n}\n\nexport function _isFirefox(ua = getUA()): boolean {\n  return /firefox\\//i.test(ua);\n}\n\nexport function _isSafari(userAgent = getUA()): boolean {\n  const ua = userAgent.toLowerCase();\n  return (\n    ua.includes('safari/') &&\n    !ua.includes('chrome/') &&\n    !ua.includes('crios/') &&\n    !ua.includes('android')\n  );\n}\n\nexport function _isChromeIOS(ua = getUA()): boolean {\n  return /crios\\//i.test(ua);\n}\n\nexport function _isIEMobile(ua = getUA()): boolean {\n  return /iemobile/i.test(ua);\n}\n\nexport function _isAndroid(ua = getUA()): boolean {\n  return /android/i.test(ua);\n}\n\nexport function _isBlackBerry(ua = getUA()): boolean {\n  return /blackberry/i.test(ua);\n}\n\nexport function _isWebOS(ua = getUA()): boolean {\n  return /webos/i.test(ua);\n}\n\nexport function _isIOS(ua = getUA()): boolean {\n  return (\n    /iphone|ipad|ipod/i.test(ua) ||\n    (/macintosh/i.test(ua) && /mobile/i.test(ua))\n  );\n}\n\nexport function _isIOS7Or8(ua = getUA()): boolean {\n  return (\n    /(iPad|iPhone|iPod).*OS 7_\\d/i.test(ua) ||\n    /(iPad|iPhone|iPod).*OS 8_\\d/i.test(ua)\n  );\n}\n\nexport function _isIOSStandalone(ua = getUA()): boolean {\n  return _isIOS(ua) && !!(window.navigator as NavigatorStandalone)?.standalone;\n}\n\nexport function _isIE10(): boolean {\n  return isIE() && (document as Document).documentMode === 10;\n}\n\nexport function _isMobileBrowser(ua: string = getUA()): boolean {\n  // TODO: implement getBrowserName equivalent for OS.\n  return (\n    _isIOS(ua) ||\n    _isAndroid(ua) ||\n    _isWebOS(ua) ||\n    _isBlackBerry(ua) ||\n    /windows phone/i.test(ua) ||\n    _isIEMobile(ua)\n  );\n}\n\nexport function _isIframe(): boolean {\n  try {\n    // Check that the current window is not the top window.\n    // If so, return true.\n    return !!(window && window !== window.top);\n  } catch (e) {\n    return false;\n  }\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { SDK_VERSION } from '@firebase/app';\nimport { _getBrowserName } from './browser';\nimport { getUA } from '@firebase/util';\n\nexport const enum ClientImplementation {\n  CORE = 'JsCore'\n}\n\n/**\n * @internal\n */\nexport const enum ClientPlatform {\n  BROWSER = 'Browser',\n  NODE = 'Node',\n  REACT_NATIVE = 'ReactNative',\n  CORDOVA = 'Cordova',\n  WORKER = 'Worker'\n}\n\n/*\n * Determine the SDK version string\n */\nexport function _getClientVersion(\n  clientPlatform: ClientPlatform,\n  frameworks: readonly string[] = []\n): string {\n  let reportedPlatform: string;\n  switch (clientPlatform) {\n    case ClientPlatform.BROWSER:\n      // In a browser environment, report the browser name.\n      reportedPlatform = _getBrowserName(getUA());\n      break;\n    case ClientPlatform.WORKER:\n      // Technically a worker runs from a browser but we need to differentiate a\n      // worker from a browser.\n      // For example: Chrome-Worker/JsCore/4.9.1/FirebaseCore-web.\n      reportedPlatform = `${_getBrowserName(getUA())}-${clientPlatform}`;\n      break;\n    default:\n      reportedPlatform = clientPlatform;\n  }\n  const reportedFrameworks = frameworks.length\n    ? frameworks.join(',')\n    : 'FirebaseCore-web'; /* default value if no other framework is used */\n  return `${reportedPlatform}/${ClientImplementation.CORE}/${SDK_VERSION}/${reportedFrameworks}`;\n}\n", "/**\n * @license\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AuthInternal } from '../../model/auth';\nimport { Unsubscribe, User } from '../../model/public_types';\nimport { AuthErrorCode } from '../errors';\n\ninterface MiddlewareEntry {\n  (user: User | null): Promise<void>;\n  onAbort?: () => void;\n}\n\nexport class AuthMiddlewareQueue {\n  private readonly queue: MiddlewareEntry[] = [];\n\n  constructor(private readonly auth: AuthInternal) {}\n\n  pushCallback(\n    callback: (user: User | null) => void | Promise<void>,\n    onAbort?: () => void\n  ): Unsubscribe {\n    // The callback could be sync or async. Wrap it into a\n    // function that is always async.\n    const wrappedCallback: MiddlewareEntry = (\n      user: User | null\n    ): Promise<void> =>\n      new Promise((resolve, reject) => {\n        try {\n          const result = callback(user);\n          // Either resolve with existing promise or wrap a non-promise\n          // return value into a promise.\n          resolve(result);\n        } catch (e) {\n          // Sync callback throws.\n          reject(e);\n        }\n      });\n    // Attach the onAbort if present\n    wrappedCallback.onAbort = onAbort;\n    this.queue.push(wrappedCallback);\n\n    const index = this.queue.length - 1;\n    return () => {\n      // Unsubscribe. Replace with no-op. Do not remove from array, or it will disturb\n      // indexing of other elements.\n      this.queue[index] = () => Promise.resolve();\n    };\n  }\n\n  async runMiddleware(nextUser: User | null): Promise<void> {\n    if (this.auth.currentUser === nextUser) {\n      return;\n    }\n\n    // While running the middleware, build a temporary stack of onAbort\n    // callbacks to call if one middleware callback rejects.\n\n    const onAbortStack: Array<() => void> = [];\n    try {\n      for (const beforeStateCallback of this.queue) {\n        await beforeStateCallback(nextUser);\n\n        // Only push the onAbort if the callback succeeds\n        if (beforeStateCallback.onAbort) {\n          onAbortStack.push(beforeStateCallback.onAbort);\n        }\n      }\n    } catch (e) {\n      // Run all onAbort, with separate try/catch to ignore any errors and\n      // continue\n      onAbortStack.reverse();\n      for (const onAbort of onAbortStack) {\n        try {\n          onAbort();\n        } catch (_) {\n          /* swallow error */\n        }\n      }\n\n      throw this.auth._errorFactory.create(AuthErrorCode.LOGIN_BLOCKED, {\n        originalMessage: (e as Error)?.message\n      });\n    }\n  }\n}\n", "/**\n * @license\n * Copyright 2023 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  _performApiRequest,\n  Endpoint,\n  HttpMethod,\n  _addTidIfNecessary\n} from '../index';\nimport { Auth } from '../../model/public_types';\n\n/**\n * Request object for fetching the password policy.\n */\nexport interface GetPasswordPolicyRequest {\n  tenantId?: string;\n}\n\n/**\n * Response object for fetching the password policy.\n */\nexport interface GetPasswordPolicyResponse {\n  customStrengthOptions: {\n    minPasswordLength?: number;\n    maxPasswordLength?: number;\n    containsLowercaseCharacter?: boolean;\n    containsUppercaseCharacter?: boolean;\n    containsNumericCharacter?: boolean;\n    containsNonAlphanumericCharacter?: boolean;\n  };\n  allowedNonAlphanumericCharacters?: string[];\n  enforcementState: string;\n  forceUpgradeOnSignin?: boolean;\n  schemaVersion: number;\n}\n\n/**\n * Fetches the password policy for the currently set tenant or the project if no tenant is set.\n *\n * @param auth Auth object.\n * @param request Password policy request.\n * @returns Password policy response.\n */\nexport async function _getPasswordPolicy(\n  auth: Auth,\n  request: GetPasswordPolicyRequest = {}\n): Promise<GetPasswordPolicyResponse> {\n  return _performApiRequest<\n    GetPasswordPolicyRequest,\n    GetPasswordPolicyResponse\n  >(\n    auth,\n    HttpMethod.GET,\n    Endpoint.GET_PASSWORD_POLICY,\n    _addTidIfNecessary(auth, request)\n  );\n}\n", "/**\n * @license\n * Copyright 2023 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { GetPasswordPolicyResponse } from '../../api/password_policy/get_password_policy';\nimport {\n  PasswordPolicyCustomStrengthOptions,\n  PasswordPolicyInternal,\n  PasswordValidationStatusInternal\n} from '../../model/password_policy';\nimport { PasswordValidationStatus } from '../../model/public_types';\n\n// Minimum min password length enforced by the backend, even if no minimum length is set.\nconst MINIMUM_MIN_PASSWORD_LENGTH = 6;\n\n/**\n * Stores password policy requirements and provides password validation against the policy.\n *\n * @internal\n */\nexport class PasswordPolicyImpl implements PasswordPolicyInternal {\n  readonly customStrengthOptions: PasswordPolicyCustomStrengthOptions;\n  readonly allowedNonAlphanumericCharacters: string;\n  readonly enforcementState: string;\n  readonly forceUpgradeOnSignin: boolean;\n  readonly schemaVersion: number;\n\n  constructor(response: GetPasswordPolicyResponse) {\n    // Only include custom strength options defined in the response.\n    const responseOptions = response.customStrengthOptions;\n    this.customStrengthOptions = {};\n    // TODO: Remove once the backend is updated to include the minimum min password length instead of undefined when there is no minimum length set.\n    this.customStrengthOptions.minPasswordLength =\n      responseOptions.minPasswordLength ?? MINIMUM_MIN_PASSWORD_LENGTH;\n    if (responseOptions.maxPasswordLength) {\n      this.customStrengthOptions.maxPasswordLength =\n        responseOptions.maxPasswordLength;\n    }\n    if (responseOptions.containsLowercaseCharacter !== undefined) {\n      this.customStrengthOptions.containsLowercaseLetter =\n        responseOptions.containsLowercaseCharacter;\n    }\n    if (responseOptions.containsUppercaseCharacter !== undefined) {\n      this.customStrengthOptions.containsUppercaseLetter =\n        responseOptions.containsUppercaseCharacter;\n    }\n    if (responseOptions.containsNumericCharacter !== undefined) {\n      this.customStrengthOptions.containsNumericCharacter =\n        responseOptions.containsNumericCharacter;\n    }\n    if (responseOptions.containsNonAlphanumericCharacter !== undefined) {\n      this.customStrengthOptions.containsNonAlphanumericCharacter =\n        responseOptions.containsNonAlphanumericCharacter;\n    }\n\n    this.enforcementState = response.enforcementState;\n    if (this.enforcementState === 'ENFORCEMENT_STATE_UNSPECIFIED') {\n      this.enforcementState = 'OFF';\n    }\n\n    // Use an empty string if no non-alphanumeric characters are specified in the response.\n    this.allowedNonAlphanumericCharacters =\n      response.allowedNonAlphanumericCharacters?.join('') ?? '';\n\n    this.forceUpgradeOnSignin = response.forceUpgradeOnSignin ?? false;\n    this.schemaVersion = response.schemaVersion;\n  }\n\n  validatePassword(password: string): PasswordValidationStatus {\n    const status: PasswordValidationStatusInternal = {\n      isValid: true,\n      passwordPolicy: this\n    };\n\n    // Check the password length and character options.\n    this.validatePasswordLengthOptions(password, status);\n    this.validatePasswordCharacterOptions(password, status);\n\n    // Combine the status into single isValid property.\n    status.isValid &&= status.meetsMinPasswordLength ?? true;\n    status.isValid &&= status.meetsMaxPasswordLength ?? true;\n    status.isValid &&= status.containsLowercaseLetter ?? true;\n    status.isValid &&= status.containsUppercaseLetter ?? true;\n    status.isValid &&= status.containsNumericCharacter ?? true;\n    status.isValid &&= status.containsNonAlphanumericCharacter ?? true;\n\n    return status;\n  }\n\n  /**\n   * Validates that the password meets the length options for the policy.\n   *\n   * @param password Password to validate.\n   * @param status Validation status.\n   */\n  private validatePasswordLengthOptions(\n    password: string,\n    status: PasswordValidationStatusInternal\n  ): void {\n    const minPasswordLength = this.customStrengthOptions.minPasswordLength;\n    const maxPasswordLength = this.customStrengthOptions.maxPasswordLength;\n    if (minPasswordLength) {\n      status.meetsMinPasswordLength = password.length >= minPasswordLength;\n    }\n    if (maxPasswordLength) {\n      status.meetsMaxPasswordLength = password.length <= maxPasswordLength;\n    }\n  }\n\n  /**\n   * Validates that the password meets the character options for the policy.\n   *\n   * @param password Password to validate.\n   * @param status Validation status.\n   */\n  private validatePasswordCharacterOptions(\n    password: string,\n    status: PasswordValidationStatusInternal\n  ): void {\n    // Assign statuses for requirements even if the password is an empty string.\n    this.updatePasswordCharacterOptionsStatuses(\n      status,\n      /* containsLowercaseCharacter= */ false,\n      /* containsUppercaseCharacter= */ false,\n      /* containsNumericCharacter= */ false,\n      /* containsNonAlphanumericCharacter= */ false\n    );\n\n    let passwordChar;\n    for (let i = 0; i < password.length; i++) {\n      passwordChar = password.charAt(i);\n      this.updatePasswordCharacterOptionsStatuses(\n        status,\n        /* containsLowercaseCharacter= */ passwordChar >= 'a' &&\n          passwordChar <= 'z',\n        /* containsUppercaseCharacter= */ passwordChar >= 'A' &&\n          passwordChar <= 'Z',\n        /* containsNumericCharacter= */ passwordChar >= '0' &&\n          passwordChar <= '9',\n        /* containsNonAlphanumericCharacter= */ this.allowedNonAlphanumericCharacters.includes(\n          passwordChar\n        )\n      );\n    }\n  }\n\n  /**\n   * Updates the running validation status with the statuses for the character options.\n   * Expected to be called each time a character is processed to update each option status\n   * based on the current character.\n   *\n   * @param status Validation status.\n   * @param containsLowercaseCharacter Whether the character is a lowercase letter.\n   * @param containsUppercaseCharacter Whether the character is an uppercase letter.\n   * @param containsNumericCharacter Whether the character is a numeric character.\n   * @param containsNonAlphanumericCharacter Whether the character is a non-alphanumeric character.\n   */\n  private updatePasswordCharacterOptionsStatuses(\n    status: PasswordValidationStatusInternal,\n    containsLowercaseCharacter: boolean,\n    containsUppercaseCharacter: boolean,\n    containsNumericCharacter: boolean,\n    containsNonAlphanumericCharacter: boolean\n  ): void {\n    if (this.customStrengthOptions.containsLowercaseLetter) {\n      status.containsLowercaseLetter ||= containsLowercaseCharacter;\n    }\n    if (this.customStrengthOptions.containsUppercaseLetter) {\n      status.containsUppercaseLetter ||= containsUppercaseCharacter;\n    }\n    if (this.customStrengthOptions.containsNumericCharacter) {\n      status.containsNumericCharacter ||= containsNumericCharacter;\n    }\n    if (this.customStrengthOptions.containsNonAlphanumericCharacter) {\n      status.containsNonAlphanumericCharacter ||=\n        containsNonAlphanumericCharacter;\n    }\n  }\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { _FirebaseService, FirebaseApp } from '@firebase/app';\nimport { Provider } from '@firebase/component';\nimport { AppCheckInternalComponentName } from '@firebase/app-check-interop-types';\nimport {\n  Auth,\n  AuthErrorMap,\n  AuthSettings,\n  EmulatorConfig,\n  NextOrObserver,\n  Persistence,\n  PopupRedirectResolver,\n  User,\n  UserCredential,\n  CompleteFn,\n  ErrorFn,\n  NextFn,\n  Unsubscribe,\n  PasswordValidationStatus\n} from '../../model/public_types';\nimport {\n  createSubscribe,\n  ErrorFactory,\n  FirebaseError,\n  getModularInstance,\n  Observer,\n  Subscribe\n} from '@firebase/util';\n\nimport { AuthInternal, ConfigInternal } from '../../model/auth';\nimport { PopupRedirectResolverInternal } from '../../model/popup_redirect';\nimport { UserInternal } from '../../model/user';\nimport {\n  AuthErrorCode,\n  AuthErrorParams,\n  ErrorMapRetriever,\n  _DEFAULT_AUTH_ERROR_FACTORY\n} from '../errors';\nimport { PersistenceInternal } from '../persistence';\nimport {\n  KeyName,\n  PersistenceUserManager\n} from '../persistence/persistence_user_manager';\nimport { _reloadWithoutSaving } from '../user/reload';\nimport { _assert } from '../util/assert';\nimport { _getInstance } from '../util/instantiator';\nimport { _getUserLanguage } from '../util/navigator';\nimport { _getClientVersion } from '../util/version';\nimport { HttpHeader } from '../../api';\nimport {\n  RevokeTokenRequest,\n  TokenType,\n  revokeToken\n} from '../../api/authentication/token';\nimport { AuthMiddlewareQueue } from './middleware';\nimport { RecaptchaConfig } from '../../platform_browser/recaptcha/recaptcha';\nimport { _logWarn } from '../util/log';\nimport { _getPasswordPolicy } from '../../api/password_policy/get_password_policy';\nimport { PasswordPolicyInternal } from '../../model/password_policy';\nimport { PasswordPolicyImpl } from './password_policy_impl';\n\ninterface AsyncAction {\n  (): Promise<void>;\n}\n\nexport const enum DefaultConfig {\n  TOKEN_API_HOST = 'securetoken.googleapis.com',\n  API_HOST = 'identitytoolkit.googleapis.com',\n  API_SCHEME = 'https'\n}\n\nexport class AuthImpl implements AuthInternal, _FirebaseService {\n  currentUser: User | null = null;\n  emulatorConfig: EmulatorConfig | null = null;\n  private operations = Promise.resolve();\n  private persistenceManager?: PersistenceUserManager;\n  private redirectPersistenceManager?: PersistenceUserManager;\n  private authStateSubscription = new Subscription<User>(this);\n  private idTokenSubscription = new Subscription<User>(this);\n  private readonly beforeStateQueue = new AuthMiddlewareQueue(this);\n  private redirectUser: UserInternal | null = null;\n  private isProactiveRefreshEnabled = false;\n  private readonly EXPECTED_PASSWORD_POLICY_SCHEMA_VERSION: number = 1;\n\n  // Any network calls will set this to true and prevent subsequent emulator\n  // initialization\n  _canInitEmulator = true;\n  _isInitialized = false;\n  _deleted = false;\n  _initializationPromise: Promise<void> | null = null;\n  _popupRedirectResolver: PopupRedirectResolverInternal | null = null;\n  _errorFactory: ErrorFactory<AuthErrorCode, AuthErrorParams> =\n    _DEFAULT_AUTH_ERROR_FACTORY;\n  _agentRecaptchaConfig: RecaptchaConfig | null = null;\n  _tenantRecaptchaConfigs: Record<string, RecaptchaConfig> = {};\n  _projectPasswordPolicy: PasswordPolicyInternal | null = null;\n  _tenantPasswordPolicies: Record<string, PasswordPolicyInternal> = {};\n  readonly name: string;\n\n  // Tracks the last notified UID for state change listeners to prevent\n  // repeated calls to the callbacks. Undefined means it's never been\n  // called, whereas null means it's been called with a signed out user\n  private lastNotifiedUid: string | null | undefined = undefined;\n\n  languageCode: string | null = null;\n  tenantId: string | null = null;\n  settings: AuthSettings = { appVerificationDisabledForTesting: false };\n\n  constructor(\n    public readonly app: FirebaseApp,\n    private readonly heartbeatServiceProvider: Provider<'heartbeat'>,\n    private readonly appCheckServiceProvider: Provider<AppCheckInternalComponentName>,\n    public readonly config: ConfigInternal\n  ) {\n    this.name = app.name;\n    this.clientVersion = config.sdkClientVersion;\n  }\n\n  _initializeWithPersistence(\n    persistenceHierarchy: PersistenceInternal[],\n    popupRedirectResolver?: PopupRedirectResolver\n  ): Promise<void> {\n    if (popupRedirectResolver) {\n      this._popupRedirectResolver = _getInstance(popupRedirectResolver);\n    }\n\n    // Have to check for app deletion throughout initialization (after each\n    // promise resolution)\n    this._initializationPromise = this.queue(async () => {\n      if (this._deleted) {\n        return;\n      }\n\n      this.persistenceManager = await PersistenceUserManager.create(\n        this,\n        persistenceHierarchy\n      );\n\n      if (this._deleted) {\n        return;\n      }\n\n      // Initialize the resolver early if necessary (only applicable to web:\n      // this will cause the iframe to load immediately in certain cases)\n      if (this._popupRedirectResolver?._shouldInitProactively) {\n        // If this fails, don't halt auth loading\n        try {\n          await this._popupRedirectResolver._initialize(this);\n        } catch (e) {\n          /* Ignore the error */\n        }\n      }\n\n      await this.initializeCurrentUser(popupRedirectResolver);\n      this.lastNotifiedUid = this.currentUser?.uid || null;\n\n      if (this._deleted) {\n        return;\n      }\n\n      this._isInitialized = true;\n    });\n\n    return this._initializationPromise;\n  }\n\n  /**\n   * If the persistence is changed in another window, the user manager will let us know\n   */\n  async _onStorageEvent(): Promise<void> {\n    if (this._deleted) {\n      return;\n    }\n\n    const user = await this.assertedPersistence.getCurrentUser();\n\n    if (!this.currentUser && !user) {\n      // No change, do nothing (was signed out and remained signed out).\n      return;\n    }\n\n    // If the same user is to be synchronized.\n    if (this.currentUser && user && this.currentUser.uid === user.uid) {\n      // Data update, simply copy data changes.\n      this._currentUser._assign(user);\n      // If tokens changed from previous user tokens, this will trigger\n      // notifyAuthListeners_.\n      await this.currentUser.getIdToken();\n      return;\n    }\n\n    // Update current Auth state. Either a new login or logout.\n    // Skip blocking callbacks, they should not apply to a change in another tab.\n    await this._updateCurrentUser(user, /* skipBeforeStateCallbacks */ true);\n  }\n\n  private async initializeCurrentUser(\n    popupRedirectResolver?: PopupRedirectResolver\n  ): Promise<void> {\n    // First check to see if we have a pending redirect event.\n    const previouslyStoredUser =\n      (await this.assertedPersistence.getCurrentUser()) as UserInternal | null;\n    let futureCurrentUser = previouslyStoredUser;\n    let needsTocheckMiddleware = false;\n    if (popupRedirectResolver && this.config.authDomain) {\n      await this.getOrInitRedirectPersistenceManager();\n      const redirectUserEventId = this.redirectUser?._redirectEventId;\n      const storedUserEventId = futureCurrentUser?._redirectEventId;\n      const result = await this.tryRedirectSignIn(popupRedirectResolver);\n\n      // If the stored user (i.e. the old \"currentUser\") has a redirectId that\n      // matches the redirect user, then we want to initially sign in with the\n      // new user object from result.\n      // TODO(samgho): More thoroughly test all of this\n      if (\n        (!redirectUserEventId || redirectUserEventId === storedUserEventId) &&\n        result?.user\n      ) {\n        futureCurrentUser = result.user as UserInternal;\n        needsTocheckMiddleware = true;\n      }\n    }\n\n    // If no user in persistence, there is no current user. Set to null.\n    if (!futureCurrentUser) {\n      return this.directlySetCurrentUser(null);\n    }\n\n    if (!futureCurrentUser._redirectEventId) {\n      // This isn't a redirect link operation, we can reload and bail.\n      // First though, ensure that we check the middleware is happy.\n      if (needsTocheckMiddleware) {\n        try {\n          await this.beforeStateQueue.runMiddleware(futureCurrentUser);\n        } catch (e) {\n          futureCurrentUser = previouslyStoredUser;\n          // We know this is available since the bit is only set when the\n          // resolver is available\n          this._popupRedirectResolver!._overrideRedirectResult(this, () =>\n            Promise.reject(e)\n          );\n        }\n      }\n\n      if (futureCurrentUser) {\n        return this.reloadAndSetCurrentUserOrClear(futureCurrentUser);\n      } else {\n        return this.directlySetCurrentUser(null);\n      }\n    }\n\n    _assert(this._popupRedirectResolver, this, AuthErrorCode.ARGUMENT_ERROR);\n    await this.getOrInitRedirectPersistenceManager();\n\n    // If the redirect user's event ID matches the current user's event ID,\n    // DO NOT reload the current user, otherwise they'll be cleared from storage.\n    // This is important for the reauthenticateWithRedirect() flow.\n    if (\n      this.redirectUser &&\n      this.redirectUser._redirectEventId === futureCurrentUser._redirectEventId\n    ) {\n      return this.directlySetCurrentUser(futureCurrentUser);\n    }\n\n    return this.reloadAndSetCurrentUserOrClear(futureCurrentUser);\n  }\n\n  private async tryRedirectSignIn(\n    redirectResolver: PopupRedirectResolver\n  ): Promise<UserCredential | null> {\n    // The redirect user needs to be checked (and signed in if available)\n    // during auth initialization. All of the normal sign in and link/reauth\n    // flows call back into auth and push things onto the promise queue. We\n    // need to await the result of the redirect sign in *inside the promise\n    // queue*. This presents a problem: we run into deadlock. See:\n    //    ┌> [Initialization] ─────┐\n    //    ┌> [<other queue tasks>] │\n    //    └─ [getRedirectResult] <─┘\n    //    where [] are tasks on the queue and arrows denote awaits\n    // Initialization will never complete because it's waiting on something\n    // that's waiting for initialization to complete!\n    //\n    // Instead, this method calls getRedirectResult() (stored in\n    // _completeRedirectFn) with an optional parameter that instructs all of\n    // the underlying auth operations to skip anything that mutates auth state.\n\n    let result: UserCredential | null = null;\n    try {\n      // We know this._popupRedirectResolver is set since redirectResolver\n      // is passed in. The _completeRedirectFn expects the unwrapped extern.\n      result = await this._popupRedirectResolver!._completeRedirectFn(\n        this,\n        redirectResolver,\n        true\n      );\n    } catch (e) {\n      // Swallow any errors here; the code can retrieve them in\n      // getRedirectResult().\n      await this._setRedirectUser(null);\n    }\n\n    return result;\n  }\n\n  private async reloadAndSetCurrentUserOrClear(\n    user: UserInternal\n  ): Promise<void> {\n    try {\n      await _reloadWithoutSaving(user);\n    } catch (e) {\n      if (\n        (e as FirebaseError)?.code !==\n        `auth/${AuthErrorCode.NETWORK_REQUEST_FAILED}`\n      ) {\n        // Something's wrong with the user's token. Log them out and remove\n        // them from storage\n        return this.directlySetCurrentUser(null);\n      }\n    }\n\n    return this.directlySetCurrentUser(user);\n  }\n\n  useDeviceLanguage(): void {\n    this.languageCode = _getUserLanguage();\n  }\n\n  async _delete(): Promise<void> {\n    this._deleted = true;\n  }\n\n  async updateCurrentUser(userExtern: User | null): Promise<void> {\n    // The public updateCurrentUser method needs to make a copy of the user,\n    // and also check that the project matches\n    const user = userExtern\n      ? (getModularInstance(userExtern) as UserInternal)\n      : null;\n    if (user) {\n      _assert(\n        user.auth.config.apiKey === this.config.apiKey,\n        this,\n        AuthErrorCode.INVALID_AUTH\n      );\n    }\n    return this._updateCurrentUser(user && user._clone(this));\n  }\n\n  async _updateCurrentUser(\n    user: User | null,\n    skipBeforeStateCallbacks: boolean = false\n  ): Promise<void> {\n    if (this._deleted) {\n      return;\n    }\n    if (user) {\n      _assert(\n        this.tenantId === user.tenantId,\n        this,\n        AuthErrorCode.TENANT_ID_MISMATCH\n      );\n    }\n\n    if (!skipBeforeStateCallbacks) {\n      await this.beforeStateQueue.runMiddleware(user);\n    }\n\n    return this.queue(async () => {\n      await this.directlySetCurrentUser(user as UserInternal | null);\n      this.notifyAuthListeners();\n    });\n  }\n\n  async signOut(): Promise<void> {\n    // Run first, to block _setRedirectUser() if any callbacks fail.\n    await this.beforeStateQueue.runMiddleware(null);\n    // Clear the redirect user when signOut is called\n    if (this.redirectPersistenceManager || this._popupRedirectResolver) {\n      await this._setRedirectUser(null);\n    }\n\n    // Prevent callbacks from being called again in _updateCurrentUser, as\n    // they were already called in the first line.\n    return this._updateCurrentUser(null, /* skipBeforeStateCallbacks */ true);\n  }\n\n  setPersistence(persistence: Persistence): Promise<void> {\n    return this.queue(async () => {\n      await this.assertedPersistence.setPersistence(_getInstance(persistence));\n    });\n  }\n\n  _getRecaptchaConfig(): RecaptchaConfig | null {\n    if (this.tenantId == null) {\n      return this._agentRecaptchaConfig;\n    } else {\n      return this._tenantRecaptchaConfigs[this.tenantId];\n    }\n  }\n\n  async validatePassword(password: string): Promise<PasswordValidationStatus> {\n    if (!this._getPasswordPolicyInternal()) {\n      await this._updatePasswordPolicy();\n    }\n\n    // Password policy will be defined after fetching.\n    const passwordPolicy: PasswordPolicyInternal =\n      this._getPasswordPolicyInternal()!;\n\n    // Check that the policy schema version is supported by the SDK.\n    // TODO: Update this logic to use a max supported policy schema version once we have multiple schema versions.\n    if (\n      passwordPolicy.schemaVersion !==\n      this.EXPECTED_PASSWORD_POLICY_SCHEMA_VERSION\n    ) {\n      return Promise.reject(\n        this._errorFactory.create(\n          AuthErrorCode.UNSUPPORTED_PASSWORD_POLICY_SCHEMA_VERSION,\n          {}\n        )\n      );\n    }\n\n    return passwordPolicy.validatePassword(password);\n  }\n\n  _getPasswordPolicyInternal(): PasswordPolicyInternal | null {\n    if (this.tenantId === null) {\n      return this._projectPasswordPolicy;\n    } else {\n      return this._tenantPasswordPolicies[this.tenantId];\n    }\n  }\n\n  async _updatePasswordPolicy(): Promise<void> {\n    const response = await _getPasswordPolicy(this);\n\n    const passwordPolicy: PasswordPolicyInternal = new PasswordPolicyImpl(\n      response\n    );\n\n    if (this.tenantId === null) {\n      this._projectPasswordPolicy = passwordPolicy;\n    } else {\n      this._tenantPasswordPolicies[this.tenantId] = passwordPolicy;\n    }\n  }\n\n  _getPersistence(): string {\n    return this.assertedPersistence.persistence.type;\n  }\n\n  _updateErrorMap(errorMap: AuthErrorMap): void {\n    this._errorFactory = new ErrorFactory<AuthErrorCode, AuthErrorParams>(\n      'auth',\n      'Firebase',\n      (errorMap as ErrorMapRetriever)()\n    );\n  }\n\n  onAuthStateChanged(\n    nextOrObserver: NextOrObserver<User>,\n    error?: ErrorFn,\n    completed?: CompleteFn\n  ): Unsubscribe {\n    return this.registerStateListener(\n      this.authStateSubscription,\n      nextOrObserver,\n      error,\n      completed\n    );\n  }\n\n  beforeAuthStateChanged(\n    callback: (user: User | null) => void | Promise<void>,\n    onAbort?: () => void\n  ): Unsubscribe {\n    return this.beforeStateQueue.pushCallback(callback, onAbort);\n  }\n\n  onIdTokenChanged(\n    nextOrObserver: NextOrObserver<User>,\n    error?: ErrorFn,\n    completed?: CompleteFn\n  ): Unsubscribe {\n    return this.registerStateListener(\n      this.idTokenSubscription,\n      nextOrObserver,\n      error,\n      completed\n    );\n  }\n\n  authStateReady(): Promise<void> {\n    return new Promise((resolve, reject) => {\n      if (this.currentUser) {\n        resolve();\n      } else {\n        const unsubscribe = this.onAuthStateChanged(() => {\n          unsubscribe();\n          resolve();\n        }, reject);\n      }\n    });\n  }\n\n  /**\n   * Revokes the given access token. Currently only supports Apple OAuth access tokens.\n   */\n  async revokeAccessToken(token: string): Promise<void> {\n    if (this.currentUser) {\n      const idToken = await this.currentUser.getIdToken();\n      // Generalize this to accept other providers once supported.\n      const request: RevokeTokenRequest = {\n        providerId: 'apple.com',\n        tokenType: TokenType.ACCESS_TOKEN,\n        token,\n        idToken\n      };\n      if (this.tenantId != null) {\n        request.tenantId = this.tenantId;\n      }\n      await revokeToken(this, request);\n    }\n  }\n\n  toJSON(): object {\n    return {\n      apiKey: this.config.apiKey,\n      authDomain: this.config.authDomain,\n      appName: this.name,\n      currentUser: this._currentUser?.toJSON()\n    };\n  }\n\n  async _setRedirectUser(\n    user: UserInternal | null,\n    popupRedirectResolver?: PopupRedirectResolver\n  ): Promise<void> {\n    const redirectManager = await this.getOrInitRedirectPersistenceManager(\n      popupRedirectResolver\n    );\n    return user === null\n      ? redirectManager.removeCurrentUser()\n      : redirectManager.setCurrentUser(user);\n  }\n\n  private async getOrInitRedirectPersistenceManager(\n    popupRedirectResolver?: PopupRedirectResolver\n  ): Promise<PersistenceUserManager> {\n    if (!this.redirectPersistenceManager) {\n      const resolver: PopupRedirectResolverInternal | null =\n        (popupRedirectResolver && _getInstance(popupRedirectResolver)) ||\n        this._popupRedirectResolver;\n      _assert(resolver, this, AuthErrorCode.ARGUMENT_ERROR);\n      this.redirectPersistenceManager = await PersistenceUserManager.create(\n        this,\n        [_getInstance(resolver._redirectPersistence)],\n        KeyName.REDIRECT_USER\n      );\n      this.redirectUser =\n        await this.redirectPersistenceManager.getCurrentUser();\n    }\n\n    return this.redirectPersistenceManager;\n  }\n\n  async _redirectUserForId(id: string): Promise<UserInternal | null> {\n    // Make sure we've cleared any pending persistence actions if we're not in\n    // the initializer\n    if (this._isInitialized) {\n      await this.queue(async () => {});\n    }\n\n    if (this._currentUser?._redirectEventId === id) {\n      return this._currentUser;\n    }\n\n    if (this.redirectUser?._redirectEventId === id) {\n      return this.redirectUser;\n    }\n\n    return null;\n  }\n\n  async _persistUserIfCurrent(user: UserInternal): Promise<void> {\n    if (user === this.currentUser) {\n      return this.queue(async () => this.directlySetCurrentUser(user));\n    }\n  }\n\n  /** Notifies listeners only if the user is current */\n  _notifyListenersIfCurrent(user: UserInternal): void {\n    if (user === this.currentUser) {\n      this.notifyAuthListeners();\n    }\n  }\n\n  _key(): string {\n    return `${this.config.authDomain}:${this.config.apiKey}:${this.name}`;\n  }\n\n  _startProactiveRefresh(): void {\n    this.isProactiveRefreshEnabled = true;\n    if (this.currentUser) {\n      this._currentUser._startProactiveRefresh();\n    }\n  }\n\n  _stopProactiveRefresh(): void {\n    this.isProactiveRefreshEnabled = false;\n    if (this.currentUser) {\n      this._currentUser._stopProactiveRefresh();\n    }\n  }\n\n  /** Returns the current user cast as the internal type */\n  get _currentUser(): UserInternal {\n    return this.currentUser as UserInternal;\n  }\n\n  private notifyAuthListeners(): void {\n    if (!this._isInitialized) {\n      return;\n    }\n\n    this.idTokenSubscription.next(this.currentUser);\n\n    const currentUid = this.currentUser?.uid ?? null;\n    if (this.lastNotifiedUid !== currentUid) {\n      this.lastNotifiedUid = currentUid;\n      this.authStateSubscription.next(this.currentUser);\n    }\n  }\n\n  private registerStateListener(\n    subscription: Subscription<User>,\n    nextOrObserver: NextOrObserver<User>,\n    error?: ErrorFn,\n    completed?: CompleteFn\n  ): Unsubscribe {\n    if (this._deleted) {\n      return () => {};\n    }\n\n    const cb =\n      typeof nextOrObserver === 'function'\n        ? nextOrObserver\n        : nextOrObserver.next.bind(nextOrObserver);\n\n    let isUnsubscribed = false;\n\n    const promise = this._isInitialized\n      ? Promise.resolve()\n      : this._initializationPromise;\n    _assert(promise, this, AuthErrorCode.INTERNAL_ERROR);\n    // The callback needs to be called asynchronously per the spec.\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    promise.then(() => {\n      if (isUnsubscribed) {\n        return;\n      }\n      cb(this.currentUser);\n    });\n\n    if (typeof nextOrObserver === 'function') {\n      const unsubscribe = subscription.addObserver(\n        nextOrObserver,\n        error,\n        completed\n      );\n      return () => {\n        isUnsubscribed = true;\n        unsubscribe();\n      };\n    } else {\n      const unsubscribe = subscription.addObserver(nextOrObserver);\n      return () => {\n        isUnsubscribed = true;\n        unsubscribe();\n      };\n    }\n  }\n\n  /**\n   * Unprotected (from race conditions) method to set the current user. This\n   * should only be called from within a queued callback. This is necessary\n   * because the queue shouldn't rely on another queued callback.\n   */\n  private async directlySetCurrentUser(\n    user: UserInternal | null\n  ): Promise<void> {\n    if (this.currentUser && this.currentUser !== user) {\n      this._currentUser._stopProactiveRefresh();\n    }\n    if (user && this.isProactiveRefreshEnabled) {\n      user._startProactiveRefresh();\n    }\n\n    this.currentUser = user;\n\n    if (user) {\n      await this.assertedPersistence.setCurrentUser(user);\n    } else {\n      await this.assertedPersistence.removeCurrentUser();\n    }\n  }\n\n  private queue(action: AsyncAction): Promise<void> {\n    // In case something errors, the callback still should be called in order\n    // to keep the promise chain alive\n    this.operations = this.operations.then(action, action);\n    return this.operations;\n  }\n\n  private get assertedPersistence(): PersistenceUserManager {\n    _assert(this.persistenceManager, this, AuthErrorCode.INTERNAL_ERROR);\n    return this.persistenceManager;\n  }\n\n  private frameworks: string[] = [];\n  private clientVersion: string;\n  _logFramework(framework: string): void {\n    if (!framework || this.frameworks.includes(framework)) {\n      return;\n    }\n    this.frameworks.push(framework);\n\n    // Sort alphabetically so that \"FirebaseCore-web,FirebaseUI-web\" and\n    // \"FirebaseUI-web,FirebaseCore-web\" aren't viewed as different.\n    this.frameworks.sort();\n    this.clientVersion = _getClientVersion(\n      this.config.clientPlatform,\n      this._getFrameworks()\n    );\n  }\n  _getFrameworks(): readonly string[] {\n    return this.frameworks;\n  }\n  async _getAdditionalHeaders(): Promise<Record<string, string>> {\n    // Additional headers on every request\n    const headers: Record<string, string> = {\n      [HttpHeader.X_CLIENT_VERSION]: this.clientVersion\n    };\n\n    if (this.app.options.appId) {\n      headers[HttpHeader.X_FIREBASE_GMPID] = this.app.options.appId;\n    }\n\n    // If the heartbeat service exists, add the heartbeat string\n    const heartbeatsHeader = await this.heartbeatServiceProvider\n      .getImmediate({\n        optional: true\n      })\n      ?.getHeartbeatsHeader();\n    if (heartbeatsHeader) {\n      headers[HttpHeader.X_FIREBASE_CLIENT] = heartbeatsHeader;\n    }\n\n    // If the App Check service exists, add the App Check token in the headers\n    const appCheckToken = await this._getAppCheckToken();\n    if (appCheckToken) {\n      headers[HttpHeader.X_FIREBASE_APP_CHECK] = appCheckToken;\n    }\n\n    return headers;\n  }\n\n  async _getAppCheckToken(): Promise<string | undefined> {\n    const appCheckTokenResult = await this.appCheckServiceProvider\n      .getImmediate({ optional: true })\n      ?.getToken();\n    if (appCheckTokenResult?.error) {\n      // Context: appCheck.getToken() will never throw even if an error happened.\n      // In the error case, a dummy token will be returned along with an error field describing\n      // the error. In general, we shouldn't care about the error condition and just use\n      // the token (actual or dummy) to send requests.\n      _logWarn(\n        `Error while retrieving App Check token: ${appCheckTokenResult.error}`\n      );\n    }\n    return appCheckTokenResult?.token;\n  }\n}\n\n/**\n * Method to be used to cast down to our private implmentation of Auth.\n * It will also handle unwrapping from the compat type if necessary\n *\n * @param auth Auth object passed in from developer\n */\nexport function _castAuth(auth: Auth): AuthInternal {\n  return getModularInstance(auth) as AuthInternal;\n}\n\n/** Helper class to wrap subscriber logic */\nclass Subscription<T> {\n  private observer: Observer<T | null> | null = null;\n  readonly addObserver: Subscribe<T | null> = createSubscribe(\n    observer => (this.observer = observer)\n  );\n\n  constructor(readonly auth: AuthInternal) {}\n\n  get next(): NextFn<T | null> {\n    _assert(this.observer, this.auth, AuthErrorCode.INTERNAL_ERROR);\n    return this.observer.next.bind(this.observer);\n  }\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AuthErrorCode } from '../core/errors';\nimport { _createError } from '../core/util/assert';\n\nfunction getScriptParentElement(): HTMLDocument | HTMLHeadElement {\n  return document.getElementsByTagName('head')?.[0] ?? document;\n}\n\nexport function _loadJS(url: string): Promise<Event> {\n  // TODO: consider adding timeout support & cancellation\n  return new Promise((resolve, reject) => {\n    const el = document.createElement('script');\n    el.setAttribute('src', url);\n    el.onload = resolve;\n    el.onerror = e => {\n      const error = _createError(AuthErrorCode.INTERNAL_ERROR);\n      error.customData = e as unknown as Record<string, unknown>;\n      reject(error);\n    };\n    el.type = 'text/javascript';\n    el.charset = 'UTF-8';\n    getScriptParentElement().appendChild(el);\n  });\n}\n\nexport function _generateCallbackName(prefix: string): string {\n  return `__${prefix}${Math.floor(Math.random() * 1000000)}`;\n}\n", "/* eslint-disable @typescript-eslint/no-require-imports */\n/**\n * @license\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { isEnterprise, RecaptchaConfig } from './recaptcha';\nimport { getRecaptchaConfig } from '../../api/authentication/recaptcha';\nimport {\n  RecaptchaClientType,\n  RecaptchaVersion,\n  RecaptchaActionName,\n  RecaptchaProvider\n} from '../../api';\n\nimport { Auth } from '../../model/public_types';\nimport { AuthInternal } from '../../model/auth';\nimport { _castAuth } from '../../core/auth/auth_impl';\nimport * as jsHelpers from '../load_js';\nimport { AuthErrorCode } from '../../core/errors';\n\nconst RECAPTCHA_ENTERPRISE_URL =\n  'https://www.google.com/recaptcha/enterprise.js?render=';\n\nexport const RECAPTCHA_ENTERPRISE_VERIFIER_TYPE = 'recaptcha-enterprise';\nexport const FAKE_TOKEN = 'NO_RECAPTCHA';\n\nexport class RecaptchaEnterpriseVerifier {\n  /**\n   * Identifies the type of application verifier (e.g. \"recaptcha-enterprise\").\n   */\n  readonly type = RECAPTCHA_ENTERPRISE_VERIFIER_TYPE;\n\n  private readonly auth: AuthInternal;\n\n  /**\n   *\n   * @param authExtern - The corresponding Firebase {@link Auth} instance.\n   *\n   */\n  constructor(authExtern: Auth) {\n    this.auth = _castAuth(authExtern);\n  }\n\n  /**\n   * Executes the verification process.\n   *\n   * @returns A Promise for a token that can be used to assert the validity of a request.\n   */\n  async verify(\n    action: string = 'verify',\n    forceRefresh = false\n  ): Promise<string> {\n    async function retrieveSiteKey(auth: AuthInternal): Promise<string> {\n      if (!forceRefresh) {\n        if (auth.tenantId == null && auth._agentRecaptchaConfig != null) {\n          return auth._agentRecaptchaConfig.siteKey;\n        }\n        if (\n          auth.tenantId != null &&\n          auth._tenantRecaptchaConfigs[auth.tenantId] !== undefined\n        ) {\n          return auth._tenantRecaptchaConfigs[auth.tenantId].siteKey;\n        }\n      }\n\n      return new Promise<string>(async (resolve, reject) => {\n        getRecaptchaConfig(auth, {\n          clientType: RecaptchaClientType.WEB,\n          version: RecaptchaVersion.ENTERPRISE\n        })\n          .then(response => {\n            if (response.recaptchaKey === undefined) {\n              reject(new Error('recaptcha Enterprise site key undefined'));\n            } else {\n              const config = new RecaptchaConfig(response);\n              if (auth.tenantId == null) {\n                auth._agentRecaptchaConfig = config;\n              } else {\n                auth._tenantRecaptchaConfigs[auth.tenantId] = config;\n              }\n              return resolve(config.siteKey);\n            }\n          })\n          .catch(error => {\n            reject(error);\n          });\n      });\n    }\n\n    function retrieveRecaptchaToken(\n      siteKey: string,\n      resolve: (value: string | PromiseLike<string>) => void,\n      reject: (reason?: unknown) => void\n    ): void {\n      const grecaptcha = window.grecaptcha;\n      if (isEnterprise(grecaptcha)) {\n        grecaptcha.enterprise.ready(() => {\n          grecaptcha.enterprise\n            .execute(siteKey, { action })\n            .then(token => {\n              resolve(token);\n            })\n            .catch(() => {\n              resolve(FAKE_TOKEN);\n            });\n        });\n      } else {\n        reject(Error('No reCAPTCHA enterprise script loaded.'));\n      }\n    }\n\n    return new Promise<string>((resolve, reject) => {\n      retrieveSiteKey(this.auth)\n        .then(siteKey => {\n          if (!forceRefresh && isEnterprise(window.grecaptcha)) {\n            retrieveRecaptchaToken(siteKey, resolve, reject);\n          } else {\n            if (typeof window === 'undefined') {\n              reject(\n                new Error('RecaptchaVerifier is only supported in browser')\n              );\n              return;\n            }\n            jsHelpers\n              ._loadJS(RECAPTCHA_ENTERPRISE_URL + siteKey)\n              .then(() => {\n                retrieveRecaptchaToken(siteKey, resolve, reject);\n              })\n              .catch(error => {\n                reject(error);\n              });\n          }\n        })\n        .catch(error => {\n          reject(error);\n        });\n    });\n  }\n}\n\nexport async function injectRecaptchaFields<T>(\n  auth: AuthInternal,\n  request: T,\n  action: RecaptchaActionName,\n  captchaResp = false\n): Promise<T> {\n  const verifier = new RecaptchaEnterpriseVerifier(auth);\n  let captchaResponse;\n  try {\n    captchaResponse = await verifier.verify(action);\n  } catch (error) {\n    captchaResponse = await verifier.verify(action, true);\n  }\n  const newRequest = { ...request };\n  if (!captchaResp) {\n    Object.assign(newRequest, { captchaResponse });\n  } else {\n    Object.assign(newRequest, { 'captchaResp': captchaResponse });\n  }\n  Object.assign(newRequest, { 'clientType': RecaptchaClientType.WEB });\n  Object.assign(newRequest, {\n    'recaptchaVersion': RecaptchaVersion.ENTERPRISE\n  });\n  return newRequest;\n}\n\ntype ActionMethod<TRequest, TResponse> = (\n  auth: Auth,\n  request: TRequest\n) => Promise<TResponse>;\n\nexport async function handleRecaptchaFlow<TRequest, TResponse>(\n  authInstance: AuthInternal,\n  request: TRequest,\n  actionName: RecaptchaActionName,\n  actionMethod: ActionMethod<TRequest, TResponse>\n): Promise<TResponse> {\n  if (\n    authInstance\n      ._getRecaptchaConfig()\n      ?.isProviderEnabled(RecaptchaProvider.EMAIL_PASSWORD_PROVIDER)\n  ) {\n    const requestWithRecaptcha = await injectRecaptchaFields(\n      authInstance,\n      request,\n      actionName,\n      actionName === RecaptchaActionName.GET_OOB_CODE\n    );\n    return actionMethod(authInstance, requestWithRecaptcha);\n  } else {\n    return actionMethod(authInstance, request).catch(async error => {\n      if (error.code === `auth/${AuthErrorCode.MISSING_RECAPTCHA_TOKEN}`) {\n        console.log(\n          `${actionName} is protected by reCAPTCHA Enterprise for this project. Automatically triggering the reCAPTCHA flow and restarting the flow.`\n        );\n        const requestWithRecaptcha = await injectRecaptchaFields(\n          authInstance,\n          request,\n          actionName,\n          actionName === RecaptchaActionName.GET_OOB_CODE\n        );\n        return actionMethod(authInstance, requestWithRecaptcha);\n      } else {\n        return Promise.reject(error);\n      }\n    });\n  }\n}\n\nexport async function _initializeRecaptchaConfig(auth: Auth): Promise<void> {\n  const authInternal = _castAuth(auth);\n\n  const response = await getRecaptchaConfig(authInternal, {\n    clientType: RecaptchaClientType.WEB,\n    version: RecaptchaVersion.ENTERPRISE\n  });\n\n  const config = new RecaptchaConfig(response);\n  if (authInternal.tenantId == null) {\n    authInternal._agentRecaptchaConfig = config;\n  } else {\n    authInternal._tenantRecaptchaConfigs[authInternal.tenantId] = config;\n  }\n\n  if (config.isProviderEnabled(RecaptchaProvider.EMAIL_PASSWORD_PROVIDER)) {\n    const verifier = new RecaptchaEnterpriseVerifier(authInternal);\n    void verifier.verify();\n  }\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { _getProvider, FirebaseApp } from '@firebase/app';\nimport { deepEqual } from '@firebase/util';\nimport { Auth, Dependencies } from '../../model/public_types';\n\nimport { AuthErrorCode } from '../errors';\nimport { PersistenceInternal } from '../persistence';\nimport { _fail } from '../util/assert';\nimport { _getInstance } from '../util/instantiator';\nimport { AuthImpl } from './auth_impl';\n\n/**\n * Initializes an {@link Auth} instance with fine-grained control over\n * {@link Dependencies}.\n *\n * @remarks\n *\n * This function allows more control over the {@link Auth} instance than\n * {@link getAuth}. `getAuth` uses platform-specific defaults to supply\n * the {@link Dependencies}. In general, `getAuth` is the easiest way to\n * initialize Auth and works for most use cases. Use `initializeAuth` if you\n * need control over which persistence layer is used, or to minimize bundle\n * size if you're not using either `signInWithPopup` or `signInWithRedirect`.\n *\n * For example, if your app only uses anonymous accounts and you only want\n * accounts saved for the current session, initialize `Auth` with:\n *\n * ```js\n * const auth = initializeAuth(app, {\n *   persistence: browserSessionPersistence,\n *   popupRedirectResolver: undefined,\n * });\n * ```\n *\n * @public\n */\nexport function initializeAuth(app: FirebaseApp, deps?: Dependencies): Auth {\n  const provider = _getProvider(app, 'auth');\n\n  if (provider.isInitialized()) {\n    const auth = provider.getImmediate() as AuthImpl;\n    const initialOptions = provider.getOptions() as Dependencies;\n    if (deepEqual(initialOptions, deps ?? {})) {\n      return auth;\n    } else {\n      _fail(auth, AuthErrorCode.ALREADY_INITIALIZED);\n    }\n  }\n\n  const auth = provider.initialize({ options: deps }) as AuthImpl;\n\n  return auth;\n}\n\nexport function _initializeAuthInstance(\n  auth: AuthImpl,\n  deps?: Dependencies\n): void {\n  const persistence = deps?.persistence || [];\n  const hierarchy = (\n    Array.isArray(persistence) ? persistence : [persistence]\n  ).map<PersistenceInternal>(_getInstance);\n  if (deps?.errorMap) {\n    auth._updateErrorMap(deps.errorMap);\n  }\n\n  // This promise is intended to float; auth initialization happens in the\n  // background, meanwhile the auth object may be used by the app.\n  // eslint-disable-next-line @typescript-eslint/no-floating-promises\n  auth._initializeWithPersistence(hierarchy, deps?.popupRedirectResolver);\n}\n", "/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Auth } from '../../model/public_types';\nimport { AuthErrorCode } from '../errors';\nimport { _assert } from '../util/assert';\nimport { _castAuth } from './auth_impl';\n\n/**\n * Changes the {@link Auth} instance to communicate with the Firebase Auth Emulator, instead of production\n * Firebase Auth services.\n *\n * @remarks\n * This must be called synchronously immediately following the first call to\n * {@link initializeAuth}.  Do not use with production credentials as emulator\n * traffic is not encrypted.\n *\n *\n * @example\n * ```javascript\n * connectAuthEmulator(auth, 'http://127.0.0.1:9099', { disableWarnings: true });\n * ```\n *\n * @param auth - The {@link Auth} instance.\n * @param url - The URL at which the emulator is running (eg, 'http://localhost:9099').\n * @param options - Optional. `options.disableWarnings` defaults to `false`. Set it to\n * `true` to disable the warning banner attached to the DOM.\n *\n * @public\n */\nexport function connectAuthEmulator(\n  auth: Auth,\n  url: string,\n  options?: { disableWarnings: boolean }\n): void {\n  const authInternal = _castAuth(auth);\n  _assert(\n    authInternal._canInitEmulator,\n    authInternal,\n    AuthErrorCode.EMULATOR_CONFIG_FAILED\n  );\n\n  _assert(\n    /^https?:\\/\\//.test(url),\n    authInternal,\n    AuthErrorCode.INVALID_EMULATOR_SCHEME\n  );\n\n  const disableWarnings = !!options?.disableWarnings;\n\n  const protocol = extractProtocol(url);\n  const { host, port } = extractHostAndPort(url);\n  const portStr = port === null ? '' : `:${port}`;\n\n  // Always replace path with \"/\" (even if input url had no path at all, or had a different one).\n  authInternal.config.emulator = { url: `${protocol}//${host}${portStr}/` };\n  authInternal.settings.appVerificationDisabledForTesting = true;\n  authInternal.emulatorConfig = Object.freeze({\n    host,\n    port,\n    protocol: protocol.replace(':', ''),\n    options: Object.freeze({ disableWarnings })\n  });\n\n  if (!disableWarnings) {\n    emitEmulatorWarning();\n  }\n}\n\nfunction extractProtocol(url: string): string {\n  const protocolEnd = url.indexOf(':');\n  return protocolEnd < 0 ? '' : url.substr(0, protocolEnd + 1);\n}\n\nfunction extractHostAndPort(url: string): {\n  host: string;\n  port: number | null;\n} {\n  const protocol = extractProtocol(url);\n  const authority = /(\\/\\/)?([^?#/]+)/.exec(url.substr(protocol.length)); // Between // and /, ? or #.\n  if (!authority) {\n    return { host: '', port: null };\n  }\n  const hostAndPort = authority[2].split('@').pop() || ''; // Strip out \"username:password@\".\n  const bracketedIPv6 = /^(\\[[^\\]]+\\])(:|$)/.exec(hostAndPort);\n  if (bracketedIPv6) {\n    const host = bracketedIPv6[1];\n    return { host, port: parsePort(hostAndPort.substr(host.length + 1)) };\n  } else {\n    const [host, port] = hostAndPort.split(':');\n    return { host, port: parsePort(port) };\n  }\n}\n\nfunction parsePort(portStr: string): number | null {\n  if (!portStr) {\n    return null;\n  }\n  const port = Number(portStr);\n  if (isNaN(port)) {\n    return null;\n  }\n  return port;\n}\n\nfunction emitEmulatorWarning(): void {\n  function attachBanner(): void {\n    const el = document.createElement('p');\n    const sty = el.style;\n    el.innerText =\n      'Running in emulator mode. Do not use with production credentials.';\n    sty.position = 'fixed';\n    sty.width = '100%';\n    sty.backgroundColor = '#ffffff';\n    sty.border = '.1em solid #000000';\n    sty.color = '#b50000';\n    sty.bottom = '0px';\n    sty.left = '0px';\n    sty.margin = '0px';\n    sty.zIndex = '10000';\n    sty.textAlign = 'center';\n    el.classList.add('firebase-emulator-warning');\n    document.body.appendChild(el);\n  }\n\n  if (typeof console !== 'undefined' && typeof console.info === 'function') {\n    console.info(\n      'WARNING: You are using the Auth Emulator,' +\n        ' which is intended for local testing only.  Do not use with' +\n        ' production credentials.'\n    );\n  }\n  if (typeof window !== 'undefined' && typeof document !== 'undefined') {\n    if (document.readyState === 'loading') {\n      window.addEventListener('DOMContentLoaded', attachBanner);\n    } else {\n      attachBanner();\n    }\n  }\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { PhoneOrOauthTokenResponse } from '../../api/authentication/mfa';\nimport { AuthInternal } from '../../model/auth';\nimport { IdTokenResponse } from '../../model/id_token';\nimport { debugFail } from '../util/assert';\n\n/**\n * Interface that represents the credentials returned by an {@link AuthProvider}.\n *\n * @remarks\n * Implementations specify the details about each auth provider's credential requirements.\n *\n * @public\n */\nexport class AuthCredential {\n  /** @internal */\n  protected constructor(\n    /**\n     * The authentication provider ID for the credential.\n     *\n     * @remarks\n     * For example, 'facebook.com', or 'google.com'.\n     */\n    readonly providerId: string,\n    /**\n     * The authentication sign in method for the credential.\n     *\n     * @remarks\n     * For example, {@link SignInMethod}.EMAIL_PASSWORD, or\n     * {@link SignInMethod}.EMAIL_LINK. This corresponds to the sign-in method\n     * identifier as returned in {@link fetchSignInMethodsForEmail}.\n     */\n    readonly signInMethod: string\n  ) {}\n\n  /**\n   * Returns a JSON-serializable representation of this object.\n   *\n   * @returns a JSON-serializable representation of this object.\n   */\n  toJSON(): object {\n    return debugFail('not implemented');\n  }\n\n  /** @internal */\n  _getIdTokenResponse(_auth: AuthInternal): Promise<PhoneOrOauthTokenResponse> {\n    return debugFail('not implemented');\n  }\n  /** @internal */\n  _linkToIdToken(\n    _auth: AuthInternal,\n    _idToken: string\n  ): Promise<IdTokenResponse> {\n    return debugFail('not implemented');\n  }\n  /** @internal */\n  _getReauthenticationResolver(_auth: AuthInternal): Promise<IdTokenResponse> {\n    return debugFail('not implemented');\n  }\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ActionCodeOperation, Auth } from '../../model/public_types';\n\nimport {\n  Endpoint,\n  HttpMethod,\n  _addTidIfNecessary,\n  _performApiRequest\n} from '../index';\nimport { IdTokenResponse } from '../../model/id_token';\nimport { MfaEnrollment } from './mfa';\nimport { SignUpRequest, SignUpResponse } from '../authentication/sign_up';\n\nexport interface ResetPasswordRequest {\n  oobCode: string;\n  newPassword?: string;\n  tenantId?: string;\n}\n\nexport interface ResetPasswordResponse {\n  email: string;\n  newEmail?: string;\n  requestType?: ActionCodeOperation;\n  mfaInfo?: MfaEnrollment;\n}\n\nexport async function resetPassword(\n  auth: Auth,\n  request: ResetPasswordRequest\n): Promise<ResetPasswordResponse> {\n  return _performApiRequest<ResetPasswordRequest, ResetPasswordResponse>(\n    auth,\n    HttpMethod.POST,\n    Endpoint.RESET_PASSWORD,\n    _addTidIfNecessary(auth, request)\n  );\n}\nexport interface UpdateEmailPasswordRequest {\n  idToken: string;\n  returnSecureToken?: boolean;\n  email?: string;\n  password?: string;\n}\n\nexport interface UpdateEmailPasswordResponse extends IdTokenResponse {}\n\nexport async function updateEmailPassword(\n  auth: Auth,\n  request: UpdateEmailPasswordRequest\n): Promise<UpdateEmailPasswordResponse> {\n  return _performApiRequest<\n    UpdateEmailPasswordRequest,\n    UpdateEmailPasswordResponse\n  >(auth, HttpMethod.POST, Endpoint.SET_ACCOUNT_INFO, request);\n}\n\n// Used for linking an email/password account to an existing idToken. Uses the same request/response\n// format as updateEmailPassword.\nexport async function linkEmailPassword(\n  auth: Auth,\n  request: SignUpRequest\n): Promise<SignUpResponse> {\n  return _performApiRequest<SignUpRequest, SignUpResponse>(\n    auth,\n    HttpMethod.POST,\n    Endpoint.SIGN_UP,\n    request\n  );\n}\n\nexport interface ApplyActionCodeRequest {\n  oobCode: string;\n  tenantId?: string;\n}\n\nexport interface ApplyActionCodeResponse {}\n\nexport async function applyActionCode(\n  auth: Auth,\n  request: ApplyActionCodeRequest\n): Promise<ApplyActionCodeResponse> {\n  return _performApiRequest<ApplyActionCodeRequest, ApplyActionCodeResponse>(\n    auth,\n    HttpMethod.POST,\n    Endpoint.SET_ACCOUNT_INFO,\n    _addTidIfNecessary(auth, request)\n  );\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ActionCodeOperation, Auth } from '../../model/public_types';\n\nimport {\n  Endpoint,\n  HttpMethod,\n  RecaptchaClientType,\n  RecaptchaVersion,\n  _addTidIfNecessary,\n  _performApiRequest,\n  _performSignInRequest\n} from '../index';\nimport { IdToken, IdTokenResponse } from '../../model/id_token';\n\nexport interface SignInWithPasswordRequest {\n  returnSecureToken?: boolean;\n  email: string;\n  password: string;\n  tenantId?: string;\n  captchaResponse?: string;\n  clientType?: RecaptchaClientType;\n  recaptchaVersion?: RecaptchaVersion;\n}\n\nexport interface SignInWithPasswordResponse extends IdTokenResponse {\n  email: string;\n  displayName: string;\n}\n\nexport async function signInWithPassword(\n  auth: Auth,\n  request: SignInWithPasswordRequest\n): Promise<SignInWithPasswordResponse> {\n  return _performSignInRequest<\n    SignInWithPasswordRequest,\n    SignInWithPasswordResponse\n  >(\n    auth,\n    HttpMethod.POST,\n    Endpoint.SIGN_IN_WITH_PASSWORD,\n    _addTidIfNecessary(auth, request)\n  );\n}\n\nexport interface GetOobCodeRequest {\n  email?: string; // Everything except VERIFY_AND_CHANGE_EMAIL\n  continueUrl?: string;\n  iOSBundleId?: string;\n  iosAppStoreId?: string;\n  androidPackageName?: string;\n  androidInstallApp?: boolean;\n  androidMinimumVersionCode?: string;\n  canHandleCodeInApp?: boolean;\n  dynamicLinkDomain?: string;\n  tenantId?: string;\n  targetProjectid?: string;\n}\n\nexport interface VerifyEmailRequest extends GetOobCodeRequest {\n  requestType: ActionCodeOperation.VERIFY_EMAIL;\n  idToken: IdToken;\n}\n\nexport interface PasswordResetRequest extends GetOobCodeRequest {\n  requestType: ActionCodeOperation.PASSWORD_RESET;\n  email: string;\n  captchaResp?: string;\n  clientType?: RecaptchaClientType;\n  recaptchaVersion?: RecaptchaVersion;\n}\n\nexport interface EmailSignInRequest extends GetOobCodeRequest {\n  requestType: ActionCodeOperation.EMAIL_SIGNIN;\n  email: string;\n  captchaResp?: string;\n  clientType?: RecaptchaClientType;\n  recaptchaVersion?: RecaptchaVersion;\n}\n\nexport interface VerifyAndChangeEmailRequest extends GetOobCodeRequest {\n  requestType: ActionCodeOperation.VERIFY_AND_CHANGE_EMAIL;\n  idToken: IdToken;\n  newEmail: string;\n}\n\ninterface GetOobCodeResponse {\n  email: string;\n}\n\nexport interface VerifyEmailResponse extends GetOobCodeResponse {}\nexport interface PasswordResetResponse extends GetOobCodeResponse {}\nexport interface EmailSignInResponse extends GetOobCodeResponse {}\nexport interface VerifyAndChangeEmailResponse extends GetOobCodeRequest {}\n\nasync function sendOobCode(\n  auth: Auth,\n  request: GetOobCodeRequest\n): Promise<GetOobCodeResponse> {\n  return _performApiRequest<GetOobCodeRequest, GetOobCodeResponse>(\n    auth,\n    HttpMethod.POST,\n    Endpoint.SEND_OOB_CODE,\n    _addTidIfNecessary(auth, request)\n  );\n}\n\nexport async function sendEmailVerification(\n  auth: Auth,\n  request: VerifyEmailRequest\n): Promise<VerifyEmailResponse> {\n  return sendOobCode(auth, request);\n}\n\nexport async function sendPasswordResetEmail(\n  auth: Auth,\n  request: PasswordResetRequest\n): Promise<PasswordResetResponse> {\n  return sendOobCode(auth, request);\n}\n\nexport async function sendSignInLinkToEmail(\n  auth: Auth,\n  request: EmailSignInRequest\n): Promise<EmailSignInResponse> {\n  return sendOobCode(auth, request);\n}\n\nexport async function verifyAndChangeEmail(\n  auth: Auth,\n  request: VerifyAndChangeEmailRequest\n): Promise<VerifyAndChangeEmailResponse> {\n  return sendOobCode(auth, request);\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  _performSignInRequest,\n  Endpoint,\n  HttpMethod,\n  _addTidIfNecessary\n} from '../index';\nimport { IdTokenResponse } from '../../model/id_token';\nimport { Auth } from '../../model/public_types';\n\nexport interface SignInWithEmailLinkRequest {\n  email: string;\n  oobCode: string;\n  tenantId?: string;\n}\n\nexport interface SignInWithEmailLinkResponse extends IdTokenResponse {\n  email: string;\n  isNewUser: boolean;\n}\n\nexport async function signInWithEmailLink(\n  auth: Auth,\n  request: SignInWithEmailLinkRequest\n): Promise<SignInWithEmailLinkResponse> {\n  return _performSignInRequest<\n    SignInWithEmailLinkRequest,\n    SignInWithEmailLinkResponse\n  >(\n    auth,\n    HttpMethod.POST,\n    Endpoint.SIGN_IN_WITH_EMAIL_LINK,\n    _addTidIfNecessary(auth, request)\n  );\n}\n\nexport interface SignInWithEmailLinkForLinkingRequest\n  extends SignInWithEmailLinkRequest {\n  idToken: string;\n}\n\nexport async function signInWithEmailLinkForLinking(\n  auth: Auth,\n  request: SignInWithEmailLinkForLinkingRequest\n): Promise<SignInWithEmailLinkResponse> {\n  return _performSignInRequest<\n    SignInWithEmailLinkForLinkingRequest,\n    SignInWithEmailLinkResponse\n  >(\n    auth,\n    HttpMethod.POST,\n    Endpoint.SIGN_IN_WITH_EMAIL_LINK,\n    _addTidIfNecessary(auth, request)\n  );\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ProviderId, SignInMethod } from '../../model/enums';\n\nimport { linkEmailPassword } from '../../api/account_management/email_and_password';\nimport {\n  signInWithPassword,\n  SignInWithPasswordRequest\n} from '../../api/authentication/email_and_password';\nimport {\n  signInWithEmailLink,\n  signInWithEmailLinkForLinking\n} from '../../api/authentication/email_link';\nimport { AuthInternal } from '../../model/auth';\nimport { IdTokenResponse } from '../../model/id_token';\nimport { AuthErrorCode } from '../errors';\nimport { _fail } from '../util/assert';\nimport { AuthCredential } from './auth_credential';\nimport { handleRecaptchaFlow } from '../../platform_browser/recaptcha/recaptcha_enterprise_verifier';\nimport { RecaptchaActionName, RecaptchaClientType } from '../../api';\nimport { SignUpRequest } from '../../api/authentication/sign_up';\n/**\n * Interface that represents the credentials returned by {@link EmailAuthProvider} for\n * {@link ProviderId}.PASSWORD\n *\n * @remarks\n * Covers both {@link SignInMethod}.EMAIL_PASSWORD and\n * {@link SignInMethod}.EMAIL_LINK.\n *\n * @public\n */\nexport class EmailAuthCredential extends AuthCredential {\n  /** @internal */\n  private constructor(\n    /** @internal */\n    readonly _email: string,\n    /** @internal */\n    readonly _password: string,\n    signInMethod: SignInMethod,\n    /** @internal */\n    readonly _tenantId: string | null = null\n  ) {\n    super(ProviderId.PASSWORD, signInMethod);\n  }\n\n  /** @internal */\n  static _fromEmailAndPassword(\n    email: string,\n    password: string\n  ): EmailAuthCredential {\n    return new EmailAuthCredential(\n      email,\n      password,\n      SignInMethod.EMAIL_PASSWORD\n    );\n  }\n\n  /** @internal */\n  static _fromEmailAndCode(\n    email: string,\n    oobCode: string,\n    tenantId: string | null = null\n  ): EmailAuthCredential {\n    return new EmailAuthCredential(\n      email,\n      oobCode,\n      SignInMethod.EMAIL_LINK,\n      tenantId\n    );\n  }\n\n  /** {@inheritdoc AuthCredential.toJSON} */\n  toJSON(): object {\n    return {\n      email: this._email,\n      password: this._password,\n      signInMethod: this.signInMethod,\n      tenantId: this._tenantId\n    };\n  }\n\n  /**\n   * Static method to deserialize a JSON representation of an object into an {@link  AuthCredential}.\n   *\n   * @param json - Either `object` or the stringified representation of the object. When string is\n   * provided, `JSON.parse` would be called first.\n   *\n   * @returns If the JSON input does not represent an {@link AuthCredential}, null is returned.\n   */\n  static fromJSON(json: object | string): EmailAuthCredential | null {\n    const obj = typeof json === 'string' ? JSON.parse(json) : json;\n    if (obj?.email && obj?.password) {\n      if (obj.signInMethod === SignInMethod.EMAIL_PASSWORD) {\n        return this._fromEmailAndPassword(obj.email, obj.password);\n      } else if (obj.signInMethod === SignInMethod.EMAIL_LINK) {\n        return this._fromEmailAndCode(obj.email, obj.password, obj.tenantId);\n      }\n    }\n    return null;\n  }\n\n  /** @internal */\n  async _getIdTokenResponse(auth: AuthInternal): Promise<IdTokenResponse> {\n    switch (this.signInMethod) {\n      case SignInMethod.EMAIL_PASSWORD:\n        const request: SignInWithPasswordRequest = {\n          returnSecureToken: true,\n          email: this._email,\n          password: this._password,\n          clientType: RecaptchaClientType.WEB\n        };\n        return handleRecaptchaFlow(\n          auth,\n          request,\n          RecaptchaActionName.SIGN_IN_WITH_PASSWORD,\n          signInWithPassword\n        );\n      case SignInMethod.EMAIL_LINK:\n        return signInWithEmailLink(auth, {\n          email: this._email,\n          oobCode: this._password\n        });\n      default:\n        _fail(auth, AuthErrorCode.INTERNAL_ERROR);\n    }\n  }\n\n  /** @internal */\n  async _linkToIdToken(\n    auth: AuthInternal,\n    idToken: string\n  ): Promise<IdTokenResponse> {\n    switch (this.signInMethod) {\n      case SignInMethod.EMAIL_PASSWORD:\n        const request: SignUpRequest = {\n          idToken,\n          returnSecureToken: true,\n          email: this._email,\n          password: this._password,\n          clientType: RecaptchaClientType.WEB\n        };\n        return handleRecaptchaFlow(\n          auth,\n          request,\n          RecaptchaActionName.SIGN_UP_PASSWORD,\n          linkEmailPassword\n        );\n      case SignInMethod.EMAIL_LINK:\n        return signInWithEmailLinkForLinking(auth, {\n          idToken,\n          email: this._email,\n          oobCode: this._password\n        });\n      default:\n        _fail(auth, AuthErrorCode.INTERNAL_ERROR);\n    }\n  }\n\n  /** @internal */\n  _getReauthenticationResolver(auth: AuthInternal): Promise<IdTokenResponse> {\n    return this._getIdTokenResponse(auth);\n  }\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Endpoint,\n  HttpMethod,\n  _addTidIfNecessary,\n  _performSignInRequest\n} from '../index';\nimport { IdToken, IdTokenResponse } from '../../model/id_token';\nimport { Auth } from '../../model/public_types';\n\nexport interface SignInWithIdpRequest {\n  requestUri: string;\n  postBody?: string;\n  sessionId?: string;\n  tenantId?: string;\n  returnSecureToken: boolean;\n  returnIdpCredential?: boolean;\n  idToken?: IdToken;\n  autoCreate?: boolean;\n  pendingToken?: string;\n}\n\n/**\n * @internal\n */\nexport interface SignInWithIdpResponse extends IdTokenResponse {\n  oauthAccessToken?: string;\n  oauthTokenSecret?: string;\n  nonce?: string;\n  oauthIdToken?: string;\n  pendingToken?: string;\n}\n\nexport async function signInWithIdp(\n  auth: Auth,\n  request: SignInWithIdpRequest\n): Promise<SignInWithIdpResponse> {\n  return _performSignInRequest<SignInWithIdpRequest, SignInWithIdpResponse>(\n    auth,\n    HttpMethod.POST,\n    Endpoint.SIGN_IN_WITH_IDP,\n    _addTidIfNecessary(auth, request)\n  );\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { querystring } from '@firebase/util';\n\nimport {\n  signInWithIdp,\n  SignInWithIdpRequest\n} from '../../api/authentication/idp';\nimport { AuthInternal } from '../../model/auth';\nimport { IdTokenResponse } from '../../model/id_token';\nimport { AuthErrorCode } from '../errors';\nimport { _fail } from '../util/assert';\nimport { AuthCredential } from './auth_credential';\n\nconst IDP_REQUEST_URI = 'http://localhost';\n\nexport interface OAuthCredentialParams {\n  // OAuth 2 uses either id token or access token\n  idToken?: string | null;\n  accessToken?: string | null;\n\n  // These fields are used with OAuth 1\n  oauthToken?: string;\n  secret?: string;\n  oauthTokenSecret?: string;\n\n  // Nonce is only set if pendingToken is not present\n  nonce?: string;\n  pendingToken?: string;\n\n  // Utilities\n  providerId: string;\n  signInMethod: string;\n}\n\n/**\n * Represents the OAuth credentials returned by an {@link OAuthProvider}.\n *\n * @remarks\n * Implementations specify the details about each auth provider's credential requirements.\n *\n * @public\n */\nexport class OAuthCredential extends AuthCredential {\n  /**\n   * The OAuth ID token associated with the credential if it belongs to an OIDC provider,\n   * such as `google.com`.\n   * @readonly\n   */\n  idToken?: string;\n  /**\n   * The OAuth access token associated with the credential if it belongs to an\n   * {@link OAuthProvider}, such as `facebook.com`, `twitter.com`, etc.\n   * @readonly\n   */\n  accessToken?: string;\n  /**\n   * The OAuth access token secret associated with the credential if it belongs to an OAuth 1.0\n   * provider, such as `twitter.com`.\n   * @readonly\n   */\n  secret?: string;\n\n  private nonce?: string;\n  private pendingToken: string | null = null;\n\n  /** @internal */\n  static _fromParams(params: OAuthCredentialParams): OAuthCredential {\n    const cred = new OAuthCredential(params.providerId, params.signInMethod);\n\n    if (params.idToken || params.accessToken) {\n      // OAuth 2 and either ID token or access token.\n      if (params.idToken) {\n        cred.idToken = params.idToken;\n      }\n\n      if (params.accessToken) {\n        cred.accessToken = params.accessToken;\n      }\n\n      // Add nonce if available and no pendingToken is present.\n      if (params.nonce && !params.pendingToken) {\n        cred.nonce = params.nonce;\n      }\n\n      if (params.pendingToken) {\n        cred.pendingToken = params.pendingToken;\n      }\n    } else if (params.oauthToken && params.oauthTokenSecret) {\n      // OAuth 1 and OAuth token with token secret\n      cred.accessToken = params.oauthToken;\n      cred.secret = params.oauthTokenSecret;\n    } else {\n      _fail(AuthErrorCode.ARGUMENT_ERROR);\n    }\n\n    return cred;\n  }\n\n  /** {@inheritdoc AuthCredential.toJSON}  */\n  toJSON(): object {\n    return {\n      idToken: this.idToken,\n      accessToken: this.accessToken,\n      secret: this.secret,\n      nonce: this.nonce,\n      pendingToken: this.pendingToken,\n      providerId: this.providerId,\n      signInMethod: this.signInMethod\n    };\n  }\n\n  /**\n   * Static method to deserialize a JSON representation of an object into an\n   * {@link  AuthCredential}.\n   *\n   * @param json - Input can be either Object or the stringified representation of the object.\n   * When string is provided, JSON.parse would be called first.\n   *\n   * @returns If the JSON input does not represent an {@link  AuthCredential}, null is returned.\n   */\n  static fromJSON(json: string | object): OAuthCredential | null {\n    const obj = typeof json === 'string' ? JSON.parse(json) : json;\n    const { providerId, signInMethod, ...rest }: OAuthCredentialParams = obj;\n    if (!providerId || !signInMethod) {\n      return null;\n    }\n\n    const cred = new OAuthCredential(providerId, signInMethod);\n    cred.idToken = rest.idToken || undefined;\n    cred.accessToken = rest.accessToken || undefined;\n    cred.secret = rest.secret;\n    cred.nonce = rest.nonce;\n    cred.pendingToken = rest.pendingToken || null;\n    return cred;\n  }\n\n  /** @internal */\n  _getIdTokenResponse(auth: AuthInternal): Promise<IdTokenResponse> {\n    const request = this.buildRequest();\n    return signInWithIdp(auth, request);\n  }\n\n  /** @internal */\n  _linkToIdToken(\n    auth: AuthInternal,\n    idToken: string\n  ): Promise<IdTokenResponse> {\n    const request = this.buildRequest();\n    request.idToken = idToken;\n    return signInWithIdp(auth, request);\n  }\n\n  /** @internal */\n  _getReauthenticationResolver(auth: AuthInternal): Promise<IdTokenResponse> {\n    const request = this.buildRequest();\n    request.autoCreate = false;\n    return signInWithIdp(auth, request);\n  }\n\n  private buildRequest(): SignInWithIdpRequest {\n    const request: SignInWithIdpRequest = {\n      requestUri: IDP_REQUEST_URI,\n      returnSecureToken: true\n    };\n\n    if (this.pendingToken) {\n      request.pendingToken = this.pendingToken;\n    } else {\n      const postBody: Record<string, string> = {};\n      if (this.idToken) {\n        postBody['id_token'] = this.idToken;\n      }\n      if (this.accessToken) {\n        postBody['access_token'] = this.accessToken;\n      }\n      if (this.secret) {\n        postBody['oauth_token_secret'] = this.secret;\n      }\n\n      postBody['providerId'] = this.providerId;\n      if (this.nonce && !this.pendingToken) {\n        postBody['nonce'] = this.nonce;\n      }\n\n      request.postBody = querystring(postBody);\n    }\n\n    return request;\n  }\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Endpoint,\n  HttpMethod,\n  _addTidIfNecessary,\n  _makeTaggedError,\n  _performApiRequest,\n  _performSignInRequest\n} from '../index';\nimport { AuthErrorCode } from '../../core/errors';\nimport { IdTokenResponse } from '../../model/id_token';\nimport { ServerError, ServerErrorMap } from '../errors';\nimport { Auth } from '../../model/public_types';\n\nexport interface SendPhoneVerificationCodeRequest {\n  phoneNumber: string;\n  recaptchaToken: string;\n  tenantId?: string;\n}\n\nexport interface SendPhoneVerificationCodeResponse {\n  sessionInfo: string;\n}\n\nexport async function sendPhoneVerificationCode(\n  auth: Auth,\n  request: SendPhoneVerificationCodeRequest\n): Promise<SendPhoneVerificationCodeResponse> {\n  return _performApiRequest<\n    SendPhoneVerificationCodeRequest,\n    SendPhoneVerificationCodeResponse\n  >(\n    auth,\n    HttpMethod.POST,\n    Endpoint.SEND_VERIFICATION_CODE,\n    _addTidIfNecessary(auth, request)\n  );\n}\n\n/**\n * @internal\n */\nexport interface SignInWithPhoneNumberRequest {\n  temporaryProof?: string;\n  phoneNumber?: string;\n  sessionInfo?: string;\n  code?: string;\n  tenantId?: string;\n}\n\nexport interface LinkWithPhoneNumberRequest\n  extends SignInWithPhoneNumberRequest {\n  idToken: string;\n}\n\n/**\n * @internal\n */\nexport interface SignInWithPhoneNumberResponse extends IdTokenResponse {\n  temporaryProof?: string;\n  phoneNumber?: string;\n}\n\nexport async function signInWithPhoneNumber(\n  auth: Auth,\n  request: SignInWithPhoneNumberRequest\n): Promise<SignInWithPhoneNumberResponse> {\n  return _performSignInRequest<\n    SignInWithPhoneNumberRequest,\n    SignInWithPhoneNumberResponse\n  >(\n    auth,\n    HttpMethod.POST,\n    Endpoint.SIGN_IN_WITH_PHONE_NUMBER,\n    _addTidIfNecessary(auth, request)\n  );\n}\n\nexport async function linkWithPhoneNumber(\n  auth: Auth,\n  request: LinkWithPhoneNumberRequest\n): Promise<SignInWithPhoneNumberResponse> {\n  const response = await _performSignInRequest<\n    LinkWithPhoneNumberRequest,\n    SignInWithPhoneNumberResponse\n  >(\n    auth,\n    HttpMethod.POST,\n    Endpoint.SIGN_IN_WITH_PHONE_NUMBER,\n    _addTidIfNecessary(auth, request)\n  );\n  if (response.temporaryProof) {\n    throw _makeTaggedError(auth, AuthErrorCode.NEED_CONFIRMATION, response);\n  }\n  return response;\n}\n\ninterface VerifyPhoneNumberForExistingRequest\n  extends SignInWithPhoneNumberRequest {\n  operation: 'REAUTH';\n}\n\nconst VERIFY_PHONE_NUMBER_FOR_EXISTING_ERROR_MAP_: Partial<\n  ServerErrorMap<ServerError>\n> = {\n  [ServerError.USER_NOT_FOUND]: AuthErrorCode.USER_DELETED\n};\n\nexport async function verifyPhoneNumberForExisting(\n  auth: Auth,\n  request: SignInWithPhoneNumberRequest\n): Promise<SignInWithPhoneNumberResponse> {\n  const apiRequest: VerifyPhoneNumberForExistingRequest = {\n    ...request,\n    operation: 'REAUTH'\n  };\n  return _performSignInRequest<\n    VerifyPhoneNumberForExistingRequest,\n    SignInWithPhoneNumberResponse\n  >(\n    auth,\n    HttpMethod.POST,\n    Endpoint.SIGN_IN_WITH_PHONE_NUMBER,\n    _addTidIfNecessary(auth, apiRequest),\n    VERIFY_PHONE_NUMBER_FOR_EXISTING_ERROR_MAP_\n  );\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ProviderId, SignInMethod } from '../../model/enums';\n\nimport { PhoneOrOauthTokenResponse } from '../../api/authentication/mfa';\nimport {\n  linkWithPhoneNumber,\n  signInWithPhoneNumber,\n  SignInWithPhoneNumberRequest,\n  verifyPhoneNumberForExisting\n} from '../../api/authentication/sms';\nimport { AuthInternal } from '../../model/auth';\nimport { IdTokenResponse } from '../../model/id_token';\nimport { AuthCredential } from './auth_credential';\n\nexport interface PhoneAuthCredentialParameters {\n  verificationId?: string;\n  verificationCode?: string;\n  phoneNumber?: string;\n  temporaryProof?: string;\n}\n\n/**\n * Represents the credentials returned by {@link PhoneAuthProvider}.\n *\n * @public\n */\nexport class PhoneAuthCredential extends AuthCredential {\n  private constructor(private readonly params: PhoneAuthCredentialParameters) {\n    super(ProviderId.PHONE, SignInMethod.PHONE);\n  }\n\n  /** @internal */\n  static _fromVerification(\n    verificationId: string,\n    verificationCode: string\n  ): PhoneAuthCredential {\n    return new PhoneAuthCredential({ verificationId, verificationCode });\n  }\n\n  /** @internal */\n  static _fromTokenResponse(\n    phoneNumber: string,\n    temporaryProof: string\n  ): PhoneAuthCredential {\n    return new PhoneAuthCredential({ phoneNumber, temporaryProof });\n  }\n\n  /** @internal */\n  _getIdTokenResponse(auth: AuthInternal): Promise<PhoneOrOauthTokenResponse> {\n    return signInWithPhoneNumber(auth, this._makeVerificationRequest());\n  }\n\n  /** @internal */\n  _linkToIdToken(\n    auth: AuthInternal,\n    idToken: string\n  ): Promise<IdTokenResponse> {\n    return linkWithPhoneNumber(auth, {\n      idToken,\n      ...this._makeVerificationRequest()\n    });\n  }\n\n  /** @internal */\n  _getReauthenticationResolver(auth: AuthInternal): Promise<IdTokenResponse> {\n    return verifyPhoneNumberForExisting(auth, this._makeVerificationRequest());\n  }\n\n  /** @internal */\n  _makeVerificationRequest(): SignInWithPhoneNumberRequest {\n    const { temporaryProof, phoneNumber, verificationId, verificationCode } =\n      this.params;\n    if (temporaryProof && phoneNumber) {\n      return { temporaryProof, phoneNumber };\n    }\n\n    return {\n      sessionInfo: verificationId,\n      code: verificationCode\n    };\n  }\n\n  /** {@inheritdoc AuthCredential.toJSON} */\n  toJSON(): object {\n    const obj: Record<string, string> = {\n      providerId: this.providerId\n    };\n    if (this.params.phoneNumber) {\n      obj.phoneNumber = this.params.phoneNumber;\n    }\n    if (this.params.temporaryProof) {\n      obj.temporaryProof = this.params.temporaryProof;\n    }\n    if (this.params.verificationCode) {\n      obj.verificationCode = this.params.verificationCode;\n    }\n    if (this.params.verificationId) {\n      obj.verificationId = this.params.verificationId;\n    }\n\n    return obj;\n  }\n\n  /** Generates a phone credential based on a plain object or a JSON string. */\n  static fromJSON(json: object | string): PhoneAuthCredential | null {\n    if (typeof json === 'string') {\n      json = JSON.parse(json);\n    }\n\n    const { verificationId, verificationCode, phoneNumber, temporaryProof } =\n      json as { [key: string]: string };\n    if (\n      !verificationCode &&\n      !verificationId &&\n      !phoneNumber &&\n      !temporaryProof\n    ) {\n      return null;\n    }\n\n    return new PhoneAuthCredential({\n      verificationId,\n      verificationCode,\n      phoneNumber,\n      temporaryProof\n    });\n  }\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { extractQuerystring, querystringDecode } from '@firebase/util';\nimport { ActionCodeOperation } from '../model/public_types';\nimport { AuthErrorCode } from './errors';\nimport { _assert } from './util/assert';\n\n/**\n * Enums for fields in URL query string.\n *\n * @enum {string}\n */\nconst enum QueryField {\n  API_KEY = 'apiKey',\n  CODE = 'oobCode',\n  CONTINUE_URL = 'continueUrl',\n  LANGUAGE_CODE = 'languageCode',\n  MODE = 'mode',\n  TENANT_ID = 'tenantId'\n}\n\n/**\n * Maps the mode string in action code URL to Action Code Info operation.\n *\n * @param mode\n */\nfunction parseMode(mode: string | null): ActionCodeOperation | null {\n  switch (mode) {\n    case 'recoverEmail':\n      return ActionCodeOperation.RECOVER_EMAIL;\n    case 'resetPassword':\n      return ActionCodeOperation.PASSWORD_RESET;\n    case 'signIn':\n      return ActionCodeOperation.EMAIL_SIGNIN;\n    case 'verifyEmail':\n      return ActionCodeOperation.VERIFY_EMAIL;\n    case 'verifyAndChangeEmail':\n      return ActionCodeOperation.VERIFY_AND_CHANGE_EMAIL;\n    case 'revertSecondFactorAddition':\n      return ActionCodeOperation.REVERT_SECOND_FACTOR_ADDITION;\n    default:\n      return null;\n  }\n}\n\n/**\n * Helper to parse FDL links\n *\n * @param url\n */\nfunction parseDeepLink(url: string): string {\n  const link = querystringDecode(extractQuerystring(url))['link'];\n\n  // Double link case (automatic redirect).\n  const doubleDeepLink = link\n    ? querystringDecode(extractQuerystring(link))['deep_link_id']\n    : null;\n  // iOS custom scheme links.\n  const iOSDeepLink = querystringDecode(extractQuerystring(url))[\n    'deep_link_id'\n  ];\n  const iOSDoubleDeepLink = iOSDeepLink\n    ? querystringDecode(extractQuerystring(iOSDeepLink))['link']\n    : null;\n  return iOSDoubleDeepLink || iOSDeepLink || doubleDeepLink || link || url;\n}\n\n/**\n * A utility class to parse email action URLs such as password reset, email verification,\n * email link sign in, etc.\n *\n * @public\n */\nexport class ActionCodeURL {\n  /**\n   * The API key of the email action link.\n   */\n  readonly apiKey: string;\n  /**\n   * The action code of the email action link.\n   */\n  readonly code: string;\n  /**\n   * The continue URL of the email action link. Null if not provided.\n   */\n  readonly continueUrl: string | null;\n  /**\n   * The language code of the email action link. Null if not provided.\n   */\n  readonly languageCode: string | null;\n  /**\n   * The action performed by the email action link. It returns from one of the types from\n   * {@link ActionCodeInfo}\n   */\n  readonly operation: string;\n  /**\n   * The tenant ID of the email action link. Null if the email action is from the parent project.\n   */\n  readonly tenantId: string | null;\n\n  /**\n   * @param actionLink - The link from which to extract the URL.\n   * @returns The {@link ActionCodeURL} object, or null if the link is invalid.\n   *\n   * @internal\n   */\n  constructor(actionLink: string) {\n    const searchParams = querystringDecode(extractQuerystring(actionLink));\n    const apiKey = searchParams[QueryField.API_KEY] ?? null;\n    const code = searchParams[QueryField.CODE] ?? null;\n    const operation = parseMode(searchParams[QueryField.MODE] ?? null);\n    // Validate API key, code and mode.\n    _assert(apiKey && code && operation, AuthErrorCode.ARGUMENT_ERROR);\n    this.apiKey = apiKey;\n    this.operation = operation;\n    this.code = code;\n    this.continueUrl = searchParams[QueryField.CONTINUE_URL] ?? null;\n    this.languageCode = searchParams[QueryField.LANGUAGE_CODE] ?? null;\n    this.tenantId = searchParams[QueryField.TENANT_ID] ?? null;\n  }\n\n  /**\n   * Parses the email action link string and returns an {@link ActionCodeURL} if the link is valid,\n   * otherwise returns null.\n   *\n   * @param link  - The email action link string.\n   * @returns The {@link ActionCodeURL} object, or null if the link is invalid.\n   *\n   * @public\n   */\n  static parseLink(link: string): ActionCodeURL | null {\n    const actionLink = parseDeepLink(link);\n    try {\n      return new ActionCodeURL(actionLink);\n    } catch {\n      return null;\n    }\n  }\n}\n\n/**\n * Parses the email action link string and returns an {@link ActionCodeURL} if\n * the link is valid, otherwise returns null.\n *\n * @public\n */\nexport function parseActionCodeURL(link: string): ActionCodeURL | null {\n  return ActionCodeURL.parseLink(link);\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ProviderId, SignInMethod } from '../../model/enums';\nimport { AuthProvider } from '../../model/public_types';\n\nimport { ActionCodeURL } from '../action_code_url';\nimport { EmailAuthCredential } from '../credentials/email';\nimport { AuthErrorCode } from '../errors';\nimport { _assert } from '../util/assert';\n\n/**\n * Provider for generating {@link EmailAuthCredential}.\n *\n * @public\n */\nexport class EmailAuthProvider implements AuthProvider {\n  /**\n   * Always set to {@link ProviderId}.PASSWORD, even for email link.\n   */\n  static readonly PROVIDER_ID: 'password' = ProviderId.PASSWORD;\n  /**\n   * Always set to {@link SignInMethod}.EMAIL_PASSWORD.\n   */\n  static readonly EMAIL_PASSWORD_SIGN_IN_METHOD: 'password' =\n    SignInMethod.EMAIL_PASSWORD;\n  /**\n   * Always set to {@link SignInMethod}.EMAIL_LINK.\n   */\n  static readonly EMAIL_LINK_SIGN_IN_METHOD: 'emailLink' =\n    SignInMethod.EMAIL_LINK;\n  /**\n   * Always set to {@link ProviderId}.PASSWORD, even for email link.\n   */\n  readonly providerId = EmailAuthProvider.PROVIDER_ID;\n\n  /**\n   * Initialize an {@link AuthCredential} using an email and password.\n   *\n   * @example\n   * ```javascript\n   * const authCredential = EmailAuthProvider.credential(email, password);\n   * const userCredential = await signInWithCredential(auth, authCredential);\n   * ```\n   *\n   * @example\n   * ```javascript\n   * const userCredential = await signInWithEmailAndPassword(auth, email, password);\n   * ```\n   *\n   * @param email - Email address.\n   * @param password - User account password.\n   * @returns The auth provider credential.\n   */\n  static credential(email: string, password: string): EmailAuthCredential {\n    return EmailAuthCredential._fromEmailAndPassword(email, password);\n  }\n\n  /**\n   * Initialize an {@link AuthCredential} using an email and an email link after a sign in with\n   * email link operation.\n   *\n   * @example\n   * ```javascript\n   * const authCredential = EmailAuthProvider.credentialWithLink(auth, email, emailLink);\n   * const userCredential = await signInWithCredential(auth, authCredential);\n   * ```\n   *\n   * @example\n   * ```javascript\n   * await sendSignInLinkToEmail(auth, email);\n   * // Obtain emailLink from user.\n   * const userCredential = await signInWithEmailLink(auth, email, emailLink);\n   * ```\n   *\n   * @param auth - The {@link Auth} instance used to verify the link.\n   * @param email - Email address.\n   * @param emailLink - Sign-in email link.\n   * @returns - The auth provider credential.\n   */\n  static credentialWithLink(\n    email: string,\n    emailLink: string\n  ): EmailAuthCredential {\n    const actionCodeUrl = ActionCodeURL.parseLink(emailLink);\n    _assert(actionCodeUrl, AuthErrorCode.ARGUMENT_ERROR);\n\n    return EmailAuthCredential._fromEmailAndCode(\n      email,\n      actionCodeUrl.code,\n      actionCodeUrl.tenantId\n    );\n  }\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AuthProvider } from '../../model/public_types';\n\n/**\n * Map of OAuth Custom Parameters.\n *\n * @public\n */\nexport type CustomParameters = Record<string, string>;\n\n/**\n * The base class for all Federated providers (OAuth (including OIDC), SAML).\n *\n * This class is not meant to be instantiated directly.\n *\n * @public\n */\nexport abstract class FederatedAuthProvider implements AuthProvider {\n  /** @internal */\n  defaultLanguageCode: string | null = null;\n  /** @internal */\n  private customParameters: CustomParameters = {};\n\n  /**\n   * Constructor for generic OAuth providers.\n   *\n   * @param providerId - Provider for which credentials should be generated.\n   */\n  constructor(readonly providerId: string) {}\n\n  /**\n   * Set the language gode.\n   *\n   * @param languageCode - language code\n   */\n  setDefaultLanguage(languageCode: string | null): void {\n    this.defaultLanguageCode = languageCode;\n  }\n\n  /**\n   * Sets the OAuth custom parameters to pass in an OAuth request for popup and redirect sign-in\n   * operations.\n   *\n   * @remarks\n   * For a detailed list, check the reserved required OAuth 2.0 parameters such as `client_id`,\n   * `redirect_uri`, `scope`, `response_type`, and `state` are not allowed and will be ignored.\n   *\n   * @param customOAuthParameters - The custom OAuth parameters to pass in the OAuth request.\n   */\n  setCustomParameters(customOAuthParameters: CustomParameters): AuthProvider {\n    this.customParameters = customOAuthParameters;\n    return this;\n  }\n\n  /**\n   * Retrieve the current list of {@link CustomParameters}.\n   */\n  getCustomParameters(): CustomParameters {\n    return this.customParameters;\n  }\n}\n", "/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AuthProvider, UserCredential } from '../../model/public_types';\n\nimport { _assert } from '../util/assert';\nimport { AuthErrorCode } from '../errors';\n\nimport { OAuthCredential, OAuthCredentialParams } from '../credentials/oauth';\nimport { UserCredentialInternal } from '../../model/user';\nimport { FirebaseError } from '@firebase/util';\nimport { TaggedWithTokenResponse } from '../../model/id_token';\nimport { SignInWithIdpResponse } from '../../../internal';\nimport { FederatedAuthProvider } from './federated';\n\n/**\n * Defines the options for initializing an {@link OAuthCredential}.\n *\n * @remarks\n * For ID tokens with nonce claim, the raw nonce has to also be provided.\n *\n * @public\n */\nexport interface OAuthCredentialOptions {\n  /**\n   * The OAuth ID token used to initialize the {@link OAuthCredential}.\n   */\n  idToken?: string;\n  /**\n   * The OAuth access token used to initialize the {@link OAuthCredential}.\n   */\n  accessToken?: string;\n  /**\n   * The raw nonce associated with the ID token.\n   *\n   * @remarks\n   * It is required when an ID token with a nonce field is provided. The SHA-256 hash of the\n   * raw nonce must match the nonce field in the ID token.\n   */\n  rawNonce?: string;\n}\n\n/**\n * Common code to all OAuth providers. This is separate from the\n * {@link OAuthProvider} so that child providers (like\n * {@link GoogleAuthProvider}) don't inherit the `credential` instance method.\n * Instead, they rely on a static `credential` method.\n */\nexport abstract class BaseOAuthProvider\n  extends FederatedAuthProvider\n  implements AuthProvider\n{\n  /** @internal */\n  private scopes: string[] = [];\n\n  /**\n   * Add an OAuth scope to the credential.\n   *\n   * @param scope - Provider OAuth scope to add.\n   */\n  addScope(scope: string): AuthProvider {\n    // If not already added, add scope to list.\n    if (!this.scopes.includes(scope)) {\n      this.scopes.push(scope);\n    }\n    return this;\n  }\n\n  /**\n   * Retrieve the current list of OAuth scopes.\n   */\n  getScopes(): string[] {\n    return [...this.scopes];\n  }\n}\n\n/**\n * Provider for generating generic {@link OAuthCredential}.\n *\n * @example\n * ```javascript\n * // Sign in using a redirect.\n * const provider = new OAuthProvider('google.com');\n * // Start a sign in process for an unauthenticated user.\n * provider.addScope('profile');\n * provider.addScope('email');\n * await signInWithRedirect(auth, provider);\n * // This will trigger a full page redirect away from your app\n *\n * // After returning from the redirect when your app initializes you can obtain the result\n * const result = await getRedirectResult(auth);\n * if (result) {\n *   // This is the signed-in user\n *   const user = result.user;\n *   // This gives you a OAuth Access Token for the provider.\n *   const credential = provider.credentialFromResult(auth, result);\n *   const token = credential.accessToken;\n * }\n * ```\n *\n * @example\n * ```javascript\n * // Sign in using a popup.\n * const provider = new OAuthProvider('google.com');\n * provider.addScope('profile');\n * provider.addScope('email');\n * const result = await signInWithPopup(auth, provider);\n *\n * // The signed-in user info.\n * const user = result.user;\n * // This gives you a OAuth Access Token for the provider.\n * const credential = provider.credentialFromResult(auth, result);\n * const token = credential.accessToken;\n * ```\n * @public\n */\nexport class OAuthProvider extends BaseOAuthProvider {\n  /**\n   * Creates an {@link OAuthCredential} from a JSON string or a plain object.\n   * @param json - A plain object or a JSON string\n   */\n  static credentialFromJSON(json: object | string): OAuthCredential {\n    const obj = typeof json === 'string' ? JSON.parse(json) : json;\n    _assert(\n      'providerId' in obj && 'signInMethod' in obj,\n      AuthErrorCode.ARGUMENT_ERROR\n    );\n    return OAuthCredential._fromParams(obj);\n  }\n\n  /**\n   * Creates a {@link OAuthCredential} from a generic OAuth provider's access token or ID token.\n   *\n   * @remarks\n   * The raw nonce is required when an ID token with a nonce field is provided. The SHA-256 hash of\n   * the raw nonce must match the nonce field in the ID token.\n   *\n   * @example\n   * ```javascript\n   * // `googleUser` from the onsuccess Google Sign In callback.\n   * // Initialize a generate OAuth provider with a `google.com` providerId.\n   * const provider = new OAuthProvider('google.com');\n   * const credential = provider.credential({\n   *   idToken: googleUser.getAuthResponse().id_token,\n   * });\n   * const result = await signInWithCredential(credential);\n   * ```\n   *\n   * @param params - Either the options object containing the ID token, access token and raw nonce\n   * or the ID token string.\n   */\n  credential(params: OAuthCredentialOptions): OAuthCredential {\n    return this._credential({ ...params, nonce: params.rawNonce });\n  }\n\n  /** An internal credential method that accepts more permissive options */\n  private _credential(\n    params: Omit<OAuthCredentialParams, 'signInMethod' | 'providerId'>\n  ): OAuthCredential {\n    _assert(params.idToken || params.accessToken, AuthErrorCode.ARGUMENT_ERROR);\n    // For OAuthCredential, sign in method is same as providerId.\n    return OAuthCredential._fromParams({\n      ...params,\n      providerId: this.providerId,\n      signInMethod: this.providerId\n    });\n  }\n\n  /**\n   * Used to extract the underlying {@link OAuthCredential} from a {@link UserCredential}.\n   *\n   * @param userCredential - The user credential.\n   */\n  static credentialFromResult(\n    userCredential: UserCredential\n  ): OAuthCredential | null {\n    return OAuthProvider.oauthCredentialFromTaggedObject(\n      userCredential as UserCredentialInternal\n    );\n  }\n  /**\n   * Used to extract the underlying {@link OAuthCredential} from a {@link AuthError} which was\n   * thrown during a sign-in, link, or reauthenticate operation.\n   *\n   * @param userCredential - The user credential.\n   */\n  static credentialFromError(error: FirebaseError): OAuthCredential | null {\n    return OAuthProvider.oauthCredentialFromTaggedObject(\n      (error.customData || {}) as TaggedWithTokenResponse\n    );\n  }\n\n  private static oauthCredentialFromTaggedObject({\n    _tokenResponse: tokenResponse\n  }: TaggedWithTokenResponse): OAuthCredential | null {\n    if (!tokenResponse) {\n      return null;\n    }\n\n    const {\n      oauthIdToken,\n      oauthAccessToken,\n      oauthTokenSecret,\n      pendingToken,\n      nonce,\n      providerId\n    } = tokenResponse as SignInWithIdpResponse;\n    if (\n      !oauthAccessToken &&\n      !oauthTokenSecret &&\n      !oauthIdToken &&\n      !pendingToken\n    ) {\n      return null;\n    }\n\n    if (!providerId) {\n      return null;\n    }\n\n    try {\n      return new OAuthProvider(providerId)._credential({\n        idToken: oauthIdToken,\n        accessToken: oauthAccessToken,\n        nonce,\n        pendingToken\n      });\n    } catch (e) {\n      return null;\n    }\n  }\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { UserCredential } from '../../model/public_types';\nimport { FirebaseError } from '@firebase/util';\n\nimport { TaggedWithTokenResponse } from '../../model/id_token';\nimport { UserCredentialInternal } from '../../model/user';\nimport { OAuthCredential } from '../credentials/oauth';\nimport { BaseOAuthProvider } from './oauth';\nimport { ProviderId, SignInMethod } from '../../model/enums';\n\n/**\n * Provider for generating an {@link OAuthCredential} for {@link ProviderId}.FACEBOOK.\n *\n * @example\n * ```javascript\n * // Sign in using a redirect.\n * const provider = new FacebookAuthProvider();\n * // Start a sign in process for an unauthenticated user.\n * provider.addScope('user_birthday');\n * await signInWithRedirect(auth, provider);\n * // This will trigger a full page redirect away from your app\n *\n * // After returning from the redirect when your app initializes you can obtain the result\n * const result = await getRedirectResult(auth);\n * if (result) {\n *   // This is the signed-in user\n *   const user = result.user;\n *   // This gives you a Facebook Access Token.\n *   const credential = FacebookAuthProvider.credentialFromResult(result);\n *   const token = credential.accessToken;\n * }\n * ```\n *\n * @example\n * ```javascript\n * // Sign in using a popup.\n * const provider = new FacebookAuthProvider();\n * provider.addScope('user_birthday');\n * const result = await signInWithPopup(auth, provider);\n *\n * // The signed-in user info.\n * const user = result.user;\n * // This gives you a Facebook Access Token.\n * const credential = FacebookAuthProvider.credentialFromResult(result);\n * const token = credential.accessToken;\n * ```\n *\n * @public\n */\nexport class FacebookAuthProvider extends BaseOAuthProvider {\n  /** Always set to {@link SignInMethod}.FACEBOOK. */\n  static readonly FACEBOOK_SIGN_IN_METHOD: 'facebook.com' =\n    SignInMethod.FACEBOOK;\n  /** Always set to {@link ProviderId}.FACEBOOK. */\n  static readonly PROVIDER_ID: 'facebook.com' = ProviderId.FACEBOOK;\n\n  constructor() {\n    super(ProviderId.FACEBOOK);\n  }\n\n  /**\n   * Creates a credential for Facebook.\n   *\n   * @example\n   * ```javascript\n   * // `event` from the Facebook auth.authResponseChange callback.\n   * const credential = FacebookAuthProvider.credential(event.authResponse.accessToken);\n   * const result = await signInWithCredential(credential);\n   * ```\n   *\n   * @param accessToken - Facebook access token.\n   */\n  static credential(accessToken: string): OAuthCredential {\n    return OAuthCredential._fromParams({\n      providerId: FacebookAuthProvider.PROVIDER_ID,\n      signInMethod: FacebookAuthProvider.FACEBOOK_SIGN_IN_METHOD,\n      accessToken\n    });\n  }\n\n  /**\n   * Used to extract the underlying {@link OAuthCredential} from a {@link UserCredential}.\n   *\n   * @param userCredential - The user credential.\n   */\n  static credentialFromResult(\n    userCredential: UserCredential\n  ): OAuthCredential | null {\n    return FacebookAuthProvider.credentialFromTaggedObject(\n      userCredential as UserCredentialInternal\n    );\n  }\n\n  /**\n   * Used to extract the underlying {@link OAuthCredential} from a {@link AuthError} which was\n   * thrown during a sign-in, link, or reauthenticate operation.\n   *\n   * @param userCredential - The user credential.\n   */\n  static credentialFromError(error: FirebaseError): OAuthCredential | null {\n    return FacebookAuthProvider.credentialFromTaggedObject(\n      (error.customData || {}) as TaggedWithTokenResponse\n    );\n  }\n\n  private static credentialFromTaggedObject({\n    _tokenResponse: tokenResponse\n  }: TaggedWithTokenResponse): OAuthCredential | null {\n    if (!tokenResponse || !('oauthAccessToken' in tokenResponse)) {\n      return null;\n    }\n\n    if (!tokenResponse.oauthAccessToken) {\n      return null;\n    }\n\n    try {\n      return FacebookAuthProvider.credential(tokenResponse.oauthAccessToken);\n    } catch {\n      return null;\n    }\n  }\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { UserCredential } from '../../model/public_types';\nimport { FirebaseError } from '@firebase/util';\n\nimport { SignInWithIdpResponse } from '../../api/authentication/idp';\nimport { TaggedWithTokenResponse } from '../../model/id_token';\nimport { UserCredentialInternal } from '../../model/user';\nimport { OAuthCredential } from '../credentials/oauth';\nimport { BaseOAuthProvider } from './oauth';\nimport { ProviderId, SignInMethod } from '../../model/enums';\n\n/**\n * Provider for generating an an {@link OAuthCredential} for {@link ProviderId}.GOOGLE.\n *\n * @example\n * ```javascript\n * // Sign in using a redirect.\n * const provider = new GoogleAuthProvider();\n * // Start a sign in process for an unauthenticated user.\n * provider.addScope('profile');\n * provider.addScope('email');\n * await signInWithRedirect(auth, provider);\n * // This will trigger a full page redirect away from your app\n *\n * // After returning from the redirect when your app initializes you can obtain the result\n * const result = await getRedirectResult(auth);\n * if (result) {\n *   // This is the signed-in user\n *   const user = result.user;\n *   // This gives you a Google Access Token.\n *   const credential = GoogleAuthProvider.credentialFromResult(result);\n *   const token = credential.accessToken;\n * }\n * ```\n *\n * @example\n * ```javascript\n * // Sign in using a popup.\n * const provider = new GoogleAuthProvider();\n * provider.addScope('profile');\n * provider.addScope('email');\n * const result = await signInWithPopup(auth, provider);\n *\n * // The signed-in user info.\n * const user = result.user;\n * // This gives you a Google Access Token.\n * const credential = GoogleAuthProvider.credentialFromResult(result);\n * const token = credential.accessToken;\n * ```\n *\n * @public\n */\nexport class GoogleAuthProvider extends BaseOAuthProvider {\n  /** Always set to {@link SignInMethod}.GOOGLE. */\n  static readonly GOOGLE_SIGN_IN_METHOD: 'google.com' = SignInMethod.GOOGLE;\n  /** Always set to {@link ProviderId}.GOOGLE. */\n  static readonly PROVIDER_ID: 'google.com' = ProviderId.GOOGLE;\n\n  constructor() {\n    super(ProviderId.GOOGLE);\n    this.addScope('profile');\n  }\n\n  /**\n   * Creates a credential for Google. At least one of ID token and access token is required.\n   *\n   * @example\n   * ```javascript\n   * // \\`googleUser\\` from the onsuccess Google Sign In callback.\n   * const credential = GoogleAuthProvider.credential(googleUser.getAuthResponse().id_token);\n   * const result = await signInWithCredential(credential);\n   * ```\n   *\n   * @param idToken - Google ID token.\n   * @param accessToken - Google access token.\n   */\n  static credential(\n    idToken?: string | null,\n    accessToken?: string | null\n  ): OAuthCredential {\n    return OAuthCredential._fromParams({\n      providerId: GoogleAuthProvider.PROVIDER_ID,\n      signInMethod: GoogleAuthProvider.GOOGLE_SIGN_IN_METHOD,\n      idToken,\n      accessToken\n    });\n  }\n\n  /**\n   * Used to extract the underlying {@link OAuthCredential} from a {@link UserCredential}.\n   *\n   * @param userCredential - The user credential.\n   */\n  static credentialFromResult(\n    userCredential: UserCredential\n  ): OAuthCredential | null {\n    return GoogleAuthProvider.credentialFromTaggedObject(\n      userCredential as UserCredentialInternal\n    );\n  }\n  /**\n   * Used to extract the underlying {@link OAuthCredential} from a {@link AuthError} which was\n   * thrown during a sign-in, link, or reauthenticate operation.\n   *\n   * @param userCredential - The user credential.\n   */\n  static credentialFromError(error: FirebaseError): OAuthCredential | null {\n    return GoogleAuthProvider.credentialFromTaggedObject(\n      (error.customData || {}) as TaggedWithTokenResponse\n    );\n  }\n\n  private static credentialFromTaggedObject({\n    _tokenResponse: tokenResponse\n  }: TaggedWithTokenResponse): OAuthCredential | null {\n    if (!tokenResponse) {\n      return null;\n    }\n\n    const { oauthIdToken, oauthAccessToken } =\n      tokenResponse as SignInWithIdpResponse;\n    if (!oauthIdToken && !oauthAccessToken) {\n      // This could be an oauth 1 credential or a phone credential\n      return null;\n    }\n\n    try {\n      return GoogleAuthProvider.credential(oauthIdToken, oauthAccessToken);\n    } catch {\n      return null;\n    }\n  }\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { UserCredential } from '../../model/public_types';\nimport { FirebaseError } from '@firebase/util';\n\nimport { TaggedWithTokenResponse } from '../../model/id_token';\nimport { UserCredentialInternal } from '../../model/user';\nimport { OAuthCredential } from '../credentials/oauth';\nimport { BaseOAuthProvider } from './oauth';\nimport { ProviderId, SignInMethod } from '../../model/enums';\n\n/**\n * Provider for generating an {@link OAuthCredential} for {@link ProviderId}.GITHUB.\n *\n * @remarks\n * GitHub requires an OAuth 2.0 redirect, so you can either handle the redirect directly, or use\n * the {@link signInWithPopup} handler:\n *\n * @example\n * ```javascript\n * // Sign in using a redirect.\n * const provider = new GithubAuthProvider();\n * // Start a sign in process for an unauthenticated user.\n * provider.addScope('repo');\n * await signInWithRedirect(auth, provider);\n * // This will trigger a full page redirect away from your app\n *\n * // After returning from the redirect when your app initializes you can obtain the result\n * const result = await getRedirectResult(auth);\n * if (result) {\n *   // This is the signed-in user\n *   const user = result.user;\n *   // This gives you a Github Access Token.\n *   const credential = GithubAuthProvider.credentialFromResult(result);\n *   const token = credential.accessToken;\n * }\n * ```\n *\n * @example\n * ```javascript\n * // Sign in using a popup.\n * const provider = new GithubAuthProvider();\n * provider.addScope('repo');\n * const result = await signInWithPopup(auth, provider);\n *\n * // The signed-in user info.\n * const user = result.user;\n * // This gives you a Github Access Token.\n * const credential = GithubAuthProvider.credentialFromResult(result);\n * const token = credential.accessToken;\n * ```\n * @public\n */\nexport class GithubAuthProvider extends BaseOAuthProvider {\n  /** Always set to {@link SignInMethod}.GITHUB. */\n  static readonly GITHUB_SIGN_IN_METHOD: 'github.com' = SignInMethod.GITHUB;\n  /** Always set to {@link ProviderId}.GITHUB. */\n  static readonly PROVIDER_ID: 'github.com' = ProviderId.GITHUB;\n\n  constructor() {\n    super(ProviderId.GITHUB);\n  }\n\n  /**\n   * Creates a credential for Github.\n   *\n   * @param accessToken - Github access token.\n   */\n  static credential(accessToken: string): OAuthCredential {\n    return OAuthCredential._fromParams({\n      providerId: GithubAuthProvider.PROVIDER_ID,\n      signInMethod: GithubAuthProvider.GITHUB_SIGN_IN_METHOD,\n      accessToken\n    });\n  }\n\n  /**\n   * Used to extract the underlying {@link OAuthCredential} from a {@link UserCredential}.\n   *\n   * @param userCredential - The user credential.\n   */\n  static credentialFromResult(\n    userCredential: UserCredential\n  ): OAuthCredential | null {\n    return GithubAuthProvider.credentialFromTaggedObject(\n      userCredential as UserCredentialInternal\n    );\n  }\n\n  /**\n   * Used to extract the underlying {@link OAuthCredential} from a {@link AuthError} which was\n   * thrown during a sign-in, link, or reauthenticate operation.\n   *\n   * @param userCredential - The user credential.\n   */\n  static credentialFromError(error: FirebaseError): OAuthCredential | null {\n    return GithubAuthProvider.credentialFromTaggedObject(\n      (error.customData || {}) as TaggedWithTokenResponse\n    );\n  }\n\n  private static credentialFromTaggedObject({\n    _tokenResponse: tokenResponse\n  }: TaggedWithTokenResponse): OAuthCredential | null {\n    if (!tokenResponse || !('oauthAccessToken' in tokenResponse)) {\n      return null;\n    }\n\n    if (!tokenResponse.oauthAccessToken) {\n      return null;\n    }\n\n    try {\n      return GithubAuthProvider.credential(tokenResponse.oauthAccessToken);\n    } catch {\n      return null;\n    }\n  }\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Represents the SAML credentials returned by an {@link SAMLAuthProvider}.\n *\n * @public\n */\n\nimport {\n  signInWithIdp,\n  SignInWithIdpRequest\n} from '../../api/authentication/idp';\nimport { AuthInternal } from '../../model/auth';\nimport { IdTokenResponse } from '../../model/id_token';\nimport { AuthCredential } from './auth_credential';\n\nconst IDP_REQUEST_URI = 'http://localhost';\n\n/**\n * @public\n */\nexport class SAMLAuthCredential extends AuthCredential {\n  /** @internal */\n  private constructor(\n    providerId: string,\n    private readonly pendingToken: string\n  ) {\n    super(providerId, providerId);\n  }\n\n  /** @internal */\n  _getIdTokenResponse(auth: AuthInternal): Promise<IdTokenResponse> {\n    const request = this.buildRequest();\n    return signInWithIdp(auth, request);\n  }\n\n  /** @internal */\n  _linkToIdToken(\n    auth: AuthInternal,\n    idToken: string\n  ): Promise<IdTokenResponse> {\n    const request = this.buildRequest();\n    request.idToken = idToken;\n    return signInWithIdp(auth, request);\n  }\n\n  /** @internal */\n  _getReauthenticationResolver(auth: AuthInternal): Promise<IdTokenResponse> {\n    const request = this.buildRequest();\n    request.autoCreate = false;\n    return signInWithIdp(auth, request);\n  }\n\n  /** {@inheritdoc AuthCredential.toJSON}  */\n  toJSON(): object {\n    return {\n      signInMethod: this.signInMethod,\n      providerId: this.providerId,\n      pendingToken: this.pendingToken\n    };\n  }\n\n  /**\n   * Static method to deserialize a JSON representation of an object into an\n   * {@link  AuthCredential}.\n   *\n   * @param json - Input can be either Object or the stringified representation of the object.\n   * When string is provided, JSON.parse would be called first.\n   *\n   * @returns If the JSON input does not represent an {@link  AuthCredential}, null is returned.\n   */\n  static fromJSON(json: string | object): SAMLAuthCredential | null {\n    const obj = typeof json === 'string' ? JSON.parse(json) : json;\n    const { providerId, signInMethod, pendingToken }: Record<string, string> =\n      obj;\n    if (\n      !providerId ||\n      !signInMethod ||\n      !pendingToken ||\n      providerId !== signInMethod\n    ) {\n      return null;\n    }\n\n    return new SAMLAuthCredential(providerId, pendingToken);\n  }\n\n  /**\n   * Helper static method to avoid exposing the constructor to end users.\n   *\n   * @internal\n   */\n  static _create(providerId: string, pendingToken: string): SAMLAuthCredential {\n    return new SAMLAuthCredential(providerId, pendingToken);\n  }\n\n  private buildRequest(): SignInWithIdpRequest {\n    return {\n      requestUri: IDP_REQUEST_URI,\n      returnSecureToken: true,\n      pendingToken: this.pendingToken\n    };\n  }\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseError } from '@firebase/util';\nimport { SignInWithIdpResponse } from '../../api/authentication/idp';\nimport { TaggedWithTokenResponse } from '../../model/id_token';\nimport { UserCredential } from '../../model/public_types';\nimport { UserCredentialInternal } from '../../model/user';\nimport { AuthCredential } from '../credentials';\nimport { SAMLAuthCredential } from '../credentials/saml';\nimport { AuthErrorCode } from '../errors';\nimport { _assert } from '../util/assert';\nimport { FederatedAuthProvider } from './federated';\n\nconst SAML_PROVIDER_PREFIX = 'saml.';\n\n/**\n * An {@link AuthProvider} for SAML.\n *\n * @public\n */\nexport class SAMLAuthProvider extends FederatedAuthProvider {\n  /**\n   * Constructor. The providerId must start with \"saml.\"\n   * @param providerId - SAML provider ID.\n   */\n  constructor(providerId: string) {\n    _assert(\n      providerId.startsWith(SAML_PROVIDER_PREFIX),\n      AuthErrorCode.ARGUMENT_ERROR\n    );\n    super(providerId);\n  }\n\n  /**\n   * Generates an {@link AuthCredential} from a {@link UserCredential} after a\n   * successful SAML flow completes.\n   *\n   * @remarks\n   *\n   * For example, to get an {@link AuthCredential}, you could write the\n   * following code:\n   *\n   * ```js\n   * const userCredential = await signInWithPopup(auth, samlProvider);\n   * const credential = SAMLAuthProvider.credentialFromResult(userCredential);\n   * ```\n   *\n   * @param userCredential - The user credential.\n   */\n  static credentialFromResult(\n    userCredential: UserCredential\n  ): AuthCredential | null {\n    return SAMLAuthProvider.samlCredentialFromTaggedObject(\n      userCredential as UserCredentialInternal\n    );\n  }\n\n  /**\n   * Used to extract the underlying {@link OAuthCredential} from a {@link AuthError} which was\n   * thrown during a sign-in, link, or reauthenticate operation.\n   *\n   * @param userCredential - The user credential.\n   */\n  static credentialFromError(error: FirebaseError): AuthCredential | null {\n    return SAMLAuthProvider.samlCredentialFromTaggedObject(\n      (error.customData || {}) as TaggedWithTokenResponse\n    );\n  }\n\n  /**\n   * Creates an {@link AuthCredential} from a JSON string or a plain object.\n   * @param json - A plain object or a JSON string\n   */\n  static credentialFromJSON(json: string | object): AuthCredential {\n    const credential = SAMLAuthCredential.fromJSON(json);\n    _assert(credential, AuthErrorCode.ARGUMENT_ERROR);\n    return credential;\n  }\n\n  private static samlCredentialFromTaggedObject({\n    _tokenResponse: tokenResponse\n  }: TaggedWithTokenResponse): SAMLAuthCredential | null {\n    if (!tokenResponse) {\n      return null;\n    }\n\n    const { pendingToken, providerId } = tokenResponse as SignInWithIdpResponse;\n\n    if (!pendingToken || !providerId) {\n      return null;\n    }\n\n    try {\n      return SAMLAuthCredential._create(providerId, pendingToken);\n    } catch (e) {\n      return null;\n    }\n  }\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @license\n * Copyright 2020 Twitter LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { UserCredential } from '../../model/public_types';\nimport { FirebaseError } from '@firebase/util';\n\nimport { SignInWithIdpResponse } from '../../api/authentication/idp';\nimport { TaggedWithTokenResponse } from '../../model/id_token';\nimport { UserCredentialInternal } from '../../model/user';\nimport { OAuthCredential } from '../credentials/oauth';\nimport { BaseOAuthProvider } from './oauth';\nimport { ProviderId, SignInMethod } from '../../model/enums';\n\n/**\n * Provider for generating an {@link OAuthCredential} for {@link ProviderId}.TWITTER.\n *\n * @example\n * ```javascript\n * // Sign in using a redirect.\n * const provider = new TwitterAuthProvider();\n * // Start a sign in process for an unauthenticated user.\n * await signInWithRedirect(auth, provider);\n * // This will trigger a full page redirect away from your app\n *\n * // After returning from the redirect when your app initializes you can obtain the result\n * const result = await getRedirectResult(auth);\n * if (result) {\n *   // This is the signed-in user\n *   const user = result.user;\n *   // This gives you a Twitter Access Token and Secret.\n *   const credential = TwitterAuthProvider.credentialFromResult(result);\n *   const token = credential.accessToken;\n *   const secret = credential.secret;\n * }\n * ```\n *\n * @example\n * ```javascript\n * // Sign in using a popup.\n * const provider = new TwitterAuthProvider();\n * const result = await signInWithPopup(auth, provider);\n *\n * // The signed-in user info.\n * const user = result.user;\n * // This gives you a Twitter Access Token and Secret.\n * const credential = TwitterAuthProvider.credentialFromResult(result);\n * const token = credential.accessToken;\n * const secret = credential.secret;\n * ```\n *\n * @public\n */\nexport class TwitterAuthProvider extends BaseOAuthProvider {\n  /** Always set to {@link SignInMethod}.TWITTER. */\n  static readonly TWITTER_SIGN_IN_METHOD: 'twitter.com' = SignInMethod.TWITTER;\n  /** Always set to {@link ProviderId}.TWITTER. */\n  static readonly PROVIDER_ID: 'twitter.com' = ProviderId.TWITTER;\n\n  constructor() {\n    super(ProviderId.TWITTER);\n  }\n\n  /**\n   * Creates a credential for Twitter.\n   *\n   * @param token - Twitter access token.\n   * @param secret - Twitter secret.\n   */\n  static credential(token: string, secret: string): OAuthCredential {\n    return OAuthCredential._fromParams({\n      providerId: TwitterAuthProvider.PROVIDER_ID,\n      signInMethod: TwitterAuthProvider.TWITTER_SIGN_IN_METHOD,\n      oauthToken: token,\n      oauthTokenSecret: secret\n    });\n  }\n\n  /**\n   * Used to extract the underlying {@link OAuthCredential} from a {@link UserCredential}.\n   *\n   * @param userCredential - The user credential.\n   */\n  static credentialFromResult(\n    userCredential: UserCredential\n  ): OAuthCredential | null {\n    return TwitterAuthProvider.credentialFromTaggedObject(\n      userCredential as UserCredentialInternal\n    );\n  }\n\n  /**\n   * Used to extract the underlying {@link OAuthCredential} from a {@link AuthError} which was\n   * thrown during a sign-in, link, or reauthenticate operation.\n   *\n   * @param userCredential - The user credential.\n   */\n  static credentialFromError(error: FirebaseError): OAuthCredential | null {\n    return TwitterAuthProvider.credentialFromTaggedObject(\n      (error.customData || {}) as TaggedWithTokenResponse\n    );\n  }\n\n  private static credentialFromTaggedObject({\n    _tokenResponse: tokenResponse\n  }: TaggedWithTokenResponse): OAuthCredential | null {\n    if (!tokenResponse) {\n      return null;\n    }\n    const { oauthAccessToken, oauthTokenSecret } =\n      tokenResponse as SignInWithIdpResponse;\n    if (!oauthAccessToken || !oauthTokenSecret) {\n      return null;\n    }\n\n    try {\n      return TwitterAuthProvider.credential(oauthAccessToken, oauthTokenSecret);\n    } catch {\n      return null;\n    }\n  }\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Endpoint,\n  HttpMethod,\n  RecaptchaClientType,\n  RecaptchaVersion,\n  _addTidIfNecessary,\n  _performSignInRequest\n} from '../index';\nimport { IdTokenResponse } from '../../model/id_token';\nimport { Auth } from '../../model/public_types';\n\nexport interface SignUpRequest {\n  idToken?: string;\n  returnSecureToken?: boolean;\n  email?: string;\n  password?: string;\n  tenantId?: string;\n  captchaResponse?: string;\n  clientType?: RecaptchaClientType;\n  recaptchaVersion?: RecaptchaVersion;\n}\n\nexport interface SignUpResponse extends IdTokenResponse {\n  displayName?: string;\n  email?: string;\n}\n\nexport async function signUp(\n  auth: Auth,\n  request: SignUpRequest\n): Promise<SignUpResponse> {\n  return _performSignInRequest<SignUpRequest, SignUpResponse>(\n    auth,\n    HttpMethod.POST,\n    Endpoint.SIGN_UP,\n    _addTidIfNecessary(auth, request)\n  );\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { PhoneOrOauthTokenResponse } from '../../api/authentication/mfa';\nimport { IdTokenResponse } from '../../model/id_token';\nimport { UserInternal, UserCredentialInternal } from '../../model/user';\nimport { UserImpl } from './user_impl';\nimport { AuthInternal } from '../../model/auth';\nimport { OperationType, ProviderId } from '../../model/enums';\n\ninterface UserCredentialParams {\n  readonly user: UserInternal;\n  readonly providerId: ProviderId | string | null;\n  readonly _tokenResponse?: PhoneOrOauthTokenResponse;\n  readonly operationType: OperationType;\n}\n\nexport class UserCredentialImpl\n  implements UserCredentialInternal, UserCredentialParams\n{\n  readonly user: UserInternal;\n  readonly providerId: ProviderId | string | null;\n  readonly _tokenResponse: PhoneOrOauthTokenResponse | undefined;\n  readonly operationType: OperationType;\n\n  constructor(params: UserCredentialParams) {\n    this.user = params.user;\n    this.providerId = params.providerId;\n    this._tokenResponse = params._tokenResponse;\n    this.operationType = params.operationType;\n  }\n\n  static async _fromIdTokenResponse(\n    auth: AuthInternal,\n    operationType: OperationType,\n    idTokenResponse: IdTokenResponse,\n    isAnonymous: boolean = false\n  ): Promise<UserCredentialInternal> {\n    const user = await UserImpl._fromIdTokenResponse(\n      auth,\n      idTokenResponse,\n      isAnonymous\n    );\n    const providerId = providerIdForResponse(idTokenResponse);\n    const userCred = new UserCredentialImpl({\n      user,\n      providerId,\n      _tokenResponse: idTokenResponse,\n      operationType\n    });\n    return userCred;\n  }\n\n  static async _forOperation(\n    user: UserInternal,\n    operationType: OperationType,\n    response: PhoneOrOauthTokenResponse\n  ): Promise<UserCredentialImpl> {\n    await user._updateTokensIfNecessary(response, /* reload */ true);\n    const providerId = providerIdForResponse(response);\n    return new UserCredentialImpl({\n      user,\n      providerId,\n      _tokenResponse: response,\n      operationType\n    });\n  }\n}\n\nfunction providerIdForResponse(\n  response: IdTokenResponse\n): ProviderId | string | null {\n  if (response.providerId) {\n    return response.providerId;\n  }\n\n  if ('phoneNumber' in response) {\n    return ProviderId.PHONE;\n  }\n\n  return null;\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Auth, UserCredential } from '../../model/public_types';\nimport { signUp } from '../../api/authentication/sign_up';\nimport { UserInternal } from '../../model/user';\nimport { UserCredentialImpl } from '../user/user_credential_impl';\nimport { _castAuth } from '../auth/auth_impl';\nimport { OperationType } from '../../model/enums';\n\n/**\n * Asynchronously signs in as an anonymous user.\n *\n * @remarks\n * If there is already an anonymous user signed in, that user will be returned; otherwise, a\n * new anonymous user identity will be created and returned.\n *\n * @param auth - The {@link Auth} instance.\n *\n * @public\n */\nexport async function signInAnonymously(auth: Auth): Promise<UserCredential> {\n  const authInternal = _castAuth(auth);\n  await authInternal._initializationPromise;\n  if (authInternal.currentUser?.isAnonymous) {\n    // If an anonymous user is already signed in, no need to sign them in again.\n    return new UserCredentialImpl({\n      user: authInternal.currentUser as UserInternal,\n      providerId: null,\n      operationType: OperationType.SIGN_IN\n    });\n  }\n  const response = await signUp(authInternal, {\n    returnSecureToken: true\n  });\n  const userCredential = await UserCredentialImpl._fromIdTokenResponse(\n    authInternal,\n    OperationType.SIGN_IN,\n    response,\n    true\n  );\n  await authInternal._updateCurrentUser(userCredential.user);\n  return userCredential;\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { MultiFactorError as MultiFactorErrorPublic } from '../model/public_types';\nimport { FirebaseError } from '@firebase/util';\nimport { AuthInternal } from '../model/auth';\nimport { IdTokenResponse } from '../model/id_token';\nimport { AuthErrorCode } from '../core/errors';\nimport { UserInternal } from '../model/user';\nimport { AuthCredential } from '../core/credentials';\nimport { IdTokenMfaResponse } from '../api/authentication/mfa';\nimport { OperationType } from '../model/enums';\n\nexport type MultiFactorErrorData = MultiFactorErrorPublic['customData'] & {\n  _serverResponse: IdTokenMfaResponse;\n};\n\nexport class MultiFactorError\n  extends FirebaseError\n  implements MultiFactorErrorPublic\n{\n  readonly customData: MultiFactorErrorData;\n\n  private constructor(\n    auth: AuthInternal,\n    error: FirebaseError,\n    readonly operationType: OperationType,\n    readonly user?: UserInternal\n  ) {\n    super(error.code, error.message);\n    // https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\n    Object.setPrototypeOf(this, MultiFactorError.prototype);\n    this.customData = {\n      appName: auth.name,\n      tenantId: auth.tenantId ?? undefined,\n      _serverResponse: error.customData!._serverResponse as IdTokenMfaResponse,\n      operationType\n    };\n  }\n\n  static _fromErrorAndOperation(\n    auth: AuthInternal,\n    error: FirebaseError,\n    operationType: OperationType,\n    user?: UserInternal\n  ): MultiFactorError {\n    return new MultiFactorError(auth, error, operationType, user);\n  }\n}\n\nexport function _processCredentialSavingMfaContextIfNecessary(\n  auth: AuthInternal,\n  operationType: OperationType,\n  credential: AuthCredential,\n  user?: UserInternal\n): Promise<IdTokenResponse> {\n  const idTokenProvider =\n    operationType === OperationType.REAUTHENTICATE\n      ? credential._getReauthenticationResolver(auth)\n      : credential._getIdTokenResponse(auth);\n\n  return idTokenProvider.catch(error => {\n    if (error.code === `auth/${AuthErrorCode.MFA_REQUIRED}`) {\n      throw MultiFactorError._fromErrorAndOperation(\n        auth,\n        error,\n        operationType,\n        user\n      );\n    }\n\n    throw error;\n  });\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport interface ProviderAssociatedObject {\n  providerId?: string;\n}\n\n/**\n * Takes a set of UserInfo provider data and converts it to a set of names\n */\nexport function providerDataAsNames<T extends ProviderAssociatedObject>(\n  providerData: T[]\n): Set<string> {\n  return new Set(\n    providerData\n      .map(({ providerId }) => providerId)\n      .filter(pid => !!pid) as string[]\n  );\n}\n", "/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { User } from '../../model/public_types';\n\nimport { deleteLinkedAccounts } from '../../api/account_management/account';\nimport { UserInternal, UserCredentialInternal } from '../../model/user';\nimport { AuthCredential } from '../credentials';\nimport { AuthErrorCode } from '../errors';\nimport { _assert } from '../util/assert';\nimport { providerDataAsNames } from '../util/providers';\nimport { _logoutIfInvalidated } from './invalidation';\nimport { _reloadWithoutSaving } from './reload';\nimport { UserCredentialImpl } from './user_credential_impl';\nimport { getModularInstance } from '@firebase/util';\nimport { OperationType, ProviderId } from '../../model/enums';\n\n/**\n * Unlinks a provider from a user account.\n *\n * @param user - The user.\n * @param providerId - The provider to unlink.\n *\n * @public\n */\nexport async function unlink(user: User, providerId: string): Promise<User> {\n  const userInternal = getModularInstance(user) as UserInternal;\n  await _assertLinkedStatus(true, userInternal, providerId);\n  const { providerUserInfo } = await deleteLinkedAccounts(userInternal.auth, {\n    idToken: await userInternal.getIdToken(),\n    deleteProvider: [providerId]\n  });\n\n  const providersLeft = providerDataAsNames(providerUserInfo || []);\n\n  userInternal.providerData = userInternal.providerData.filter(pd =>\n    providersLeft.has(pd.providerId)\n  );\n  if (!providersLeft.has(ProviderId.PHONE)) {\n    userInternal.phoneNumber = null;\n  }\n\n  await userInternal.auth._persistUserIfCurrent(userInternal);\n  return userInternal;\n}\n\nexport async function _link(\n  user: UserInternal,\n  credential: AuthCredential,\n  bypassAuthState = false\n): Promise<UserCredentialInternal> {\n  const response = await _logoutIfInvalidated(\n    user,\n    credential._linkToIdToken(user.auth, await user.getIdToken()),\n    bypassAuthState\n  );\n  return UserCredentialImpl._forOperation(user, OperationType.LINK, response);\n}\n\nexport async function _assertLinkedStatus(\n  expected: boolean,\n  user: UserInternal,\n  provider: string\n): Promise<void> {\n  await _reloadWithoutSaving(user);\n  const providerIds = providerDataAsNames(user.providerData);\n\n  const code =\n    expected === false\n      ? AuthErrorCode.PROVIDER_ALREADY_LINKED\n      : AuthErrorCode.NO_SUCH_PROVIDER;\n  _assert(providerIds.has(provider) === expected, user.auth, code);\n}\n", "/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseError } from '@firebase/util';\nimport { _processCredentialSavingMfaContextIfNecessary } from '../../mfa/mfa_error';\nimport { OperationType } from '../../model/enums';\nimport { UserInternal } from '../../model/user';\nimport { AuthCredential } from '../credentials';\nimport { AuthErrorCode } from '../errors';\nimport { _assert, _fail } from '../util/assert';\nimport { _parseToken } from './id_token_result';\nimport { _logoutIfInvalidated } from './invalidation';\nimport { UserCredentialImpl } from './user_credential_impl';\n\nexport async function _reauthenticate(\n  user: UserInternal,\n  credential: AuthCredential,\n  bypassAuthState = false\n): Promise<UserCredentialImpl> {\n  const { auth } = user;\n  const operationType = OperationType.REAUTHENTICATE;\n\n  try {\n    const response = await _logoutIfInvalidated(\n      user,\n      _processCredentialSavingMfaContextIfNecessary(\n        auth,\n        operationType,\n        credential,\n        user\n      ),\n      bypassAuthState\n    );\n    _assert(response.idToken, auth, AuthErrorCode.INTERNAL_ERROR);\n    const parsed = _parseToken(response.idToken);\n    _assert(parsed, auth, AuthErrorCode.INTERNAL_ERROR);\n\n    const { sub: localId } = parsed;\n    _assert(user.uid === localId, auth, AuthErrorCode.USER_MISMATCH);\n\n    return UserCredentialImpl._forOperation(user, operationType, response);\n  } catch (e) {\n    // Convert user deleted error into user mismatch\n    if ((e as FirebaseError)?.code === `auth/${AuthErrorCode.USER_DELETED}`) {\n      _fail(auth, AuthErrorCode.USER_MISMATCH);\n    }\n    throw e;\n  }\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { UserCredential, Auth, User } from '../../model/public_types';\n\nimport { _processCredentialSavingMfaContextIfNecessary } from '../../mfa/mfa_error';\nimport { AuthInternal } from '../../model/auth';\nimport { UserInternal } from '../../model/user';\nimport { AuthCredential } from '../credentials';\nimport { _assertLinkedStatus, _link } from '../user/link_unlink';\nimport { _reauthenticate } from '../user/reauthenticate';\nimport { UserCredentialImpl } from '../user/user_credential_impl';\nimport { _castAuth } from '../auth/auth_impl';\nimport { getModularInstance } from '@firebase/util';\nimport { OperationType } from '../../model/enums';\n\nexport async function _signInWithCredential(\n  auth: AuthInternal,\n  credential: AuthCredential,\n  bypassAuthState = false\n): Promise<UserCredential> {\n  const operationType = OperationType.SIGN_IN;\n  const response = await _processCredentialSavingMfaContextIfNecessary(\n    auth,\n    operationType,\n    credential\n  );\n  const userCredential = await UserCredentialImpl._fromIdTokenResponse(\n    auth,\n    operationType,\n    response\n  );\n\n  if (!bypassAuthState) {\n    await auth._updateCurrentUser(userCredential.user);\n  }\n  return userCredential;\n}\n\n/**\n * Asynchronously signs in with the given credentials.\n *\n * @remarks\n * An {@link AuthProvider} can be used to generate the credential.\n *\n * @param auth - The {@link Auth} instance.\n * @param credential - The auth credential.\n *\n * @public\n */\nexport async function signInWithCredential(\n  auth: Auth,\n  credential: AuthCredential\n): Promise<UserCredential> {\n  return _signInWithCredential(_castAuth(auth), credential);\n}\n\n/**\n * Links the user account with the given credentials.\n *\n * @remarks\n * An {@link AuthProvider} can be used to generate the credential.\n *\n * @param user - The user.\n * @param credential - The auth credential.\n *\n * @public\n */\nexport async function linkWithCredential(\n  user: User,\n  credential: AuthCredential\n): Promise<UserCredential> {\n  const userInternal = getModularInstance(user) as UserInternal;\n\n  await _assertLinkedStatus(false, userInternal, credential.providerId);\n\n  return _link(userInternal, credential);\n}\n\n/**\n * Re-authenticates a user using a fresh credential.\n *\n * @remarks\n * Use before operations such as {@link updatePassword} that require tokens from recent sign-in\n * attempts. This method can be used to recover from a `CREDENTIAL_TOO_OLD_LOGIN_AGAIN` error\n * or a `TOKEN_EXPIRED` error.\n *\n * @param user - The user.\n * @param credential - The auth credential.\n *\n * @public\n */\nexport async function reauthenticateWithCredential(\n  user: User,\n  credential: AuthCredential\n): Promise<UserCredential> {\n  return _reauthenticate(getModularInstance(user) as UserInternal, credential);\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Endpoint,\n  HttpMethod,\n  _addTidIfNecessary,\n  _performSignInRequest\n} from '../index';\nimport { IdTokenResponse } from '../../model/id_token';\nimport { Auth } from '../../model/public_types';\n\nexport interface SignInWithCustomTokenRequest {\n  token: string;\n  returnSecureToken: boolean;\n  tenantId?: string;\n}\n\nexport interface SignInWithCustomTokenResponse extends IdTokenResponse {}\n\nexport async function signInWithCustomToken(\n  auth: Auth,\n  request: SignInWithCustomTokenRequest\n): Promise<SignInWithCustomTokenResponse> {\n  return _performSignInRequest<\n    SignInWithCustomTokenRequest,\n    SignInWithCustomTokenResponse\n  >(\n    auth,\n    HttpMethod.POST,\n    Endpoint.SIGN_IN_WITH_CUSTOM_TOKEN,\n    _addTidIfNecessary(auth, request)\n  );\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Auth, UserCredential } from '../../model/public_types';\n\nimport { signInWithCustomToken as getIdTokenResponse } from '../../api/authentication/custom_token';\nimport { IdTokenResponse } from '../../model/id_token';\nimport { UserCredentialImpl } from '../user/user_credential_impl';\nimport { _castAuth } from '../auth/auth_impl';\nimport { OperationType } from '../../model/enums';\n\n/**\n * Asynchronously signs in using a custom token.\n *\n * @remarks\n * Custom tokens are used to integrate Firebase Auth with existing auth systems, and must\n * be generated by an auth backend using the\n * {@link https://firebase.google.com/docs/reference/admin/node/admin.auth.Auth#createcustomtoken | createCustomToken}\n * method in the {@link https://firebase.google.com/docs/auth/admin | Admin SDK} .\n *\n * Fails with an error if the token is invalid, expired, or not accepted by the Firebase Auth service.\n *\n * @param auth - The {@link Auth} instance.\n * @param customToken - The custom token to sign in with.\n *\n * @public\n */\nexport async function signInWithCustomToken(\n  auth: Auth,\n  customToken: string\n): Promise<UserCredential> {\n  const authInternal = _castAuth(auth);\n  const response: IdTokenResponse = await getIdTokenResponse(authInternal, {\n    token: customToken,\n    returnSecureToken: true\n  });\n  const cred = await UserCredentialImpl._fromIdTokenResponse(\n    authInternal,\n    OperationType.SIGN_IN,\n    response\n  );\n  await authInternal._updateCurrentUser(cred.user);\n  return cred;\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  FactorId,\n  MultiFactorInfo,\n  PhoneMultiFactorInfo,\n  TotpMultiFactorInfo\n} from '../model/public_types';\nimport {\n  PhoneMfaEnrollment,\n  MfaEnrollment,\n  TotpMfaEnrollment\n} from '../api/account_management/mfa';\nimport { AuthErrorCode } from '../core/errors';\nimport { _fail } from '../core/util/assert';\nimport { AuthInternal } from '../model/auth';\n\nexport abstract class MultiFactorInfoImpl implements MultiFactorInfo {\n  readonly uid: string;\n  readonly displayName?: string | null;\n  readonly enrollmentTime: string;\n\n  protected constructor(readonly factorId: FactorId, response: MfaEnrollment) {\n    this.uid = response.mfaEnrollmentId;\n    this.enrollmentTime = new Date(response.enrolledAt).toUTCString();\n    this.displayName = response.displayName;\n  }\n\n  static _fromServerResponse(\n    auth: AuthInternal,\n    enrollment: MfaEnrollment\n  ): MultiFactorInfoImpl {\n    if ('phoneInfo' in enrollment) {\n      return PhoneMultiFactorInfoImpl._fromServerResponse(auth, enrollment);\n    } else if ('totpInfo' in enrollment) {\n      return TotpMultiFactorInfoImpl._fromServerResponse(auth, enrollment);\n    }\n    return _fail(auth, AuthErrorCode.INTERNAL_ERROR);\n  }\n}\n\nexport class PhoneMultiFactorInfoImpl\n  extends MultiFactorInfoImpl\n  implements PhoneMultiFactorInfo\n{\n  readonly phoneNumber: string;\n\n  private constructor(response: PhoneMfaEnrollment) {\n    super(FactorId.PHONE, response);\n    this.phoneNumber = response.phoneInfo;\n  }\n\n  static _fromServerResponse(\n    _auth: AuthInternal,\n    enrollment: MfaEnrollment\n  ): PhoneMultiFactorInfoImpl {\n    return new PhoneMultiFactorInfoImpl(enrollment as PhoneMfaEnrollment);\n  }\n}\nexport class TotpMultiFactorInfoImpl\n  extends MultiFactorInfoImpl\n  implements TotpMultiFactorInfo\n{\n  private constructor(response: TotpMfaEnrollment) {\n    super(FactorId.TOTP, response);\n  }\n\n  static _fromServerResponse(\n    _auth: AuthInternal,\n    enrollment: MfaEnrollment\n  ): TotpMultiFactorInfoImpl {\n    return new TotpMultiFactorInfoImpl(enrollment as TotpMfaEnrollment);\n  }\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ActionCodeSettings, Auth } from '../../model/public_types';\n\nimport { GetOobCodeRequest } from '../../api/authentication/email_and_password';\nimport { AuthErrorCode } from '../errors';\nimport { _assert } from '../util/assert';\n\nexport function _setActionCodeSettingsOnRequest(\n  auth: Auth,\n  request: GetOobCodeRequest,\n  actionCodeSettings: ActionCodeSettings\n): void {\n  _assert(\n    actionCodeSettings.url?.length > 0,\n    auth,\n    AuthErrorCode.INVALID_CONTINUE_URI\n  );\n  _assert(\n    typeof actionCodeSettings.dynamicLinkDomain === 'undefined' ||\n      actionCodeSettings.dynamicLinkDomain.length > 0,\n    auth,\n    AuthErrorCode.INVALID_DYNAMIC_LINK_DOMAIN\n  );\n\n  request.continueUrl = actionCodeSettings.url;\n  request.dynamicLinkDomain = actionCodeSettings.dynamicLinkDomain;\n  request.canHandleCodeInApp = actionCodeSettings.handleCodeInApp;\n\n  if (actionCodeSettings.iOS) {\n    _assert(\n      actionCodeSettings.iOS.bundleId.length > 0,\n      auth,\n      AuthErrorCode.MISSING_IOS_BUNDLE_ID\n    );\n    request.iOSBundleId = actionCodeSettings.iOS.bundleId;\n  }\n\n  if (actionCodeSettings.android) {\n    _assert(\n      actionCodeSettings.android.packageName.length > 0,\n      auth,\n      AuthErrorCode.MISSING_ANDROID_PACKAGE_NAME\n    );\n    request.androidInstallApp = actionCodeSettings.android.installApp;\n    request.androidMinimumVersionCode =\n      actionCodeSettings.android.minimumVersion;\n    request.androidPackageName = actionCodeSettings.android.packageName;\n  }\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  ActionCodeInfo,\n  ActionCodeOperation,\n  ActionCodeSettings,\n  Auth,\n  UserCredential\n} from '../../model/public_types';\n\nimport * as account from '../../api/account_management/email_and_password';\nimport * as authentication from '../../api/authentication/email_and_password';\nimport { signUp, SignUpRequest } from '../../api/authentication/sign_up';\nimport { MultiFactorInfoImpl } from '../../mfa/mfa_info';\nimport { EmailAuthProvider } from '../providers/email';\nimport { UserCredentialImpl } from '../user/user_credential_impl';\nimport { _assert } from '../util/assert';\nimport { _setActionCodeSettingsOnRequest } from './action_code_settings';\nimport { signInWithCredential } from './credential';\nimport { _castAuth } from '../auth/auth_impl';\nimport { AuthErrorCode } from '../errors';\nimport { getModularInstance } from '@firebase/util';\nimport { OperationType } from '../../model/enums';\nimport { handleRecaptchaFlow } from '../../platform_browser/recaptcha/recaptcha_enterprise_verifier';\nimport { IdTokenResponse } from '../../model/id_token';\nimport { RecaptchaActionName, RecaptchaClientType } from '../../api';\n\n/**\n * Updates the password policy cached in the {@link Auth} instance if a policy is already\n * cached for the project or tenant.\n *\n * @remarks\n * We only fetch the password policy if the password did not meet policy requirements and\n * there is an existing policy cached. A developer must call validatePassword at least\n * once for the cache to be automatically updated.\n *\n * @param auth - The {@link Auth} instance.\n *\n * @private\n */\nasync function recachePasswordPolicy(auth: Auth): Promise<void> {\n  const authInternal = _castAuth(auth);\n  if (authInternal._getPasswordPolicyInternal()) {\n    await authInternal._updatePasswordPolicy();\n  }\n}\n\n/**\n * Sends a password reset email to the given email address. This method does not throw an error when\n * there's no user account with the given email address and\n * [Email Enumeration Protection](https://cloud.google.com/identity-platform/docs/admin/email-enumeration-protection) is enabled.\n *\n * @remarks\n * To complete the password reset, call {@link confirmPasswordReset} with the code supplied in\n * the email sent to the user, along with the new password specified by the user.\n *\n * @example\n * ```javascript\n * const actionCodeSettings = {\n *   url: 'https://www.example.com/?email=user@example.com',\n *   iOS: {\n *      bundleId: 'com.example.ios'\n *   },\n *   android: {\n *     packageName: 'com.example.android',\n *     installApp: true,\n *     minimumVersion: '12'\n *   },\n *   handleCodeInApp: true\n * };\n * await sendPasswordResetEmail(auth, 'user@example.com', actionCodeSettings);\n * // Obtain code from user.\n * await confirmPasswordReset('user@example.com', code);\n * ```\n *\n * @param auth - The {@link Auth} instance.\n * @param email - The user's email address.\n * @param actionCodeSettings - The {@link ActionCodeSettings}.\n *\n * @public\n */\nexport async function sendPasswordResetEmail(\n  auth: Auth,\n  email: string,\n  actionCodeSettings?: ActionCodeSettings\n): Promise<void> {\n  const authInternal = _castAuth(auth);\n  const request: authentication.PasswordResetRequest = {\n    requestType: ActionCodeOperation.PASSWORD_RESET,\n    email,\n    clientType: RecaptchaClientType.WEB\n  };\n  if (actionCodeSettings) {\n    _setActionCodeSettingsOnRequest(authInternal, request, actionCodeSettings);\n  }\n  await handleRecaptchaFlow(\n    authInternal,\n    request,\n    RecaptchaActionName.GET_OOB_CODE,\n    authentication.sendPasswordResetEmail\n  );\n}\n\n/**\n * Completes the password reset process, given a confirmation code and new password.\n *\n * @param auth - The {@link Auth} instance.\n * @param oobCode - A confirmation code sent to the user.\n * @param newPassword - The new password.\n *\n * @public\n */\nexport async function confirmPasswordReset(\n  auth: Auth,\n  oobCode: string,\n  newPassword: string\n): Promise<void> {\n  await account\n    .resetPassword(getModularInstance(auth), {\n      oobCode,\n      newPassword\n    })\n    .catch(async error => {\n      if (\n        error.code ===\n        `auth/${AuthErrorCode.PASSWORD_DOES_NOT_MEET_REQUIREMENTS}`\n      ) {\n        void recachePasswordPolicy(auth);\n      }\n\n      throw error;\n    });\n  // Do not return the email.\n}\n\n/**\n * Applies a verification code sent to the user by email or other out-of-band mechanism.\n *\n * @param auth - The {@link Auth} instance.\n * @param oobCode - A verification code sent to the user.\n *\n * @public\n */\nexport async function applyActionCode(\n  auth: Auth,\n  oobCode: string\n): Promise<void> {\n  await account.applyActionCode(getModularInstance(auth), { oobCode });\n}\n\n/**\n * Checks a verification code sent to the user by email or other out-of-band mechanism.\n *\n * @returns metadata about the code.\n *\n * @param auth - The {@link Auth} instance.\n * @param oobCode - A verification code sent to the user.\n *\n * @public\n */\nexport async function checkActionCode(\n  auth: Auth,\n  oobCode: string\n): Promise<ActionCodeInfo> {\n  const authModular = getModularInstance(auth);\n  const response = await account.resetPassword(authModular, { oobCode });\n\n  // Email could be empty only if the request type is EMAIL_SIGNIN or\n  // VERIFY_AND_CHANGE_EMAIL.\n  // New email should not be empty if the request type is\n  // VERIFY_AND_CHANGE_EMAIL.\n  // Multi-factor info could not be empty if the request type is\n  // REVERT_SECOND_FACTOR_ADDITION.\n  const operation = response.requestType;\n  _assert(operation, authModular, AuthErrorCode.INTERNAL_ERROR);\n  switch (operation) {\n    case ActionCodeOperation.EMAIL_SIGNIN:\n      break;\n    case ActionCodeOperation.VERIFY_AND_CHANGE_EMAIL:\n      _assert(response.newEmail, authModular, AuthErrorCode.INTERNAL_ERROR);\n      break;\n    case ActionCodeOperation.REVERT_SECOND_FACTOR_ADDITION:\n      _assert(response.mfaInfo, authModular, AuthErrorCode.INTERNAL_ERROR);\n    // fall through\n    default:\n      _assert(response.email, authModular, AuthErrorCode.INTERNAL_ERROR);\n  }\n\n  // The multi-factor info for revert second factor addition\n  let multiFactorInfo: MultiFactorInfoImpl | null = null;\n  if (response.mfaInfo) {\n    multiFactorInfo = MultiFactorInfoImpl._fromServerResponse(\n      _castAuth(authModular),\n      response.mfaInfo\n    );\n  }\n\n  return {\n    data: {\n      email:\n        (response.requestType === ActionCodeOperation.VERIFY_AND_CHANGE_EMAIL\n          ? response.newEmail\n          : response.email) || null,\n      previousEmail:\n        (response.requestType === ActionCodeOperation.VERIFY_AND_CHANGE_EMAIL\n          ? response.email\n          : response.newEmail) || null,\n      multiFactorInfo\n    },\n    operation\n  };\n}\n\n/**\n * Checks a password reset code sent to the user by email or other out-of-band mechanism.\n *\n * @returns the user's email address if valid.\n *\n * @param auth - The {@link Auth} instance.\n * @param code - A verification code sent to the user.\n *\n * @public\n */\nexport async function verifyPasswordResetCode(\n  auth: Auth,\n  code: string\n): Promise<string> {\n  const { data } = await checkActionCode(getModularInstance(auth), code);\n  // Email should always be present since a code was sent to it\n  return data.email!;\n}\n\n/**\n * Creates a new user account associated with the specified email address and password.\n *\n * @remarks\n * On successful creation of the user account, this user will also be signed in to your application.\n *\n * User account creation can fail if the account already exists or the password is invalid.\n *\n * Note: The email address acts as a unique identifier for the user and enables an email-based\n * password reset. This function will create a new user account and set the initial user password.\n *\n * @param auth - The {@link Auth} instance.\n * @param email - The user's email address.\n * @param password - The user's chosen password.\n *\n * @public\n */\nexport async function createUserWithEmailAndPassword(\n  auth: Auth,\n  email: string,\n  password: string\n): Promise<UserCredential> {\n  const authInternal = _castAuth(auth);\n  const request: SignUpRequest = {\n    returnSecureToken: true,\n    email,\n    password,\n    clientType: RecaptchaClientType.WEB\n  };\n  const signUpResponse: Promise<IdTokenResponse> = handleRecaptchaFlow(\n    authInternal,\n    request,\n    RecaptchaActionName.SIGN_UP_PASSWORD,\n    signUp\n  );\n  const response = await signUpResponse.catch(error => {\n    if (\n      error.code === `auth/${AuthErrorCode.PASSWORD_DOES_NOT_MEET_REQUIREMENTS}`\n    ) {\n      void recachePasswordPolicy(auth);\n    }\n\n    throw error;\n  });\n\n  const userCredential = await UserCredentialImpl._fromIdTokenResponse(\n    authInternal,\n    OperationType.SIGN_IN,\n    response\n  );\n  await authInternal._updateCurrentUser(userCredential.user);\n\n  return userCredential;\n}\n\n/**\n * Asynchronously signs in using an email and password.\n *\n * @remarks\n * Fails with an error if the email address and password do not match.\n * When [Email Enumeration Protection](https://cloud.google.com/identity-platform/docs/admin/email-enumeration-protection) is enabled,\n * this method fails with \"auth/invalid-credential\" in case of an invalid email/password.\n *\n * Note: The user's password is NOT the password used to access the user's email account. The\n * email address serves as a unique identifier for the user, and the password is used to access\n * the user's account in your Firebase project. See also: {@link createUserWithEmailAndPassword}.\n *\n * @param auth - The {@link Auth} instance.\n * @param email - The users email address.\n * @param password - The users password.\n *\n * @public\n */\nexport function signInWithEmailAndPassword(\n  auth: Auth,\n  email: string,\n  password: string\n): Promise<UserCredential> {\n  return signInWithCredential(\n    getModularInstance(auth),\n    EmailAuthProvider.credential(email, password)\n  ).catch(async error => {\n    if (\n      error.code === `auth/${AuthErrorCode.PASSWORD_DOES_NOT_MEET_REQUIREMENTS}`\n    ) {\n      void recachePasswordPolicy(auth);\n    }\n\n    throw error;\n  });\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  ActionCodeOperation,\n  ActionCodeSettings,\n  Auth,\n  UserCredential\n} from '../../model/public_types';\n\nimport * as api from '../../api/authentication/email_and_password';\nimport { ActionCodeURL } from '../action_code_url';\nimport { EmailAuthProvider } from '../providers/email';\nimport { _getCurrentUrl } from '../util/location';\nimport { _setActionCodeSettingsOnRequest } from './action_code_settings';\nimport { signInWithCredential } from './credential';\nimport { AuthErrorCode } from '../errors';\nimport { _assert } from '../util/assert';\nimport { getModularInstance } from '@firebase/util';\nimport { _castAuth } from '../auth/auth_impl';\nimport { handleRecaptchaFlow } from '../../platform_browser/recaptcha/recaptcha_enterprise_verifier';\nimport { RecaptchaActionName, RecaptchaClientType } from '../../api';\n\n/**\n * Sends a sign-in email link to the user with the specified email.\n *\n * @remarks\n * The sign-in operation has to always be completed in the app unlike other out of band email\n * actions (password reset and email verifications). This is because, at the end of the flow,\n * the user is expected to be signed in and their Auth state persisted within the app.\n *\n * To complete sign in with the email link, call {@link signInWithEmailLink} with the email\n * address and the email link supplied in the email sent to the user.\n *\n * @example\n * ```javascript\n * const actionCodeSettings = {\n *   url: 'https://www.example.com/?email=user@example.com',\n *   iOS: {\n *      bundleId: 'com.example.ios'\n *   },\n *   android: {\n *     packageName: 'com.example.android',\n *     installApp: true,\n *     minimumVersion: '12'\n *   },\n *   handleCodeInApp: true\n * };\n * await sendSignInLinkToEmail(auth, 'user@example.com', actionCodeSettings);\n * // Obtain emailLink from the user.\n * if(isSignInWithEmailLink(auth, emailLink)) {\n *   await signInWithEmailLink(auth, 'user@example.com', emailLink);\n * }\n * ```\n *\n * @param authInternal - The {@link Auth} instance.\n * @param email - The user's email address.\n * @param actionCodeSettings - The {@link ActionCodeSettings}.\n *\n * @public\n */\nexport async function sendSignInLinkToEmail(\n  auth: Auth,\n  email: string,\n  actionCodeSettings: ActionCodeSettings\n): Promise<void> {\n  const authInternal = _castAuth(auth);\n  const request: api.EmailSignInRequest = {\n    requestType: ActionCodeOperation.EMAIL_SIGNIN,\n    email,\n    clientType: RecaptchaClientType.WEB\n  };\n  function setActionCodeSettings(\n    request: api.EmailSignInRequest,\n    actionCodeSettings: ActionCodeSettings\n  ): void {\n    _assert(\n      actionCodeSettings.handleCodeInApp,\n      authInternal,\n      AuthErrorCode.ARGUMENT_ERROR\n    );\n    if (actionCodeSettings) {\n      _setActionCodeSettingsOnRequest(\n        authInternal,\n        request,\n        actionCodeSettings\n      );\n    }\n  }\n  setActionCodeSettings(request, actionCodeSettings);\n  await handleRecaptchaFlow(\n    authInternal,\n    request,\n    RecaptchaActionName.GET_OOB_CODE,\n    api.sendSignInLinkToEmail\n  );\n}\n\n/**\n * Checks if an incoming link is a sign-in with email link suitable for {@link signInWithEmailLink}.\n *\n * @param auth - The {@link Auth} instance.\n * @param emailLink - The link sent to the user's email address.\n *\n * @public\n */\nexport function isSignInWithEmailLink(auth: Auth, emailLink: string): boolean {\n  const actionCodeUrl = ActionCodeURL.parseLink(emailLink);\n  return actionCodeUrl?.operation === ActionCodeOperation.EMAIL_SIGNIN;\n}\n\n/**\n * Asynchronously signs in using an email and sign-in email link.\n *\n * @remarks\n * If no link is passed, the link is inferred from the current URL.\n *\n * Fails with an error if the email address is invalid or OTP in email link expires.\n *\n * Note: Confirm the link is a sign-in email link before calling this method firebase.auth.Auth.isSignInWithEmailLink.\n *\n * @example\n * ```javascript\n * const actionCodeSettings = {\n *   url: 'https://www.example.com/?email=user@example.com',\n *   iOS: {\n *      bundleId: 'com.example.ios'\n *   },\n *   android: {\n *     packageName: 'com.example.android',\n *     installApp: true,\n *     minimumVersion: '12'\n *   },\n *   handleCodeInApp: true\n * };\n * await sendSignInLinkToEmail(auth, 'user@example.com', actionCodeSettings);\n * // Obtain emailLink from the user.\n * if(isSignInWithEmailLink(auth, emailLink)) {\n *   await signInWithEmailLink(auth, 'user@example.com', emailLink);\n * }\n * ```\n *\n * @param auth - The {@link Auth} instance.\n * @param email - The user's email address.\n * @param emailLink - The link sent to the user's email address.\n *\n * @public\n */\nexport async function signInWithEmailLink(\n  auth: Auth,\n  email: string,\n  emailLink?: string\n): Promise<UserCredential> {\n  const authModular = getModularInstance(auth);\n  const credential = EmailAuthProvider.credentialWithLink(\n    email,\n    emailLink || _getCurrentUrl()\n  );\n  // Check if the tenant ID in the email link matches the tenant ID on Auth\n  // instance.\n  _assert(\n    credential._tenantId === (authModular.tenantId || null),\n    authModular,\n    AuthErrorCode.TENANT_ID_MISMATCH\n  );\n  return signInWithCredential(authModular, credential);\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Endpoint,\n  HttpMethod,\n  _addTidIfNecessary,\n  _performApiRequest\n} from '../index';\nimport { Auth } from '../../model/public_types';\n\nexport interface CreateAuthUriRequest {\n  identifier: string;\n  continueUri: string;\n  tenantId?: string;\n}\n\nexport interface CreateAuthUriResponse {\n  signinMethods: string[];\n}\n\nexport async function createAuthUri(\n  auth: Auth,\n  request: CreateAuthUriRequest\n): Promise<CreateAuthUriResponse> {\n  return _performApiRequest<CreateAuthUriRequest, CreateAuthUriResponse>(\n    auth,\n    HttpMethod.POST,\n    Endpoint.CREATE_AUTH_URI,\n    _addTidIfNecessary(auth, request)\n  );\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  ActionCodeOperation,\n  ActionCodeSettings,\n  Auth,\n  User\n} from '../../model/public_types';\n\nimport {\n  createAuthUri,\n  CreateAuthUriRequest\n} from '../../api/authentication/create_auth_uri';\nimport * as api from '../../api/authentication/email_and_password';\nimport { UserInternal } from '../../model/user';\nimport { _getCurrentUrl, _isHttpOrHttps } from '../util/location';\nimport { _setActionCodeSettingsOnRequest } from './action_code_settings';\nimport { getModularInstance } from '@firebase/util';\n\n/**\n * Gets the list of possible sign in methods for the given email address. This method returns an\n * empty list when [Email Enumeration Protection](https://cloud.google.com/identity-platform/docs/admin/email-enumeration-protection) is enabled, irrespective of the number of\n * authentication methods available for the given email.\n *\n * @remarks\n * This is useful to differentiate methods of sign-in for the same provider, eg.\n * {@link EmailAuthProvider} which has 2 methods of sign-in,\n * {@link SignInMethod}.EMAIL_PASSWORD and\n * {@link SignInMethod}.EMAIL_LINK.\n *\n * @param auth - The {@link Auth} instance.\n * @param email - The user's email address.\n *\n * Deprecated. Migrating off of this method is recommended as a security best-practice.\n * Learn more in the Identity Platform documentation for [Email Enumeration Protection](https://cloud.google.com/identity-platform/docs/admin/email-enumeration-protection).\n * @public\n */\nexport async function fetchSignInMethodsForEmail(\n  auth: Auth,\n  email: string\n): Promise<string[]> {\n  // createAuthUri returns an error if continue URI is not http or https.\n  // For environments like Cordova, Chrome extensions, native frameworks, file\n  // systems, etc, use http://localhost as continue URL.\n  const continueUri = _isHttpOrHttps() ? _getCurrentUrl() : 'http://localhost';\n  const request: CreateAuthUriRequest = {\n    identifier: email,\n    continueUri\n  };\n\n  const { signinMethods } = await createAuthUri(\n    getModularInstance(auth),\n    request\n  );\n\n  return signinMethods || [];\n}\n\n/**\n * Sends a verification email to a user.\n *\n * @remarks\n * The verification process is completed by calling {@link applyActionCode}.\n *\n * @example\n * ```javascript\n * const actionCodeSettings = {\n *   url: 'https://www.example.com/?email=user@example.com',\n *   iOS: {\n *      bundleId: 'com.example.ios'\n *   },\n *   android: {\n *     packageName: 'com.example.android',\n *     installApp: true,\n *     minimumVersion: '12'\n *   },\n *   handleCodeInApp: true\n * };\n * await sendEmailVerification(user, actionCodeSettings);\n * // Obtain code from the user.\n * await applyActionCode(auth, code);\n * ```\n *\n * @param user - The user.\n * @param actionCodeSettings - The {@link ActionCodeSettings}.\n *\n * @public\n */\nexport async function sendEmailVerification(\n  user: User,\n  actionCodeSettings?: ActionCodeSettings | null\n): Promise<void> {\n  const userInternal = getModularInstance(user) as UserInternal;\n  const idToken = await user.getIdToken();\n  const request: api.VerifyEmailRequest = {\n    requestType: ActionCodeOperation.VERIFY_EMAIL,\n    idToken\n  };\n  if (actionCodeSettings) {\n    _setActionCodeSettingsOnRequest(\n      userInternal.auth,\n      request,\n      actionCodeSettings\n    );\n  }\n\n  const { email } = await api.sendEmailVerification(userInternal.auth, request);\n\n  if (email !== user.email) {\n    await user.reload();\n  }\n}\n\n/**\n * Sends a verification email to a new email address.\n *\n * @remarks\n * The user's email will be updated to the new one after being verified.\n *\n * If you have a custom email action handler, you can complete the verification process by calling\n * {@link applyActionCode}.\n *\n * @example\n * ```javascript\n * const actionCodeSettings = {\n *   url: 'https://www.example.com/?email=user@example.com',\n *   iOS: {\n *      bundleId: 'com.example.ios'\n *   },\n *   android: {\n *     packageName: 'com.example.android',\n *     installApp: true,\n *     minimumVersion: '12'\n *   },\n *   handleCodeInApp: true\n * };\n * await verifyBeforeUpdateEmail(user, 'newemail@example.com', actionCodeSettings);\n * // Obtain code from the user.\n * await applyActionCode(auth, code);\n * ```\n *\n * @param user - The user.\n * @param newEmail - The new email address to be verified before update.\n * @param actionCodeSettings - The {@link ActionCodeSettings}.\n *\n * @public\n */\nexport async function verifyBeforeUpdateEmail(\n  user: User,\n  newEmail: string,\n  actionCodeSettings?: ActionCodeSettings | null\n): Promise<void> {\n  const userInternal = getModularInstance(user) as UserInternal;\n  const idToken = await user.getIdToken();\n  const request: api.VerifyAndChangeEmailRequest = {\n    requestType: ActionCodeOperation.VERIFY_AND_CHANGE_EMAIL,\n    idToken,\n    newEmail\n  };\n  if (actionCodeSettings) {\n    _setActionCodeSettingsOnRequest(\n      userInternal.auth,\n      request,\n      actionCodeSettings\n    );\n  }\n\n  const { email } = await api.verifyAndChangeEmail(userInternal.auth, request);\n\n  if (email !== user.email) {\n    // If the local copy of the email on user is outdated, reload the\n    // user.\n    await user.reload();\n  }\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Endpoint, HttpMethod, _performApiRequest } from '../index';\nimport { IdTokenResponse } from '../../model/id_token';\nimport { Auth } from '../../model/public_types';\n\nexport interface UpdateProfileRequest {\n  idToken: string;\n  displayName?: string | null;\n  photoUrl?: string | null;\n  returnSecureToken: boolean;\n}\n\nexport interface UpdateProfileResponse extends IdTokenResponse {\n  displayName?: string | null;\n  photoUrl?: string | null;\n}\n\nexport async function updateProfile(\n  auth: Auth,\n  request: UpdateProfileRequest\n): Promise<UpdateProfileResponse> {\n  return _performApiRequest<UpdateProfileRequest, UpdateProfileResponse>(\n    auth,\n    HttpMethod.POST,\n    Endpoint.SET_ACCOUNT_INFO,\n    request\n  );\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { User } from '../../model/public_types';\n\nimport {\n  updateEmailPassword as apiUpdateEmailPassword,\n  UpdateEmailPasswordRequest\n} from '../../api/account_management/email_and_password';\nimport { updateProfile as apiUpdateProfile } from '../../api/account_management/profile';\nimport { UserInternal } from '../../model/user';\nimport { _logoutIfInvalidated } from './invalidation';\nimport { getModularInstance } from '@firebase/util';\nimport { ProviderId } from '../../model/enums';\n\n/**\n * Updates a user's profile data.\n *\n * @param user - The user.\n * @param profile - The profile's `displayName` and `photoURL` to update.\n *\n * @public\n */\nexport async function updateProfile(\n  user: User,\n  {\n    displayName,\n    photoURL: photoUrl\n  }: { displayName?: string | null; photoURL?: string | null }\n): Promise<void> {\n  if (displayName === undefined && photoUrl === undefined) {\n    return;\n  }\n\n  const userInternal = getModularInstance(user) as UserInternal;\n  const idToken = await userInternal.getIdToken();\n  const profileRequest = {\n    idToken,\n    displayName,\n    photoUrl,\n    returnSecureToken: true\n  };\n  const response = await _logoutIfInvalidated(\n    userInternal,\n    apiUpdateProfile(userInternal.auth, profileRequest)\n  );\n\n  userInternal.displayName = response.displayName || null;\n  userInternal.photoURL = response.photoUrl || null;\n\n  // Update the password provider as well\n  const passwordProvider = userInternal.providerData.find(\n    ({ providerId }) => providerId === ProviderId.PASSWORD\n  );\n  if (passwordProvider) {\n    passwordProvider.displayName = userInternal.displayName;\n    passwordProvider.photoURL = userInternal.photoURL;\n  }\n\n  await userInternal._updateTokensIfNecessary(response);\n}\n\n/**\n * Updates the user's email address.\n *\n * @remarks\n * An email will be sent to the original email address (if it was set) that allows to revoke the\n * email address change, in order to protect them from account hijacking.\n *\n * Important: this is a security sensitive operation that requires the user to have recently signed\n * in. If this requirement isn't met, ask the user to authenticate again and then call\n * {@link reauthenticateWithCredential}.\n *\n * @param user - The user.\n * @param newEmail - The new email address.\n *\n * Throws \"auth/operation-not-allowed\" error when [Email Enumeration Protection](https://cloud.google.com/identity-platform/docs/admin/email-enumeration-protection) is enabled.\n * Deprecated - Use {@link verifyBeforeUpdateEmail} instead.\n *\n * @public\n */\nexport function updateEmail(user: User, newEmail: string): Promise<void> {\n  return updateEmailOrPassword(\n    getModularInstance(user) as UserInternal,\n    newEmail,\n    null\n  );\n}\n\n/**\n * Updates the user's password.\n *\n * @remarks\n * Important: this is a security sensitive operation that requires the user to have recently signed\n * in. If this requirement isn't met, ask the user to authenticate again and then call\n * {@link reauthenticateWithCredential}.\n *\n * @param user - The user.\n * @param newPassword - The new password.\n *\n * @public\n */\nexport function updatePassword(user: User, newPassword: string): Promise<void> {\n  return updateEmailOrPassword(\n    getModularInstance(user) as UserInternal,\n    null,\n    newPassword\n  );\n}\n\nasync function updateEmailOrPassword(\n  user: UserInternal,\n  email: string | null,\n  password: string | null\n): Promise<void> {\n  const { auth } = user;\n  const idToken = await user.getIdToken();\n  const request: UpdateEmailPasswordRequest = {\n    idToken,\n    returnSecureToken: true\n  };\n\n  if (email) {\n    request.email = email;\n  }\n\n  if (password) {\n    request.password = password;\n  }\n\n  const response = await _logoutIfInvalidated(\n    user,\n    apiUpdateEmailPassword(auth, request)\n  );\n  await user._updateTokensIfNecessary(response, /* reload */ true);\n}\n", "/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AdditionalUserInfo, UserCredential } from '../../model/public_types';\nimport { IdTokenResponse, IdTokenResponseKind } from '../../model/id_token';\nimport { _parseToken } from './id_token_result';\nimport { UserCredentialInternal } from '../../model/user';\nimport { ProviderId } from '../../model/enums';\n\n/**\n * Parse the `AdditionalUserInfo` from the ID token response.\n *\n */\nexport function _fromIdTokenResponse(\n  idTokenResponse?: IdTokenResponse\n): AdditionalUserInfo | null {\n  if (!idTokenResponse) {\n    return null;\n  }\n  const { providerId } = idTokenResponse;\n  const profile = idTokenResponse.rawUserInfo\n    ? JSON.parse(idTokenResponse.rawUserInfo)\n    : {};\n  const isNewUser =\n    idTokenResponse.isNewUser ||\n    idTokenResponse.kind === IdTokenResponseKind.SignupNewUser;\n  if (!providerId && idTokenResponse?.idToken) {\n    const signInProvider = _parseToken(idTokenResponse.idToken)?.firebase?.[\n      'sign_in_provider'\n    ];\n    if (signInProvider) {\n      const filteredProviderId =\n        signInProvider !== ProviderId.ANONYMOUS &&\n        signInProvider !== ProviderId.CUSTOM\n          ? (signInProvider as ProviderId)\n          : null;\n      // Uses generic class in accordance with the legacy SDK.\n      return new GenericAdditionalUserInfo(isNewUser, filteredProviderId);\n    }\n  }\n  if (!providerId) {\n    return null;\n  }\n  switch (providerId) {\n    case ProviderId.FACEBOOK:\n      return new FacebookAdditionalUserInfo(isNewUser, profile);\n    case ProviderId.GITHUB:\n      return new GithubAdditionalUserInfo(isNewUser, profile);\n    case ProviderId.GOOGLE:\n      return new GoogleAdditionalUserInfo(isNewUser, profile);\n    case ProviderId.TWITTER:\n      return new TwitterAdditionalUserInfo(\n        isNewUser,\n        profile,\n        idTokenResponse.screenName || null\n      );\n    case ProviderId.CUSTOM:\n    case ProviderId.ANONYMOUS:\n      return new GenericAdditionalUserInfo(isNewUser, null);\n    default:\n      return new GenericAdditionalUserInfo(isNewUser, providerId, profile);\n  }\n}\n\nclass GenericAdditionalUserInfo implements AdditionalUserInfo {\n  constructor(\n    readonly isNewUser: boolean,\n    readonly providerId: ProviderId | string | null,\n    readonly profile: Record<string, unknown> = {}\n  ) {}\n}\n\nclass FederatedAdditionalUserInfoWithUsername extends GenericAdditionalUserInfo {\n  constructor(\n    isNewUser: boolean,\n    providerId: ProviderId,\n    profile: Record<string, unknown>,\n    readonly username: string | null\n  ) {\n    super(isNewUser, providerId, profile);\n  }\n}\n\nclass FacebookAdditionalUserInfo extends GenericAdditionalUserInfo {\n  constructor(isNewUser: boolean, profile: Record<string, unknown>) {\n    super(isNewUser, ProviderId.FACEBOOK, profile);\n  }\n}\n\nclass GithubAdditionalUserInfo extends FederatedAdditionalUserInfoWithUsername {\n  constructor(isNewUser: boolean, profile: Record<string, unknown>) {\n    super(\n      isNewUser,\n      ProviderId.GITHUB,\n      profile,\n      typeof profile?.login === 'string' ? profile?.login : null\n    );\n  }\n}\n\nclass GoogleAdditionalUserInfo extends GenericAdditionalUserInfo {\n  constructor(isNewUser: boolean, profile: Record<string, unknown>) {\n    super(isNewUser, ProviderId.GOOGLE, profile);\n  }\n}\n\nclass TwitterAdditionalUserInfo extends FederatedAdditionalUserInfoWithUsername {\n  constructor(\n    isNewUser: boolean,\n    profile: Record<string, unknown>,\n    screenName: string | null\n  ) {\n    super(isNewUser, ProviderId.TWITTER, profile, screenName);\n  }\n}\n\n/**\n * Extracts provider specific {@link AdditionalUserInfo} for the given credential.\n *\n * @param userCredential - The user credential.\n *\n * @public\n */\nexport function getAdditionalUserInfo(\n  userCredential: UserCredential\n): AdditionalUserInfo | null {\n  const { user, _tokenResponse } = userCredential as UserCredentialInternal;\n  if (user.isAnonymous && !_tokenResponse) {\n    // Handle the special case where signInAnonymously() gets called twice.\n    // No network call is made so there's nothing to actually fill this in\n    return {\n      providerId: null,\n      isNewUser: false,\n      profile: null\n    };\n  }\n\n  return _fromIdTokenResponse(_tokenResponse);\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getModularInstance } from '@firebase/util';\nimport {\n  Auth,\n  NextOrObserver,\n  Persistence,\n  User,\n  CompleteFn,\n  ErrorFn,\n  Unsubscribe,\n  PasswordValidationStatus\n} from '../model/public_types';\nimport { _initializeRecaptchaConfig } from '../platform_browser/recaptcha/recaptcha_enterprise_verifier';\nimport { _castAuth } from '../core/auth/auth_impl';\n\nexport {\n  debugErrorMap,\n  prodErrorMap,\n  AUTH_ERROR_CODES_MAP_DO_NOT_USE_INTERNALLY as AuthErrorCodes\n} from './errors';\n\n// Non-optional auth methods.\n/**\n * Changes the type of persistence on the {@link Auth} instance for the currently saved\n * `Auth` session and applies this type of persistence for future sign-in requests, including\n * sign-in with redirect requests.\n *\n * @remarks\n * This makes it easy for a user signing in to specify whether their session should be\n * remembered or not. It also makes it easier to never persist the `Auth` state for applications\n * that are shared by other users or have sensitive data.\n *\n * This method does not work in a Node.js environment.\n *\n * @example\n * ```javascript\n * setPersistence(auth, browserSessionPersistence);\n * ```\n *\n * @param auth - The {@link Auth} instance.\n * @param persistence - The {@link Persistence} to use.\n * @returns A `Promise` that resolves once the persistence change has completed\n *\n * @public\n */\nexport function setPersistence(\n  auth: Auth,\n  persistence: Persistence\n): Promise<void> {\n  return getModularInstance(auth).setPersistence(persistence);\n}\n\n/**\n * Loads the reCAPTCHA configuration into the `Auth` instance.\n *\n * @remarks\n * This will load the reCAPTCHA config, which indicates whether the reCAPTCHA\n * verification flow should be triggered for each auth provider, into the\n * current Auth session.\n *\n * If initializeRecaptchaConfig() is not invoked, the auth flow will always start\n * without reCAPTCHA verification. If the provider is configured to require reCAPTCHA\n * verification, the SDK will transparently load the reCAPTCHA config and restart the\n * auth flows.\n *\n * Thus, by calling this optional method, you will reduce the latency of future auth flows.\n * Loading the reCAPTCHA config early will also enhance the signal collected by reCAPTCHA.\n *\n * This method does not work in a Node.js environment.\n *\n * @example\n * ```javascript\n * initializeRecaptchaConfig(auth);\n * ```\n *\n * @param auth - The {@link Auth} instance.\n *\n * @public\n */\nexport function initializeRecaptchaConfig(auth: Auth): Promise<void> {\n  return _initializeRecaptchaConfig(auth);\n}\n\n/**\n * Validates the password against the password policy configured for the project or tenant.\n *\n * @remarks\n * If no tenant ID is set on the `Auth` instance, then this method will use the password\n * policy configured for the project. Otherwise, this method will use the policy configured\n * for the tenant. If a password policy has not been configured, then the default policy\n * configured for all projects will be used.\n *\n * If an auth flow fails because a submitted password does not meet the password policy\n * requirements and this method has previously been called, then this method will use the\n * most recent policy available when called again.\n *\n * @example\n * ```javascript\n * validatePassword(auth, 'some-password');\n * ```\n *\n * @param auth The {@link Auth} instance.\n * @param password The password to validate.\n *\n * @public\n */\nexport async function validatePassword(\n  auth: Auth,\n  password: string\n): Promise<PasswordValidationStatus> {\n  const authInternal = _castAuth(auth);\n  return authInternal.validatePassword(password);\n}\n\n/**\n * Adds an observer for changes to the signed-in user's ID token.\n *\n * @remarks\n * This includes sign-in, sign-out, and token refresh events.\n * This will not be triggered automatically upon ID token expiration. Use {@link User.getIdToken} to refresh the ID token.\n *\n * @param auth - The {@link Auth} instance.\n * @param nextOrObserver - callback triggered on change.\n * @param error - Deprecated. This callback is never triggered. Errors\n * on signing in/out can be caught in promises returned from\n * sign-in/sign-out functions.\n * @param completed - Deprecated. This callback is never triggered.\n *\n * @public\n */\nexport function onIdTokenChanged(\n  auth: Auth,\n  nextOrObserver: NextOrObserver<User>,\n  error?: ErrorFn,\n  completed?: CompleteFn\n): Unsubscribe {\n  return getModularInstance(auth).onIdTokenChanged(\n    nextOrObserver,\n    error,\n    completed\n  );\n}\n/**\n * Adds a blocking callback that runs before an auth state change\n * sets a new user.\n *\n * @param auth - The {@link Auth} instance.\n * @param callback - callback triggered before new user value is set.\n *   If this throws, it blocks the user from being set.\n * @param onAbort - callback triggered if a later `beforeAuthStateChanged()`\n *   callback throws, allowing you to undo any side effects.\n */\nexport function beforeAuthStateChanged(\n  auth: Auth,\n  callback: (user: User | null) => void | Promise<void>,\n  onAbort?: () => void\n): Unsubscribe {\n  return getModularInstance(auth).beforeAuthStateChanged(callback, onAbort);\n}\n/**\n * Adds an observer for changes to the user's sign-in state.\n *\n * @remarks\n * To keep the old behavior, see {@link onIdTokenChanged}.\n *\n * @param auth - The {@link Auth} instance.\n * @param nextOrObserver - callback triggered on change.\n * @param error - Deprecated. This callback is never triggered. Errors\n * on signing in/out can be caught in promises returned from\n * sign-in/sign-out functions.\n * @param completed - Deprecated. This callback is never triggered.\n *\n * @public\n */\nexport function onAuthStateChanged(\n  auth: Auth,\n  nextOrObserver: NextOrObserver<User>,\n  error?: ErrorFn,\n  completed?: CompleteFn\n): Unsubscribe {\n  return getModularInstance(auth).onAuthStateChanged(\n    nextOrObserver,\n    error,\n    completed\n  );\n}\n/**\n * Sets the current language to the default device/browser preference.\n *\n * @param auth - The {@link Auth} instance.\n *\n * @public\n */\nexport function useDeviceLanguage(auth: Auth): void {\n  getModularInstance(auth).useDeviceLanguage();\n}\n/**\n * Asynchronously sets the provided user as {@link Auth.currentUser} on the\n * {@link Auth} instance.\n *\n * @remarks\n * A new instance copy of the user provided will be made and set as currentUser.\n *\n * This will trigger {@link onAuthStateChanged} and {@link onIdTokenChanged} listeners\n * like other sign in methods.\n *\n * The operation fails with an error if the user to be updated belongs to a different Firebase\n * project.\n *\n * @param auth - The {@link Auth} instance.\n * @param user - The new {@link User}.\n *\n * @public\n */\nexport function updateCurrentUser(\n  auth: Auth,\n  user: User | null\n): Promise<void> {\n  return getModularInstance(auth).updateCurrentUser(user);\n}\n/**\n * Signs out the current user.\n *\n * @param auth - The {@link Auth} instance.\n *\n * @public\n */\nexport function signOut(auth: Auth): Promise<void> {\n  return getModularInstance(auth).signOut();\n}\n\n/**\n * Revokes the given access token. Currently only supports Apple OAuth access tokens.\n *\n * @param auth - The {@link Auth} instance.\n * @param token - The Apple OAuth access token.\n *\n * @public\n */\nexport function revokeAccessToken(auth: Auth, token: string): Promise<void> {\n  const authInternal = _castAuth(auth);\n  return authInternal.revokeAccessToken(token);\n}\n\nexport { initializeAuth } from './auth/initialize';\nexport { connectAuthEmulator } from './auth/emulator';\n\n// credentials\nexport { AuthCredential } from './credentials';\nexport { EmailAuthCredential } from './credentials/email';\nexport { OAuthCredential } from './credentials/oauth';\nexport { PhoneAuthCredential } from './credentials/phone';\n\n// persistence\nexport { inMemoryPersistence } from './persistence/in_memory';\n\n// providers\nexport { EmailAuthProvider } from './providers/email';\nexport { FacebookAuthProvider } from './providers/facebook';\nexport { CustomParameters } from './providers/federated';\nexport { GoogleAuthProvider } from './providers/google';\nexport { GithubAuthProvider } from './providers/github';\nexport { OAuthProvider, OAuthCredentialOptions } from './providers/oauth';\nexport { SAMLAuthProvider } from './providers/saml';\nexport { TwitterAuthProvider } from './providers/twitter';\n\n// strategies\nexport { signInAnonymously } from './strategies/anonymous';\nexport {\n  signInWithCredential,\n  linkWithCredential,\n  reauthenticateWithCredential\n} from './strategies/credential';\nexport { signInWithCustomToken } from './strategies/custom_token';\nexport {\n  sendPasswordResetEmail,\n  confirmPasswordReset,\n  applyActionCode,\n  checkActionCode,\n  verifyPasswordResetCode,\n  createUserWithEmailAndPassword,\n  signInWithEmailAndPassword\n} from './strategies/email_and_password';\nexport {\n  sendSignInLinkToEmail,\n  isSignInWithEmailLink,\n  signInWithEmailLink\n} from './strategies/email_link';\nexport {\n  fetchSignInMethodsForEmail,\n  sendEmailVerification,\n  verifyBeforeUpdateEmail\n} from './strategies/email';\n\n// core\nexport { ActionCodeURL, parseActionCodeURL } from './action_code_url';\n\n// user\nexport {\n  updateProfile,\n  updateEmail,\n  updatePassword\n} from './user/account_info';\nexport { getIdToken, getIdTokenResult } from './user/id_token_result';\nexport { unlink } from './user/link_unlink';\nexport { getAdditionalUserInfo } from './user/additional_user_info';\n\n// Non-optional user methods.\nexport { reload } from './user/reload';\n/**\n * Deletes and signs out the user.\n *\n * @remarks\n * Important: this is a security-sensitive operation that requires the user to have recently\n * signed in. If this requirement isn't met, ask the user to authenticate again and then call\n * {@link reauthenticateWithCredential}.\n *\n * @param user - The user.\n *\n * @public\n */\nexport async function deleteUser(user: User): Promise<void> {\n  return getModularInstance(user).delete();\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { UserInternal } from '../model/user';\nimport { MultiFactorSession } from '../model/public_types';\n\nexport const enum MultiFactorSessionType {\n  ENROLL = 'enroll',\n  SIGN_IN = 'signin'\n}\n\ninterface SerializedMultiFactorSession {\n  multiFactorSession: {\n    idToken?: string;\n    pendingCredential?: string;\n  };\n}\n\nexport class MultiFactorSessionImpl implements MultiFactorSession {\n  private constructor(\n    readonly type: MultiFactorSessionType,\n    readonly credential: string,\n    readonly user?: UserInternal\n  ) {}\n\n  static _fromIdtoken(\n    idToken: string,\n    user?: UserInternal\n  ): MultiFactorSessionImpl {\n    return new MultiFactorSessionImpl(\n      MultiFactorSessionType.ENROLL,\n      idToken,\n      user\n    );\n  }\n\n  static _fromMfaPendingCredential(\n    mfaPendingCredential: string\n  ): MultiFactorSessionImpl {\n    return new MultiFactorSessionImpl(\n      MultiFactorSessionType.SIGN_IN,\n      mfaPendingCredential\n    );\n  }\n\n  toJSON(): SerializedMultiFactorSession {\n    const key =\n      this.type === MultiFactorSessionType.ENROLL\n        ? 'idToken'\n        : 'pendingCredential';\n    return {\n      multiFactorSession: {\n        [key]: this.credential\n      }\n    };\n  }\n\n  static fromJSON(\n    obj: Partial<SerializedMultiFactorSession>\n  ): MultiFactorSessionImpl | null {\n    if (obj?.multiFactorSession) {\n      if (obj.multiFactorSession?.pendingCredential) {\n        return MultiFactorSessionImpl._fromMfaPendingCredential(\n          obj.multiFactorSession.pendingCredential\n        );\n      } else if (obj.multiFactorSession?.idToken) {\n        return MultiFactorSessionImpl._fromIdtoken(\n          obj.multiFactorSession.idToken\n        );\n      }\n    }\n    return null;\n  }\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Auth,\n  MultiFactorResolver,\n  UserCredential,\n  MultiFactorError\n} from '../model/public_types';\n\nimport { _castAuth } from '../core/auth/auth_impl';\nimport { AuthErrorCode } from '../core/errors';\nimport { UserCredentialImpl } from '../core/user/user_credential_impl';\nimport { _assert, _fail } from '../core/util/assert';\nimport { UserCredentialInternal } from '../model/user';\nimport { MultiFactorAssertionImpl } from './mfa_assertion';\nimport { MultiFactorError as MultiFactorErrorInternal } from './mfa_error';\nimport { MultiFactorInfoImpl } from './mfa_info';\nimport { MultiFactorSessionImpl } from './mfa_session';\nimport { getModularInstance } from '@firebase/util';\nimport { OperationType } from '../model/enums';\n\nexport class MultiFactorResolverImpl implements MultiFactorResolver {\n  private constructor(\n    readonly session: MultiFactorSessionImpl,\n    readonly hints: MultiFactorInfoImpl[],\n    private readonly signInResolver: (\n      assertion: MultiFactorAssertionImpl\n    ) => Promise<UserCredentialInternal>\n  ) {}\n\n  /** @internal */\n  static _fromError(\n    authExtern: Auth,\n    error: MultiFactorErrorInternal\n  ): MultiFactorResolverImpl {\n    const auth = _castAuth(authExtern);\n    const serverResponse = error.customData._serverResponse;\n    const hints = (serverResponse.mfaInfo || []).map(enrollment =>\n      MultiFactorInfoImpl._fromServerResponse(auth, enrollment)\n    );\n\n    _assert(\n      serverResponse.mfaPendingCredential,\n      auth,\n      AuthErrorCode.INTERNAL_ERROR\n    );\n    const session = MultiFactorSessionImpl._fromMfaPendingCredential(\n      serverResponse.mfaPendingCredential\n    );\n\n    return new MultiFactorResolverImpl(\n      session,\n      hints,\n      async (\n        assertion: MultiFactorAssertionImpl\n      ): Promise<UserCredentialInternal> => {\n        const mfaResponse = await assertion._process(auth, session);\n        // Clear out the unneeded fields from the old login response\n        delete serverResponse.mfaInfo;\n        delete serverResponse.mfaPendingCredential;\n\n        // Use in the new token & refresh token in the old response\n        const idTokenResponse = {\n          ...serverResponse,\n          idToken: mfaResponse.idToken,\n          refreshToken: mfaResponse.refreshToken\n        };\n\n        // TODO: we should collapse this switch statement into UserCredentialImpl._forOperation and have it support the SIGN_IN case\n        switch (error.operationType) {\n          case OperationType.SIGN_IN:\n            const userCredential =\n              await UserCredentialImpl._fromIdTokenResponse(\n                auth,\n                error.operationType,\n                idTokenResponse\n              );\n            await auth._updateCurrentUser(userCredential.user);\n            return userCredential;\n          case OperationType.REAUTHENTICATE:\n            _assert(error.user, auth, AuthErrorCode.INTERNAL_ERROR);\n            return UserCredentialImpl._forOperation(\n              error.user,\n              error.operationType,\n              idTokenResponse\n            );\n          default:\n            _fail(auth, AuthErrorCode.INTERNAL_ERROR);\n        }\n      }\n    );\n  }\n\n  async resolveSignIn(\n    assertionExtern: MultiFactorAssertionImpl\n  ): Promise<UserCredential> {\n    const assertion = assertionExtern as MultiFactorAssertionImpl;\n    return this.signInResolver(assertion);\n  }\n}\n\n/**\n * Provides a {@link MultiFactorResolver} suitable for completion of a\n * multi-factor flow.\n *\n * @param auth - The {@link Auth} instance.\n * @param error - The {@link MultiFactorError} raised during a sign-in, or\n * reauthentication operation.\n *\n * @public\n */\nexport function getMultiFactorResolver(\n  auth: Auth,\n  error: MultiFactorError\n): MultiFactorResolver {\n  const authModular = getModularInstance(auth);\n  const errorInternal = error as MultiFactorErrorInternal;\n  _assert(\n    error.customData.operationType,\n    authModular,\n    AuthErrorCode.ARGUMENT_ERROR\n  );\n  _assert(\n    errorInternal.customData._serverResponse?.mfaPendingCredential,\n    authModular,\n    AuthErrorCode.ARGUMENT_ERROR\n  );\n\n  return MultiFactorResolverImpl._fromError(authModular, errorInternal);\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Endpoint,\n  HttpMethod,\n  _addTidIfNecessary,\n  _performApiRequest\n} from '../index';\nimport { SignInWithPhoneNumberRequest } from '../authentication/sms';\nimport { FinalizeMfaResponse } from '../authentication/mfa';\nimport { AuthInternal } from '../../model/auth';\n\n/**\n * MFA Info as returned by the API.\n */\ninterface BaseMfaEnrollment {\n  mfaEnrollmentId: string;\n  enrolledAt: number;\n  displayName?: string;\n}\n\n/**\n * An MFA provided by SMS verification.\n */\nexport interface PhoneMfaEnrollment extends BaseMfaEnrollment {\n  phoneInfo: string;\n}\n\n/**\n * An MFA provided by TOTP (Time-based One Time Password).\n */\nexport interface TotpMfaEnrollment extends BaseMfaEnrollment {}\n\n/**\n * MfaEnrollment can be any subtype of BaseMfaEnrollment, currently only PhoneMfaEnrollment and TotpMfaEnrollment are supported.\n */\nexport type MfaEnrollment = PhoneMfaEnrollment | TotpMfaEnrollment;\n\nexport interface StartPhoneMfaEnrollmentRequest {\n  idToken: string;\n  phoneEnrollmentInfo: {\n    phoneNumber: string;\n    recaptchaToken: string;\n  };\n  tenantId?: string;\n}\n\nexport interface StartPhoneMfaEnrollmentResponse {\n  phoneSessionInfo: {\n    sessionInfo: string;\n  };\n}\n\nexport function startEnrollPhoneMfa(\n  auth: AuthInternal,\n  request: StartPhoneMfaEnrollmentRequest\n): Promise<StartPhoneMfaEnrollmentResponse> {\n  return _performApiRequest<\n    StartPhoneMfaEnrollmentRequest,\n    StartPhoneMfaEnrollmentResponse\n  >(\n    auth,\n    HttpMethod.POST,\n    Endpoint.START_MFA_ENROLLMENT,\n    _addTidIfNecessary(auth, request)\n  );\n}\n\nexport interface FinalizePhoneMfaEnrollmentRequest {\n  idToken: string;\n  phoneVerificationInfo: SignInWithPhoneNumberRequest;\n  displayName?: string | null;\n  tenantId?: string;\n}\n\nexport interface FinalizePhoneMfaEnrollmentResponse\n  extends FinalizeMfaResponse {}\n\nexport function finalizeEnrollPhoneMfa(\n  auth: AuthInternal,\n  request: FinalizePhoneMfaEnrollmentRequest\n): Promise<FinalizePhoneMfaEnrollmentResponse> {\n  return _performApiRequest<\n    FinalizePhoneMfaEnrollmentRequest,\n    FinalizePhoneMfaEnrollmentResponse\n  >(\n    auth,\n    HttpMethod.POST,\n    Endpoint.FINALIZE_MFA_ENROLLMENT,\n    _addTidIfNecessary(auth, request)\n  );\n}\nexport interface StartTotpMfaEnrollmentRequest {\n  idToken: string;\n  totpEnrollmentInfo: {};\n  tenantId?: string;\n}\n\nexport interface StartTotpMfaEnrollmentResponse {\n  totpSessionInfo: {\n    sharedSecretKey: string;\n    verificationCodeLength: number;\n    hashingAlgorithm: string;\n    periodSec: number;\n    sessionInfo: string;\n    finalizeEnrollmentTime: number;\n  };\n}\n\nexport function startEnrollTotpMfa(\n  auth: AuthInternal,\n  request: StartTotpMfaEnrollmentRequest\n): Promise<StartTotpMfaEnrollmentResponse> {\n  return _performApiRequest<\n    StartTotpMfaEnrollmentRequest,\n    StartTotpMfaEnrollmentResponse\n  >(\n    auth,\n    HttpMethod.POST,\n    Endpoint.START_MFA_ENROLLMENT,\n    _addTidIfNecessary(auth, request)\n  );\n}\n\nexport interface TotpVerificationInfo {\n  sessionInfo: string;\n  verificationCode: string;\n}\nexport interface FinalizeTotpMfaEnrollmentRequest {\n  idToken: string;\n  totpVerificationInfo: TotpVerificationInfo;\n  displayName?: string | null;\n  tenantId?: string;\n}\n\nexport interface FinalizeTotpMfaEnrollmentResponse\n  extends FinalizeMfaResponse {}\n\nexport function finalizeEnrollTotpMfa(\n  auth: AuthInternal,\n  request: FinalizeTotpMfaEnrollmentRequest\n): Promise<FinalizeTotpMfaEnrollmentResponse> {\n  return _performApiRequest<\n    FinalizeTotpMfaEnrollmentRequest,\n    FinalizeTotpMfaEnrollmentResponse\n  >(\n    auth,\n    HttpMethod.POST,\n    Endpoint.FINALIZE_MFA_ENROLLMENT,\n    _addTidIfNecessary(auth, request)\n  );\n}\n\nexport interface WithdrawMfaRequest {\n  idToken: string;\n  mfaEnrollmentId: string;\n  tenantId?: string;\n}\n\nexport interface WithdrawMfaResponse extends FinalizeMfaResponse {}\n\nexport function withdrawMfa(\n  auth: AuthInternal,\n  request: WithdrawMfaRequest\n): Promise<WithdrawMfaResponse> {\n  return _performApiRequest<WithdrawMfaRequest, WithdrawMfaResponse>(\n    auth,\n    HttpMethod.POST,\n    Endpoint.WITHDRAW_MFA,\n    _addTidIfNecessary(auth, request)\n  );\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport {\n  MultiFactorAssertion,\n  MultiFactorInfo,\n  MultiFactorSession,\n  MultiFactorUser,\n  User\n} from '../model/public_types';\n\nimport { withdrawMfa } from '../api/account_management/mfa';\nimport { _logoutIfInvalidated } from '../core/user/invalidation';\nimport { UserInternal } from '../model/user';\nimport { MultiFactorAssertionImpl } from './mfa_assertion';\nimport { MultiFactorInfoImpl } from './mfa_info';\nimport { MultiFactorSessionImpl } from './mfa_session';\nimport { getModularInstance } from '@firebase/util';\n\nexport class MultiFactorUserImpl implements MultiFactorUser {\n  enrolledFactors: MultiFactorInfo[] = [];\n\n  private constructor(readonly user: UserInternal) {\n    user._onReload(userInfo => {\n      if (userInfo.mfaInfo) {\n        this.enrolledFactors = userInfo.mfaInfo.map(enrollment =>\n          MultiFactorInfoImpl._fromServerResponse(user.auth, enrollment)\n        );\n      }\n    });\n  }\n\n  static _fromUser(user: UserInternal): MultiFactorUserImpl {\n    return new MultiFactorUserImpl(user);\n  }\n\n  async getSession(): Promise<MultiFactorSession> {\n    return MultiFactorSessionImpl._fromIdtoken(\n      await this.user.getIdToken(),\n      this.user\n    );\n  }\n\n  async enroll(\n    assertionExtern: MultiFactorAssertion,\n    displayName?: string | null\n  ): Promise<void> {\n    const assertion = assertionExtern as MultiFactorAssertionImpl;\n    const session = (await this.getSession()) as MultiFactorSessionImpl;\n    const finalizeMfaResponse = await _logoutIfInvalidated(\n      this.user,\n      assertion._process(this.user.auth, session, displayName)\n    );\n    // New tokens will be issued after enrollment of the new second factors.\n    // They need to be updated on the user.\n    await this.user._updateTokensIfNecessary(finalizeMfaResponse);\n    // The user needs to be reloaded to get the new multi-factor information\n    // from server. USER_RELOADED event will be triggered and `enrolledFactors`\n    // will be updated.\n    return this.user.reload();\n  }\n\n  async unenroll(infoOrUid: MultiFactorInfo | string): Promise<void> {\n    const mfaEnrollmentId =\n      typeof infoOrUid === 'string' ? infoOrUid : infoOrUid.uid;\n    const idToken = await this.user.getIdToken();\n    try {\n      const idTokenResponse = await _logoutIfInvalidated(\n        this.user,\n        withdrawMfa(this.user.auth, {\n          idToken,\n          mfaEnrollmentId\n        })\n      );\n      // Remove the second factor from the user's list.\n      this.enrolledFactors = this.enrolledFactors.filter(\n        ({ uid }) => uid !== mfaEnrollmentId\n      );\n      // Depending on whether the backend decided to revoke the user's session,\n      // the tokenResponse may be empty. If the tokens were not updated (and they\n      // are now invalid), reloading the user will discover this and invalidate\n      // the user's state accordingly.\n      await this.user._updateTokensIfNecessary(idTokenResponse);\n      await this.user.reload();\n    } catch (e) {\n      throw e;\n    }\n  }\n}\n\nconst multiFactorUserCache = new WeakMap<User, MultiFactorUser>();\n\n/**\n * The {@link MultiFactorUser} corresponding to the user.\n *\n * @remarks\n * This is used to access all multi-factor properties and operations related to the user.\n *\n * @param user - The user.\n *\n * @public\n */\nexport function multiFactor(user: User): MultiFactorUser {\n  const userModular = getModularInstance(user);\n  if (!multiFactorUserCache.has(userModular)) {\n    multiFactorUserCache.set(\n      userModular,\n      MultiFactorUserImpl._fromUser(userModular as UserInternal)\n    );\n  }\n  return multiFactorUserCache.get(userModular)!;\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Unsubscribe } from '@firebase/util';\nimport { FirebaseAuthInternal } from '@firebase/auth-interop-types';\n\nimport { AuthInternal } from '../../model/auth';\nimport { UserInternal } from '../../model/user';\nimport { _assert } from '../util/assert';\nimport { AuthErrorCode } from '../errors';\n\ninterface TokenListener {\n  (tok: string | null): unknown;\n}\n\nexport class AuthInterop implements FirebaseAuthInternal {\n  private readonly internalListeners: Map<TokenListener, Unsubscribe> =\n    new Map();\n\n  constructor(private readonly auth: AuthInternal) {}\n\n  getUid(): string | null {\n    this.assertAuthConfigured();\n    return this.auth.currentUser?.uid || null;\n  }\n\n  async getToken(\n    forceRefresh?: boolean\n  ): Promise<{ accessToken: string } | null> {\n    this.assertAuthConfigured();\n    await this.auth._initializationPromise;\n    if (!this.auth.currentUser) {\n      return null;\n    }\n\n    const accessToken = await this.auth.currentUser.getIdToken(forceRefresh);\n    return { accessToken };\n  }\n\n  addAuthTokenListener(listener: TokenListener): void {\n    this.assertAuthConfigured();\n    if (this.internalListeners.has(listener)) {\n      return;\n    }\n\n    const unsubscribe = this.auth.onIdTokenChanged(user => {\n      listener(\n        (user as UserInternal | null)?.stsTokenManager.accessToken || null\n      );\n    });\n    this.internalListeners.set(listener, unsubscribe);\n    this.updateProactiveRefresh();\n  }\n\n  removeAuthTokenListener(listener: TokenListener): void {\n    this.assertAuthConfigured();\n    const unsubscribe = this.internalListeners.get(listener);\n    if (!unsubscribe) {\n      return;\n    }\n\n    this.internalListeners.delete(listener);\n    unsubscribe();\n    this.updateProactiveRefresh();\n  }\n\n  private assertAuthConfigured(): void {\n    _assert(\n      this.auth._initializationPromise,\n      AuthErrorCode.DEPENDENT_SDK_INIT_BEFORE_AUTH\n    );\n  }\n\n  private updateProactiveRefresh(): void {\n    if (this.internalListeners.size > 0) {\n      this.auth._startProactiveRefresh();\n    } else {\n      this.auth._stopProactiveRefresh();\n    }\n  }\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { _registerComponent, registerVersion } from '@firebase/app';\nimport {\n  Component,\n  ComponentType,\n  InstantiationMode\n} from '@firebase/component';\n\nimport { name, version } from '../../../package.json';\nimport { AuthErrorCode } from '../errors';\nimport { _assert } from '../util/assert';\nimport { _getClientVersion, ClientPlatform } from '../util/version';\nimport { _castAuth, AuthImpl, DefaultConfig } from './auth_impl';\nimport { AuthInterop } from './firebase_internal';\nimport { ConfigInternal } from '../../model/auth';\nimport { Dependencies } from '../../model/public_types';\nimport { _initializeAuthInstance } from './initialize';\n\nexport const enum _ComponentName {\n  AUTH = 'auth',\n  AUTH_INTERNAL = 'auth-internal'\n}\n\nfunction getVersionForPlatform(\n  clientPlatform: ClientPlatform\n): string | undefined {\n  switch (clientPlatform) {\n    case ClientPlatform.NODE:\n      return 'node';\n    case ClientPlatform.REACT_NATIVE:\n      return 'rn';\n    case ClientPlatform.WORKER:\n      return 'webworker';\n    case ClientPlatform.CORDOVA:\n      return 'cordova';\n    default:\n      return undefined;\n  }\n}\n\n/** @internal */\nexport function registerAuth(clientPlatform: ClientPlatform): void {\n  _registerComponent(\n    new Component(\n      _ComponentName.AUTH,\n      (container, { options: deps }: { options?: Dependencies }) => {\n        const app = container.getProvider('app').getImmediate()!;\n        const heartbeatServiceProvider =\n          container.getProvider<'heartbeat'>('heartbeat');\n        const appCheckServiceProvider =\n          container.getProvider<'app-check-internal'>('app-check-internal');\n        const { apiKey, authDomain } = app.options;\n\n        _assert(\n          apiKey && !apiKey.includes(':'),\n          AuthErrorCode.INVALID_API_KEY,\n          { appName: app.name }\n        );\n\n        const config: ConfigInternal = {\n          apiKey,\n          authDomain,\n          clientPlatform,\n          apiHost: DefaultConfig.API_HOST,\n          tokenApiHost: DefaultConfig.TOKEN_API_HOST,\n          apiScheme: DefaultConfig.API_SCHEME,\n          sdkClientVersion: _getClientVersion(clientPlatform)\n        };\n\n        const authInstance = new AuthImpl(\n          app,\n          heartbeatServiceProvider,\n          appCheckServiceProvider,\n          config\n        );\n        _initializeAuthInstance(authInstance, deps);\n\n        return authInstance;\n      },\n      ComponentType.PUBLIC\n    )\n      /**\n       * Auth can only be initialized by explicitly calling getAuth() or initializeAuth()\n       * For why we do this, See go/firebase-next-auth-init\n       */\n      .setInstantiationMode(InstantiationMode.EXPLICIT)\n      /**\n       * Because all firebase products that depend on auth depend on auth-internal directly,\n       * we need to initialize auth-internal after auth is initialized to make it available to other firebase products.\n       */\n      .setInstanceCreatedCallback(\n        (container, _instanceIdentifier, _instance) => {\n          const authInternalProvider = container.getProvider(\n            _ComponentName.AUTH_INTERNAL\n          );\n          authInternalProvider.initialize();\n        }\n      )\n  );\n\n  _registerComponent(\n    new Component(\n      _ComponentName.AUTH_INTERNAL,\n      container => {\n        const auth = _castAuth(\n          container.getProvider(_ComponentName.AUTH).getImmediate()!\n        );\n        return (auth => new AuthInterop(auth))(auth);\n      },\n      ComponentType.PRIVATE\n    ).setInstantiationMode(InstantiationMode.EXPLICIT)\n  );\n\n  registerVersion(name, version, getVersionForPlatform(clientPlatform));\n  // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\n  registerVersion(name, version, '__BUILD_TARGET__');\n}\n", "/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * An enum of factors that may be used for multifactor authentication.\n *\n * @public\n */\nexport const FactorId = {\n  /** Phone as second factor */\n  PHONE: 'phone',\n  TOTP: 'totp'\n} as const;\n\n/**\n * Enumeration of supported providers.\n *\n * @public\n */\nexport const ProviderId = {\n  /** Facebook provider ID */\n  FACEBOOK: 'facebook.com',\n  /** GitHub provider ID */\n  GITHUB: 'github.com',\n  /** Google provider ID */\n  GOOGLE: 'google.com',\n  /** Password provider */\n  PASSWORD: 'password',\n  /** Phone provider */\n  PHONE: 'phone',\n  /** Twitter provider ID */\n  TWITTER: 'twitter.com'\n} as const;\n\n/**\n * Enumeration of supported sign-in methods.\n *\n * @public\n */\nexport const SignInMethod = {\n  /** Email link sign in method */\n  EMAIL_LINK: 'emailLink',\n  /** Email/password sign in method */\n  EMAIL_PASSWORD: 'password',\n  /** Facebook sign in method */\n  FACEBOOK: 'facebook.com',\n  /** GitHub sign in method */\n  GITHUB: 'github.com',\n  /** Google sign in method */\n  GOOGLE: 'google.com',\n  /** Phone sign in method */\n  PHONE: 'phone',\n  /** Twitter sign in method */\n  TWITTER: 'twitter.com'\n} as const;\n\n/**\n * Enumeration of supported operation types.\n *\n * @public\n */\nexport const OperationType = {\n  /** Operation involving linking an additional provider to an already signed-in user. */\n  LINK: 'link',\n  /** Operation involving using a provider to reauthenticate an already signed-in user. */\n  REAUTHENTICATE: 'reauthenticate',\n  /** Operation involving signing in a user. */\n  SIGN_IN: 'signIn'\n} as const;\n\n/**\n * An enumeration of the possible email action types.\n *\n * @public\n */\nexport const ActionCodeOperation = {\n  /** The email link sign-in action. */\n  EMAIL_SIGNIN: 'EMAIL_SIGNIN',\n  /** The password reset action. */\n  PASSWORD_RESET: 'PASSWORD_RESET',\n  /** The email revocation action. */\n  RECOVER_EMAIL: 'RECOVER_EMAIL',\n  /** The revert second factor addition email action. */\n  REVERT_SECOND_FACTOR_ADDITION: 'REVERT_SECOND_FACTOR_ADDITION',\n  /** The revert second factor addition email action. */\n  VERIFY_AND_CHANGE_EMAIL: 'VERIFY_AND_CHANGE_EMAIL',\n  /** The email verification action. */\n  VERIFY_EMAIL: 'VERIFY_EMAIL'\n} as const;\n", "/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  PersistenceValue,\n  STORAGE_AVAILABLE_KEY,\n  PersistenceType\n} from '../../core/persistence';\n\n// There are two different browser persistence types: local and session.\n// Both have the same implementation but use a different underlying storage\n// object.\n\nexport abstract class BrowserPersistenceClass {\n  protected constructor(\n    protected readonly storageRetriever: () => Storage,\n    readonly type: PersistenceType\n  ) {}\n\n  _isAvailable(): Promise<boolean> {\n    try {\n      if (!this.storage) {\n        return Promise.resolve(false);\n      }\n      this.storage.setItem(STORAGE_AVAILABLE_KEY, '1');\n      this.storage.removeItem(STORAGE_AVAILABLE_KEY);\n      return Promise.resolve(true);\n    } catch {\n      return Promise.resolve(false);\n    }\n  }\n\n  _set(key: string, value: PersistenceValue): Promise<void> {\n    this.storage.setItem(key, JSON.stringify(value));\n    return Promise.resolve();\n  }\n\n  _get<T extends PersistenceValue>(key: string): Promise<T | null> {\n    const json = this.storage.getItem(key);\n    return Promise.resolve(json ? JSON.parse(json) : null);\n  }\n\n  _remove(key: string): Promise<void> {\n    this.storage.removeItem(key);\n    return Promise.resolve();\n  }\n\n  protected get storage(): Storage {\n    return this.storageRetriever();\n  }\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Persistence } from '../../model/public_types';\n\nimport { getUA } from '@firebase/util';\nimport {\n  _isSafari,\n  _isIOS,\n  _isIframe,\n  _isMobileBrowser,\n  _isIE10\n} from '../../core/util/browser';\nimport {\n  PersistenceInternal as InternalPersistence,\n  PersistenceType,\n  PersistenceValue,\n  StorageEventListener\n} from '../../core/persistence';\nimport { BrowserPersistenceClass } from './browser';\n\nfunction _iframeCannotSyncWebStorage(): boolean {\n  const ua = getUA();\n  return _isSafari(ua) || _isIOS(ua);\n}\n\n// The polling period in case events are not supported\nexport const _POLLING_INTERVAL_MS = 1000;\n\n// The IE 10 localStorage cross tab synchronization delay in milliseconds\nconst IE10_LOCAL_STORAGE_SYNC_DELAY = 10;\n\nclass BrowserLocalPersistence\n  extends BrowserPersistenceClass\n  implements InternalPersistence\n{\n  static type: 'LOCAL' = 'LOCAL';\n\n  constructor() {\n    super(() => window.localStorage, PersistenceType.LOCAL);\n  }\n\n  private readonly boundEventHandler = (\n    event: StorageEvent,\n    poll?: boolean\n  ): void => this.onStorageEvent(event, poll);\n  private readonly listeners: Record<string, Set<StorageEventListener>> = {};\n  private readonly localCache: Record<string, string | null> = {};\n  // setTimeout return value is platform specific\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private pollTimer: any | null = null;\n\n  // Safari or iOS browser and embedded in an iframe.\n  private readonly safariLocalStorageNotSynced =\n    _iframeCannotSyncWebStorage() && _isIframe();\n  // Whether to use polling instead of depending on window events\n  private readonly fallbackToPolling = _isMobileBrowser();\n  readonly _shouldAllowMigration = true;\n\n  private forAllChangedKeys(\n    cb: (key: string, oldValue: string | null, newValue: string | null) => void\n  ): void {\n    // Check all keys with listeners on them.\n    for (const key of Object.keys(this.listeners)) {\n      // Get value from localStorage.\n      const newValue = this.storage.getItem(key);\n      const oldValue = this.localCache[key];\n      // If local map value does not match, trigger listener with storage event.\n      // Differentiate this simulated event from the real storage event.\n      if (newValue !== oldValue) {\n        cb(key, oldValue, newValue);\n      }\n    }\n  }\n\n  private onStorageEvent(event: StorageEvent, poll = false): void {\n    // Key would be null in some situations, like when localStorage is cleared\n    if (!event.key) {\n      this.forAllChangedKeys(\n        (key: string, _oldValue: string | null, newValue: string | null) => {\n          this.notifyListeners(key, newValue);\n        }\n      );\n      return;\n    }\n\n    const key = event.key;\n\n    // Check the mechanism how this event was detected.\n    // The first event will dictate the mechanism to be used.\n    if (poll) {\n      // Environment detects storage changes via polling.\n      // Remove storage event listener to prevent possible event duplication.\n      this.detachListener();\n    } else {\n      // Environment detects storage changes via storage event listener.\n      // Remove polling listener to prevent possible event duplication.\n      this.stopPolling();\n    }\n\n    // Safari embedded iframe. Storage event will trigger with the delta\n    // changes but no changes will be applied to the iframe localStorage.\n    if (this.safariLocalStorageNotSynced) {\n      // Get current iframe page value.\n      const storedValue = this.storage.getItem(key);\n      // Value not synchronized, synchronize manually.\n      if (event.newValue !== storedValue) {\n        if (event.newValue !== null) {\n          // Value changed from current value.\n          this.storage.setItem(key, event.newValue);\n        } else {\n          // Current value deleted.\n          this.storage.removeItem(key);\n        }\n      } else if (this.localCache[key] === event.newValue && !poll) {\n        // Already detected and processed, do not trigger listeners again.\n        return;\n      }\n    }\n\n    const triggerListeners = (): void => {\n      // Keep local map up to date in case storage event is triggered before\n      // poll.\n      const storedValue = this.storage.getItem(key);\n      if (!poll && this.localCache[key] === storedValue) {\n        // Real storage event which has already been detected, do nothing.\n        // This seems to trigger in some IE browsers for some reason.\n        return;\n      }\n      this.notifyListeners(key, storedValue);\n    };\n\n    const storedValue = this.storage.getItem(key);\n    if (\n      _isIE10() &&\n      storedValue !== event.newValue &&\n      event.newValue !== event.oldValue\n    ) {\n      // IE 10 has this weird bug where a storage event would trigger with the\n      // correct key, oldValue and newValue but localStorage.getItem(key) does\n      // not yield the updated value until a few milliseconds. This ensures\n      // this recovers from that situation.\n      setTimeout(triggerListeners, IE10_LOCAL_STORAGE_SYNC_DELAY);\n    } else {\n      triggerListeners();\n    }\n  }\n\n  private notifyListeners(key: string, value: string | null): void {\n    this.localCache[key] = value;\n    const listeners = this.listeners[key];\n    if (listeners) {\n      for (const listener of Array.from(listeners)) {\n        listener(value ? JSON.parse(value) : value);\n      }\n    }\n  }\n\n  private startPolling(): void {\n    this.stopPolling();\n\n    this.pollTimer = setInterval(() => {\n      this.forAllChangedKeys(\n        (key: string, oldValue: string | null, newValue: string | null) => {\n          this.onStorageEvent(\n            new StorageEvent('storage', {\n              key,\n              oldValue,\n              newValue\n            }),\n            /* poll */ true\n          );\n        }\n      );\n    }, _POLLING_INTERVAL_MS);\n  }\n\n  private stopPolling(): void {\n    if (this.pollTimer) {\n      clearInterval(this.pollTimer);\n      this.pollTimer = null;\n    }\n  }\n\n  private attachListener(): void {\n    window.addEventListener('storage', this.boundEventHandler);\n  }\n\n  private detachListener(): void {\n    window.removeEventListener('storage', this.boundEventHandler);\n  }\n\n  _addListener(key: string, listener: StorageEventListener): void {\n    if (Object.keys(this.listeners).length === 0) {\n      // Whether browser can detect storage event when it had already been pushed to the background.\n      // This may happen in some mobile browsers. A localStorage change in the foreground window\n      // will not be detected in the background window via the storage event.\n      // This was detected in iOS 7.x mobile browsers\n      if (this.fallbackToPolling) {\n        this.startPolling();\n      } else {\n        this.attachListener();\n      }\n    }\n    if (!this.listeners[key]) {\n      this.listeners[key] = new Set();\n      // Populate the cache to avoid spuriously triggering on first poll.\n      this.localCache[key] = this.storage.getItem(key);\n    }\n    this.listeners[key].add(listener);\n  }\n\n  _removeListener(key: string, listener: StorageEventListener): void {\n    if (this.listeners[key]) {\n      this.listeners[key].delete(listener);\n\n      if (this.listeners[key].size === 0) {\n        delete this.listeners[key];\n      }\n    }\n\n    if (Object.keys(this.listeners).length === 0) {\n      this.detachListener();\n      this.stopPolling();\n    }\n  }\n\n  // Update local cache on base operations:\n\n  async _set(key: string, value: PersistenceValue): Promise<void> {\n    await super._set(key, value);\n    this.localCache[key] = JSON.stringify(value);\n  }\n\n  async _get<T extends PersistenceValue>(key: string): Promise<T | null> {\n    const value = await super._get<T>(key);\n    this.localCache[key] = JSON.stringify(value);\n    return value;\n  }\n\n  async _remove(key: string): Promise<void> {\n    await super._remove(key);\n    delete this.localCache[key];\n  }\n}\n\n/**\n * An implementation of {@link Persistence} of type `LOCAL` using `localStorage`\n * for the underlying storage.\n *\n * @public\n */\nexport const browserLocalPersistence: Persistence = BrowserLocalPersistence;\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Persistence } from '../../model/public_types';\n\nimport {\n  PersistenceInternal as InternalPersistence,\n  PersistenceType,\n  StorageEventListener\n} from '../../core/persistence';\nimport { BrowserPersistenceClass } from './browser';\n\nclass BrowserSessionPersistence\n  extends BrowserPersistenceClass\n  implements InternalPersistence\n{\n  static type: 'SESSION' = 'SESSION';\n\n  constructor() {\n    super(() => window.sessionStorage, PersistenceType.SESSION);\n  }\n\n  _addListener(_key: string, _listener: StorageEventListener): void {\n    // Listeners are not supported for session storage since it cannot be shared across windows\n    return;\n  }\n\n  _removeListener(_key: string, _listener: StorageEventListener): void {\n    // Listeners are not supported for session storage since it cannot be shared across windows\n    return;\n  }\n}\n\n/**\n * An implementation of {@link Persistence} of `SESSION` using `sessionStorage`\n * for the underlying storage.\n *\n * @public\n */\nexport const browserSessionPersistence: Persistence = BrowserSessionPersistence;\n", "/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { PopupRedirectResolver } from '../../model/public_types';\nimport { AuthInternal } from '../../model/auth';\nimport { PopupRedirectResolverInternal } from '../../model/popup_redirect';\nimport { AuthErrorCode } from '../errors';\nimport { _assert } from './assert';\nimport { _getInstance } from './instantiator';\n\n/**\n * Chooses a popup/redirect resolver to use. This prefers the override (which\n * is directly passed in), and falls back to the property set on the auth\n * object. If neither are available, this function errors w/ an argument error.\n */\nexport function _withDefaultResolver(\n  auth: AuthInternal,\n  resolverOverride: PopupRedirectResolver | undefined\n): PopupRedirectResolverInternal {\n  if (resolverOverride) {\n    return _getInstance(resolverOverride);\n  }\n\n  _assert(auth._popupRedirectResolver, auth, AuthErrorCode.ARGUMENT_ERROR);\n\n  return auth._popupRedirectResolver;\n}\n", "/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  signInWithIdp,\n  SignInWithIdpRequest\n} from '../../api/authentication/idp';\nimport { PhoneOrOauthTokenResponse } from '../../api/authentication/mfa';\nimport { AuthInternal } from '../../model/auth';\nimport { IdTokenResponse } from '../../model/id_token';\nimport { UserInternal, UserCredentialInternal } from '../../model/user';\nimport { AuthCredential } from '../credentials';\nimport { _link as _linkUser } from '../user/link_unlink';\nimport { _reauthenticate } from '../user/reauthenticate';\nimport { _assert } from '../util/assert';\nimport { _signInWithCredential } from './credential';\nimport { AuthErrorCode } from '../errors';\nimport { ProviderId } from '../../model/enums';\n\nexport interface IdpTaskParams {\n  auth: AuthInternal;\n  requestUri: string;\n  sessionId?: string;\n  tenantId?: string;\n  postBody?: string;\n  pendingToken?: string;\n  user?: UserInternal;\n  bypassAuthState?: boolean;\n}\n\nexport type IdpTask = (\n  params: IdpTaskParams\n) => Promise<UserCredentialInternal>;\n\nclass IdpCredential extends AuthCredential {\n  constructor(readonly params: IdpTaskParams) {\n    super(ProviderId.CUSTOM, ProviderId.CUSTOM);\n  }\n\n  _getIdTokenResponse(auth: AuthInternal): Promise<PhoneOrOauthTokenResponse> {\n    return signInWithIdp(auth, this._buildIdpRequest());\n  }\n\n  _linkToIdToken(\n    auth: AuthInternal,\n    idToken: string\n  ): Promise<IdTokenResponse> {\n    return signInWithIdp(auth, this._buildIdpRequest(idToken));\n  }\n\n  _getReauthenticationResolver(auth: AuthInternal): Promise<IdTokenResponse> {\n    return signInWithIdp(auth, this._buildIdpRequest());\n  }\n\n  private _buildIdpRequest(idToken?: string): SignInWithIdpRequest {\n    const request: SignInWithIdpRequest = {\n      requestUri: this.params.requestUri,\n      sessionId: this.params.sessionId,\n      postBody: this.params.postBody,\n      tenantId: this.params.tenantId,\n      pendingToken: this.params.pendingToken,\n      returnSecureToken: true,\n      returnIdpCredential: true\n    };\n\n    if (idToken) {\n      request.idToken = idToken;\n    }\n\n    return request;\n  }\n}\n\nexport function _signIn(\n  params: IdpTaskParams\n): Promise<UserCredentialInternal> {\n  return _signInWithCredential(\n    params.auth,\n    new IdpCredential(params),\n    params.bypassAuthState\n  ) as Promise<UserCredentialInternal>;\n}\n\nexport function _reauth(\n  params: IdpTaskParams\n): Promise<UserCredentialInternal> {\n  const { auth, user } = params;\n  _assert(user, auth, AuthErrorCode.INTERNAL_ERROR);\n  return _reauthenticate(\n    user,\n    new IdpCredential(params),\n    params.bypassAuthState\n  );\n}\n\nexport async function _link(\n  params: IdpTaskParams\n): Promise<UserCredentialInternal> {\n  const { auth, user } = params;\n  _assert(user, auth, AuthErrorCode.INTERNAL_ERROR);\n  return _linkUser(user, new IdpCredential(params), params.bypassAuthState);\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseError } from '@firebase/util';\n\nimport {\n  AuthEvent,\n  AuthEventConsumer,\n  AuthEventType,\n  EventManager,\n  PopupRedirectResolverInternal\n} from '../../model/popup_redirect';\nimport { UserInternal, UserCredentialInternal } from '../../model/user';\nimport { AuthErrorCode } from '../errors';\nimport { debugAssert, _fail } from '../util/assert';\nimport {\n  _link,\n  _reauth,\n  _signIn,\n  IdpTask,\n  IdpTaskParams\n} from '../strategies/idp';\nimport { AuthInternal } from '../../model/auth';\n\ninterface PendingPromise {\n  resolve: (cred: UserCredentialInternal | null) => void;\n  reject: (error: Error) => void;\n}\n\n/**\n * Popup event manager. Handles the popup's entire lifecycle; listens to auth\n * events\n */\nexport abstract class AbstractPopupRedirectOperation\n  implements AuthEventConsumer\n{\n  private pendingPromise: PendingPromise | null = null;\n  private eventManager: EventManager | null = null;\n  readonly filter: AuthEventType[];\n\n  abstract eventId: string | null;\n\n  constructor(\n    protected readonly auth: AuthInternal,\n    filter: AuthEventType | AuthEventType[],\n    protected readonly resolver: PopupRedirectResolverInternal,\n    protected user?: UserInternal,\n    protected readonly bypassAuthState = false\n  ) {\n    this.filter = Array.isArray(filter) ? filter : [filter];\n  }\n\n  abstract onExecution(): Promise<void>;\n\n  execute(): Promise<UserCredentialInternal | null> {\n    return new Promise<UserCredentialInternal | null>(\n      async (resolve, reject) => {\n        this.pendingPromise = { resolve, reject };\n\n        try {\n          this.eventManager = await this.resolver._initialize(this.auth);\n          await this.onExecution();\n          this.eventManager.registerConsumer(this);\n        } catch (e) {\n          this.reject(e as Error);\n        }\n      }\n    );\n  }\n\n  async onAuthEvent(event: AuthEvent): Promise<void> {\n    const { urlResponse, sessionId, postBody, tenantId, error, type } = event;\n    if (error) {\n      this.reject(error);\n      return;\n    }\n\n    const params: IdpTaskParams = {\n      auth: this.auth,\n      requestUri: urlResponse!,\n      sessionId: sessionId!,\n      tenantId: tenantId || undefined,\n      postBody: postBody || undefined,\n      user: this.user,\n      bypassAuthState: this.bypassAuthState\n    };\n\n    try {\n      this.resolve(await this.getIdpTask(type)(params));\n    } catch (e) {\n      this.reject(e as Error);\n    }\n  }\n\n  onError(error: FirebaseError): void {\n    this.reject(error);\n  }\n\n  private getIdpTask(type: AuthEventType): IdpTask {\n    switch (type) {\n      case AuthEventType.SIGN_IN_VIA_POPUP:\n      case AuthEventType.SIGN_IN_VIA_REDIRECT:\n        return _signIn;\n      case AuthEventType.LINK_VIA_POPUP:\n      case AuthEventType.LINK_VIA_REDIRECT:\n        return _link;\n      case AuthEventType.REAUTH_VIA_POPUP:\n      case AuthEventType.REAUTH_VIA_REDIRECT:\n        return _reauth;\n      default:\n        _fail(this.auth, AuthErrorCode.INTERNAL_ERROR);\n    }\n  }\n\n  protected resolve(cred: UserCredentialInternal | null): void {\n    debugAssert(this.pendingPromise, 'Pending promise was never set');\n    this.pendingPromise.resolve(cred);\n    this.unregisterAndCleanUp();\n  }\n\n  protected reject(error: Error): void {\n    debugAssert(this.pendingPromise, 'Pending promise was never set');\n    this.pendingPromise.reject(error);\n    this.unregisterAndCleanUp();\n  }\n\n  private unregisterAndCleanUp(): void {\n    if (this.eventManager) {\n      this.eventManager.unregisterConsumer(this);\n    }\n\n    this.pendingPromise = null;\n    this.cleanUp();\n  }\n\n  abstract cleanUp(): void;\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AuthInternal } from '../../model/auth';\nimport {\n  AuthEvent,\n  AuthEventType,\n  PopupRedirectResolverInternal\n} from '../../model/popup_redirect';\nimport { UserCredentialInternal } from '../../model/user';\nimport { PersistenceInternal } from '../persistence';\nimport { _persistenceKeyName } from '../persistence/persistence_user_manager';\nimport { _getInstance } from '../util/instantiator';\nimport { AbstractPopupRedirectOperation } from './abstract_popup_redirect_operation';\n\nconst PENDING_REDIRECT_KEY = 'pendingRedirect';\n\n// We only get one redirect outcome for any one auth, so just store it\n// in here.\nconst redirectOutcomeMap: Map<\n  string,\n  () => Promise<UserCredentialInternal | null>\n> = new Map();\n\nexport class RedirectAction extends AbstractPopupRedirectOperation {\n  eventId = null;\n\n  constructor(\n    auth: AuthInternal,\n    resolver: PopupRedirectResolverInternal,\n    bypassAuthState = false\n  ) {\n    super(\n      auth,\n      [\n        AuthEventType.SIGN_IN_VIA_REDIRECT,\n        AuthEventType.LINK_VIA_REDIRECT,\n        AuthEventType.REAUTH_VIA_REDIRECT,\n        AuthEventType.UNKNOWN\n      ],\n      resolver,\n      undefined,\n      bypassAuthState\n    );\n  }\n\n  /**\n   * Override the execute function; if we already have a redirect result, then\n   * just return it.\n   */\n  async execute(): Promise<UserCredentialInternal | null> {\n    let readyOutcome = redirectOutcomeMap.get(this.auth._key());\n    if (!readyOutcome) {\n      try {\n        const hasPendingRedirect = await _getAndClearPendingRedirectStatus(\n          this.resolver,\n          this.auth\n        );\n        const result = hasPendingRedirect ? await super.execute() : null;\n        readyOutcome = () => Promise.resolve(result);\n      } catch (e) {\n        readyOutcome = () => Promise.reject(e);\n      }\n\n      redirectOutcomeMap.set(this.auth._key(), readyOutcome);\n    }\n\n    // If we're not bypassing auth state, the ready outcome should be set to\n    // null.\n    if (!this.bypassAuthState) {\n      redirectOutcomeMap.set(this.auth._key(), () => Promise.resolve(null));\n    }\n\n    return readyOutcome();\n  }\n\n  async onAuthEvent(event: AuthEvent): Promise<void> {\n    if (event.type === AuthEventType.SIGN_IN_VIA_REDIRECT) {\n      return super.onAuthEvent(event);\n    } else if (event.type === AuthEventType.UNKNOWN) {\n      // This is a sentinel value indicating there's no pending redirect\n      this.resolve(null);\n      return;\n    }\n\n    if (event.eventId) {\n      const user = await this.auth._redirectUserForId(event.eventId);\n      if (user) {\n        this.user = user;\n        return super.onAuthEvent(event);\n      } else {\n        this.resolve(null);\n      }\n    }\n  }\n\n  async onExecution(): Promise<void> {}\n\n  cleanUp(): void {}\n}\n\nexport async function _getAndClearPendingRedirectStatus(\n  resolver: PopupRedirectResolverInternal,\n  auth: AuthInternal\n): Promise<boolean> {\n  const key = pendingRedirectKey(auth);\n  const persistence = resolverPersistence(resolver);\n  if (!(await persistence._isAvailable())) {\n    return false;\n  }\n  const hasPendingRedirect = (await persistence._get(key)) === 'true';\n  await persistence._remove(key);\n  return hasPendingRedirect;\n}\n\nexport async function _setPendingRedirectStatus(\n  resolver: PopupRedirectResolverInternal,\n  auth: AuthInternal\n): Promise<void> {\n  return resolverPersistence(resolver)._set(pendingRedirectKey(auth), 'true');\n}\n\nexport function _clearRedirectOutcomes(): void {\n  redirectOutcomeMap.clear();\n}\n\nexport function _overrideRedirectResult(\n  auth: AuthInternal,\n  result: () => Promise<UserCredentialInternal | null>\n): void {\n  redirectOutcomeMap.set(auth._key(), result);\n}\n\nfunction resolverPersistence(\n  resolver: PopupRedirectResolverInternal\n): PersistenceInternal {\n  return _getInstance(resolver._redirectPersistence);\n}\n\nfunction pendingRedirectKey(auth: AuthInternal): string {\n  return _persistenceKeyName(\n    PENDING_REDIRECT_KEY,\n    auth.config.apiKey,\n    auth.name\n  );\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Auth,\n  AuthProvider,\n  PopupRedirectResolver,\n  User,\n  UserCredential\n} from '../../model/public_types';\n\nimport { _castAuth } from '../../core/auth/auth_impl';\nimport { _assertLinkedStatus } from '../../core/user/link_unlink';\nimport { _assertInstanceOf } from '../../core/util/assert';\nimport { _generateEventId } from '../../core/util/event_id';\nimport { AuthEventType } from '../../model/popup_redirect';\nimport { UserInternal } from '../../model/user';\nimport { _withDefaultResolver } from '../../core/util/resolver';\nimport {\n  RedirectAction,\n  _setPendingRedirectStatus\n} from '../../core/strategies/redirect';\nimport { FederatedAuthProvider } from '../../core/providers/federated';\nimport { getModularInstance } from '@firebase/util';\n\n/**\n * Authenticates a Firebase client using a full-page redirect flow.\n *\n * @remarks\n * To handle the results and errors for this operation, refer to {@link getRedirectResult}.\n * Follow the {@link https://firebase.google.com/docs/auth/web/redirect-best-practices\n * | best practices} when using {@link signInWithRedirect}.\n *\n * This method does not work in a Node.js environment.\n *\n * @example\n * ```javascript\n * // Sign in using a redirect.\n * const provider = new FacebookAuthProvider();\n * // You can add additional scopes to the provider:\n * provider.addScope('user_birthday');\n * // Start a sign in process for an unauthenticated user.\n * await signInWithRedirect(auth, provider);\n * // This will trigger a full page redirect away from your app\n *\n * // After returning from the redirect when your app initializes you can obtain the result\n * const result = await getRedirectResult(auth);\n * if (result) {\n *   // This is the signed-in user\n *   const user = result.user;\n *   // This gives you a Facebook Access Token.\n *   const credential = provider.credentialFromResult(auth, result);\n *   const token = credential.accessToken;\n * }\n * // As this API can be used for sign-in, linking and reauthentication,\n * // check the operationType to determine what triggered this redirect\n * // operation.\n * const operationType = result.operationType;\n * ```\n *\n * @param auth - The {@link Auth} instance.\n * @param provider - The provider to authenticate. The provider has to be an {@link OAuthProvider}.\n * Non-OAuth providers like {@link EmailAuthProvider} will throw an error.\n * @param resolver - An instance of {@link PopupRedirectResolver}, optional\n * if already supplied to {@link initializeAuth} or provided by {@link getAuth}.\n *\n * @public\n */\nexport function signInWithRedirect(\n  auth: Auth,\n  provider: AuthProvider,\n  resolver?: PopupRedirectResolver\n): Promise<never> {\n  return _signInWithRedirect(auth, provider, resolver) as Promise<never>;\n}\n\nexport async function _signInWithRedirect(\n  auth: Auth,\n  provider: AuthProvider,\n  resolver?: PopupRedirectResolver\n): Promise<void | never> {\n  const authInternal = _castAuth(auth);\n  _assertInstanceOf(auth, provider, FederatedAuthProvider);\n  // Wait for auth initialization to complete, this will process pending redirects and clear the\n  // PENDING_REDIRECT_KEY in persistence. This should be completed before starting a new\n  // redirect and creating a PENDING_REDIRECT_KEY entry.\n  await authInternal._initializationPromise;\n  const resolverInternal = _withDefaultResolver(authInternal, resolver);\n  await _setPendingRedirectStatus(resolverInternal, authInternal);\n\n  return resolverInternal._openRedirect(\n    authInternal,\n    provider,\n    AuthEventType.SIGN_IN_VIA_REDIRECT\n  );\n}\n\n/**\n * Reauthenticates the current user with the specified {@link OAuthProvider} using a full-page redirect flow.\n * @remarks\n * To handle the results and errors for this operation, refer to {@link getRedirectResult}.\n * Follow the {@link https://firebase.google.com/docs/auth/web/redirect-best-practices\n * | best practices} when using {@link reauthenticateWithRedirect}.\n *\n * This method does not work in a Node.js environment.\n *\n * @example\n * ```javascript\n * // Sign in using a redirect.\n * const provider = new FacebookAuthProvider();\n * const result = await signInWithRedirect(auth, provider);\n * // This will trigger a full page redirect away from your app\n *\n * // After returning from the redirect when your app initializes you can obtain the result\n * const result = await getRedirectResult(auth);\n * // Reauthenticate using a redirect.\n * await reauthenticateWithRedirect(result.user, provider);\n * // This will again trigger a full page redirect away from your app\n *\n * // After returning from the redirect when your app initializes you can obtain the result\n * const result = await getRedirectResult(auth);\n * ```\n *\n * @param user - The user.\n * @param provider - The provider to authenticate. The provider has to be an {@link OAuthProvider}.\n * Non-OAuth providers like {@link EmailAuthProvider} will throw an error.\n * @param resolver - An instance of {@link PopupRedirectResolver}, optional\n * if already supplied to {@link initializeAuth} or provided by {@link getAuth}.\n *\n * @public\n */\nexport function reauthenticateWithRedirect(\n  user: User,\n  provider: AuthProvider,\n  resolver?: PopupRedirectResolver\n): Promise<never> {\n  return _reauthenticateWithRedirect(\n    user,\n    provider,\n    resolver\n  ) as Promise<never>;\n}\nexport async function _reauthenticateWithRedirect(\n  user: User,\n  provider: AuthProvider,\n  resolver?: PopupRedirectResolver\n): Promise<void | never> {\n  const userInternal = getModularInstance(user) as UserInternal;\n  _assertInstanceOf(userInternal.auth, provider, FederatedAuthProvider);\n  // Wait for auth initialization to complete, this will process pending redirects and clear the\n  // PENDING_REDIRECT_KEY in persistence. This should be completed before starting a new\n  // redirect and creating a PENDING_REDIRECT_KEY entry.\n  await userInternal.auth._initializationPromise;\n  // Allow the resolver to error before persisting the redirect user\n  const resolverInternal = _withDefaultResolver(userInternal.auth, resolver);\n  await _setPendingRedirectStatus(resolverInternal, userInternal.auth);\n\n  const eventId = await prepareUserForRedirect(userInternal);\n  return resolverInternal._openRedirect(\n    userInternal.auth,\n    provider,\n    AuthEventType.REAUTH_VIA_REDIRECT,\n    eventId\n  );\n}\n\n/**\n * Links the {@link OAuthProvider} to the user account using a full-page redirect flow.\n * @remarks\n * To handle the results and errors for this operation, refer to {@link getRedirectResult}.\n * Follow the {@link https://firebase.google.com/docs/auth/web/redirect-best-practices\n * | best practices} when using {@link linkWithRedirect}.\n *\n * This method does not work in a Node.js environment.\n *\n * @example\n * ```javascript\n * // Sign in using some other provider.\n * const result = await signInWithEmailAndPassword(auth, email, password);\n * // Link using a redirect.\n * const provider = new FacebookAuthProvider();\n * await linkWithRedirect(result.user, provider);\n * // This will trigger a full page redirect away from your app\n *\n * // After returning from the redirect when your app initializes you can obtain the result\n * const result = await getRedirectResult(auth);\n * ```\n *\n * @param user - The user.\n * @param provider - The provider to authenticate. The provider has to be an {@link OAuthProvider}.\n * Non-OAuth providers like {@link EmailAuthProvider} will throw an error.\n * @param resolver - An instance of {@link PopupRedirectResolver}, optional\n * if already supplied to {@link initializeAuth} or provided by {@link getAuth}.\n *\n * @public\n */\nexport function linkWithRedirect(\n  user: User,\n  provider: AuthProvider,\n  resolver?: PopupRedirectResolver\n): Promise<never> {\n  return _linkWithRedirect(user, provider, resolver) as Promise<never>;\n}\nexport async function _linkWithRedirect(\n  user: User,\n  provider: AuthProvider,\n  resolver?: PopupRedirectResolver\n): Promise<void | never> {\n  const userInternal = getModularInstance(user) as UserInternal;\n  _assertInstanceOf(userInternal.auth, provider, FederatedAuthProvider);\n  // Wait for auth initialization to complete, this will process pending redirects and clear the\n  // PENDING_REDIRECT_KEY in persistence. This should be completed before starting a new\n  // redirect and creating a PENDING_REDIRECT_KEY entry.\n  await userInternal.auth._initializationPromise;\n  // Allow the resolver to error before persisting the redirect user\n  const resolverInternal = _withDefaultResolver(userInternal.auth, resolver);\n  await _assertLinkedStatus(false, userInternal, provider.providerId);\n  await _setPendingRedirectStatus(resolverInternal, userInternal.auth);\n\n  const eventId = await prepareUserForRedirect(userInternal);\n  return resolverInternal._openRedirect(\n    userInternal.auth,\n    provider,\n    AuthEventType.LINK_VIA_REDIRECT,\n    eventId\n  );\n}\n\n/**\n * Returns a {@link UserCredential} from the redirect-based sign-in flow.\n *\n * @remarks\n * If sign-in succeeded, returns the signed in user. If sign-in was unsuccessful, fails with an\n * error. If no redirect operation was called, returns `null`.\n *\n * This method does not work in a Node.js environment.\n *\n * @example\n * ```javascript\n * // Sign in using a redirect.\n * const provider = new FacebookAuthProvider();\n * // You can add additional scopes to the provider:\n * provider.addScope('user_birthday');\n * // Start a sign in process for an unauthenticated user.\n * await signInWithRedirect(auth, provider);\n * // This will trigger a full page redirect away from your app\n *\n * // After returning from the redirect when your app initializes you can obtain the result\n * const result = await getRedirectResult(auth);\n * if (result) {\n *   // This is the signed-in user\n *   const user = result.user;\n *   // This gives you a Facebook Access Token.\n *   const credential = provider.credentialFromResult(auth, result);\n *   const token = credential.accessToken;\n * }\n * // As this API can be used for sign-in, linking and reauthentication,\n * // check the operationType to determine what triggered this redirect\n * // operation.\n * const operationType = result.operationType;\n * ```\n *\n * @param auth - The {@link Auth} instance.\n * @param resolver - An instance of {@link PopupRedirectResolver}, optional\n * if already supplied to {@link initializeAuth} or provided by {@link getAuth}.\n *\n * @public\n */\nexport async function getRedirectResult(\n  auth: Auth,\n  resolver?: PopupRedirectResolver\n): Promise<UserCredential | null> {\n  await _castAuth(auth)._initializationPromise;\n  return _getRedirectResult(auth, resolver, false);\n}\n\nexport async function _getRedirectResult(\n  auth: Auth,\n  resolverExtern?: PopupRedirectResolver,\n  bypassAuthState = false\n): Promise<UserCredential | null> {\n  const authInternal = _castAuth(auth);\n  const resolver = _withDefaultResolver(authInternal, resolverExtern);\n  const action = new RedirectAction(authInternal, resolver, bypassAuthState);\n  const result = await action.execute();\n\n  if (result && !bypassAuthState) {\n    delete result.user._redirectEventId;\n    await authInternal._persistUserIfCurrent(result.user as UserInternal);\n    await authInternal._setRedirectUser(null, resolverExtern);\n  }\n\n  return result;\n}\n\nasync function prepareUserForRedirect(user: UserInternal): Promise<string> {\n  const eventId = _generateEventId(`${user.uid}:::`);\n  user._redirectEventId = eventId;\n  await user.auth._setRedirectUser(user);\n  await user.auth._persistUserIfCurrent(user);\n  return eventId;\n}\n", "/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { SDK_VERSION } from '@firebase/app';\nimport { AuthProvider } from '../../model/public_types';\nimport { ApiKey, AppName, AuthInternal } from '../../model/auth';\nimport { AuthEventType } from '../../model/popup_redirect';\nimport { AuthErrorCode } from '../errors';\nimport { _assert } from './assert';\nimport { isEmpty, querystring } from '@firebase/util';\nimport { _emulatorUrl } from './emulator';\nimport { FederatedAuthProvider } from '../providers/federated';\nimport { BaseOAuthProvider } from '../providers/oauth';\n\n/**\n * URL for Authentication widget which will initiate the OAuth handshake\n *\n * @internal\n */\nconst WIDGET_PATH = '__/auth/handler';\n\n/**\n * URL for emulated environment\n *\n * @internal\n */\nconst EMULATOR_WIDGET_PATH = 'emulator/auth/handler';\n\n/**\n * Fragment name for the App Check token that gets passed to the widget\n *\n * @internal\n */\nconst FIREBASE_APP_CHECK_FRAGMENT_ID = encodeURIComponent('fac');\n\n// eslint-disable-next-line @typescript-eslint/consistent-type-definitions\ntype WidgetParams = {\n  apiKey: ApiKey;\n  appName: AppName;\n  authType: AuthEventType;\n  redirectUrl?: string;\n  v: string;\n  providerId?: string;\n  scopes?: string;\n  customParameters?: string;\n  eventId?: string;\n  tid?: string;\n} & { [key: string]: string | undefined };\n\nexport async function _getRedirectUrl(\n  auth: AuthInternal,\n  provider: AuthProvider,\n  authType: AuthEventType,\n  redirectUrl?: string,\n  eventId?: string,\n  additionalParams?: Record<string, string>\n): Promise<string> {\n  _assert(auth.config.authDomain, auth, AuthErrorCode.MISSING_AUTH_DOMAIN);\n  _assert(auth.config.apiKey, auth, AuthErrorCode.INVALID_API_KEY);\n\n  const params: WidgetParams = {\n    apiKey: auth.config.apiKey,\n    appName: auth.name,\n    authType,\n    redirectUrl,\n    v: SDK_VERSION,\n    eventId\n  };\n\n  if (provider instanceof FederatedAuthProvider) {\n    provider.setDefaultLanguage(auth.languageCode);\n    params.providerId = provider.providerId || '';\n    if (!isEmpty(provider.getCustomParameters())) {\n      params.customParameters = JSON.stringify(provider.getCustomParameters());\n    }\n\n    // TODO set additionalParams from the provider as well?\n    for (const [key, value] of Object.entries(additionalParams || {})) {\n      params[key] = value;\n    }\n  }\n\n  if (provider instanceof BaseOAuthProvider) {\n    const scopes = provider.getScopes().filter(scope => scope !== '');\n    if (scopes.length > 0) {\n      params.scopes = scopes.join(',');\n    }\n  }\n\n  if (auth.tenantId) {\n    params.tid = auth.tenantId;\n  }\n\n  // TODO: maybe set eid as endipointId\n  // TODO: maybe set fw as Frameworks.join(\",\")\n\n  const paramsDict = params as Record<string, string | number>;\n  for (const key of Object.keys(paramsDict)) {\n    if (paramsDict[key] === undefined) {\n      delete paramsDict[key];\n    }\n  }\n\n  // Sets the App Check token to pass to the widget\n  const appCheckToken = await auth._getAppCheckToken();\n  const appCheckTokenFragment = appCheckToken\n    ? `#${FIREBASE_APP_CHECK_FRAGMENT_ID}=${encodeURIComponent(appCheckToken)}`\n    : '';\n\n  // Start at index 1 to skip the leading '&' in the query string\n  return `${getHandlerBase(auth)}?${querystring(paramsDict).slice(\n    1\n  )}${appCheckTokenFragment}`;\n}\n\nfunction getHandlerBase({ config }: AuthInternal): string {\n  if (!config.emulator) {\n    return `https://${config.authDomain}/${WIDGET_PATH}`;\n  }\n\n  return _emulatorUrl(config, EMULATOR_WIDGET_PATH);\n}\n", "/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport interface CordovaWindow extends Window {\n  cordova: {\n    plugins: {\n      browsertab: {\n        isAvailable(cb: (available: boolean) => void): void;\n        openUrl(url: string): void;\n        close(): void;\n      };\n    };\n\n    InAppBrowser: {\n      open(url: string, target: string, options: string): InAppBrowserRef;\n    };\n  };\n\n  universalLinks: {\n    subscribe(\n      n: null,\n      cb: (event: Record<string, string> | null) => void\n    ): void;\n  };\n\n  BuildInfo: {\n    readonly packageName: string;\n    readonly displayName: string;\n  };\n\n  handleOpenURL(url: string): void;\n}\n\nexport interface InAppBrowserRef {\n  close?: () => void;\n}\n\nexport function _cordovaWindow(): CordovaWindow {\n  return window as unknown as CordovaWindow;\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { _performApiRequest, Endpoint, HttpMethod } from '../index';\nimport { Auth } from '../../model/public_types';\n\nexport interface GetProjectConfigRequest {\n  androidPackageName?: string;\n  iosBundleId?: string;\n}\n\nexport interface GetProjectConfigResponse {\n  authorizedDomains: string[];\n}\n\nexport async function _getProjectConfig(\n  auth: Auth,\n  request: GetProjectConfigRequest = {}\n): Promise<GetProjectConfigResponse> {\n  return _performApiRequest<GetProjectConfigRequest, GetProjectConfigResponse>(\n    auth,\n    HttpMethod.GET,\n    Endpoint.GET_PROJECT_CONFIG,\n    request\n  );\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AuthProvider } from '../../model/public_types';\nimport { AuthErrorCode } from '../../core/errors';\nimport {\n  debugAssert,\n  _assert,\n  _createError,\n  _fail\n} from '../../core/util/assert';\nimport { _isAndroid, _isIOS, _isIOS7Or8 } from '../../core/util/browser';\nimport { _getRedirectUrl } from '../../core/util/handler';\nimport { AuthInternal } from '../../model/auth';\nimport { AuthEvent } from '../../model/popup_redirect';\nimport { InAppBrowserRef, _cordovaWindow } from '../plugins';\nimport {\n  GetProjectConfigRequest,\n  _getProjectConfig\n} from '../../api/project_config/get_project_config';\n\n/**\n * How long to wait after the app comes back into focus before concluding that\n * the user closed the sign in tab.\n */\nconst REDIRECT_TIMEOUT_MS = 2000;\n\n/**\n * Generates the URL for the OAuth handler.\n */\nexport async function _generateHandlerUrl(\n  auth: AuthInternal,\n  event: AuthEvent,\n  provider: AuthProvider\n): Promise<string> {\n  // Get the cordova plugins\n  const { BuildInfo } = _cordovaWindow();\n  debugAssert(event.sessionId, 'AuthEvent did not contain a session ID');\n  const sessionDigest = await computeSha256(event.sessionId);\n\n  const additionalParams: Record<string, string> = {};\n  if (_isIOS()) {\n    // iOS app identifier\n    additionalParams['ibi'] = BuildInfo.packageName;\n  } else if (_isAndroid()) {\n    // Android app identifier\n    additionalParams['apn'] = BuildInfo.packageName;\n  } else {\n    _fail(auth, AuthErrorCode.OPERATION_NOT_SUPPORTED);\n  }\n\n  // Add the display name if available\n  if (BuildInfo.displayName) {\n    additionalParams['appDisplayName'] = BuildInfo.displayName;\n  }\n\n  // Attached the hashed session ID\n  additionalParams['sessionId'] = sessionDigest;\n  return _getRedirectUrl(\n    auth,\n    provider,\n    event.type,\n    undefined,\n    event.eventId ?? undefined,\n    additionalParams\n  );\n}\n\n/**\n * Validates that this app is valid for this project configuration\n */\nexport async function _validateOrigin(auth: AuthInternal): Promise<void> {\n  const { BuildInfo } = _cordovaWindow();\n  const request: GetProjectConfigRequest = {};\n  if (_isIOS()) {\n    request.iosBundleId = BuildInfo.packageName;\n  } else if (_isAndroid()) {\n    request.androidPackageName = BuildInfo.packageName;\n  } else {\n    _fail(auth, AuthErrorCode.OPERATION_NOT_SUPPORTED);\n  }\n\n  // Will fail automatically if package name is not authorized\n  await _getProjectConfig(auth, request);\n}\n\nexport function _performRedirect(\n  handlerUrl: string\n): Promise<InAppBrowserRef | null> {\n  // Get the cordova plugins\n  const { cordova } = _cordovaWindow();\n\n  return new Promise(resolve => {\n    cordova.plugins.browsertab.isAvailable(browserTabIsAvailable => {\n      let iabRef: InAppBrowserRef | null = null;\n      if (browserTabIsAvailable) {\n        cordova.plugins.browsertab.openUrl(handlerUrl);\n      } else {\n        // TODO: Return the inappbrowser ref that's returned from the open call\n        iabRef = cordova.InAppBrowser.open(\n          handlerUrl,\n          _isIOS7Or8() ? '_blank' : '_system',\n          'location=yes'\n        );\n      }\n      resolve(iabRef);\n    });\n  });\n}\n\n// Thin interface wrapper to avoid circular dependency with ./events module\ninterface PassiveAuthEventListener {\n  addPassiveListener(cb: () => void): void;\n  removePassiveListener(cb: () => void): void;\n}\n\n/**\n * This function waits for app activity to be seen before resolving. It does\n * this by attaching listeners to various dom events. Once the app is determined\n * to be visible, this promise resolves. AFTER that resolution, the listeners\n * are detached and any browser tabs left open will be closed.\n */\nexport async function _waitForAppResume(\n  auth: AuthInternal,\n  eventListener: PassiveAuthEventListener,\n  iabRef: InAppBrowserRef | null\n): Promise<void> {\n  // Get the cordova plugins\n  const { cordova } = _cordovaWindow();\n\n  let cleanup = (): void => {};\n  try {\n    await new Promise<void>((resolve, reject) => {\n      let onCloseTimer: number | null = null;\n\n      // DEFINE ALL THE CALLBACKS =====\n      function authEventSeen(): void {\n        // Auth event was detected. Resolve this promise and close the extra\n        // window if it's still open.\n        resolve();\n        const closeBrowserTab = cordova.plugins.browsertab?.close;\n        if (typeof closeBrowserTab === 'function') {\n          closeBrowserTab();\n        }\n        // Close inappbrowser emebedded webview in iOS7 and 8 case if still\n        // open.\n        if (typeof iabRef?.close === 'function') {\n          iabRef.close();\n        }\n      }\n\n      function resumed(): void {\n        if (onCloseTimer) {\n          // This code already ran; do not rerun.\n          return;\n        }\n\n        onCloseTimer = window.setTimeout(() => {\n          // Wait two seeconds after resume then reject.\n          reject(_createError(auth, AuthErrorCode.REDIRECT_CANCELLED_BY_USER));\n        }, REDIRECT_TIMEOUT_MS);\n      }\n\n      function visibilityChanged(): void {\n        if (document?.visibilityState === 'visible') {\n          resumed();\n        }\n      }\n\n      // ATTACH ALL THE LISTENERS =====\n      // Listen for the auth event\n      eventListener.addPassiveListener(authEventSeen);\n\n      // Listen for resume and visibility events\n      document.addEventListener('resume', resumed, false);\n      if (_isAndroid()) {\n        document.addEventListener('visibilitychange', visibilityChanged, false);\n      }\n\n      // SETUP THE CLEANUP FUNCTION =====\n      cleanup = () => {\n        eventListener.removePassiveListener(authEventSeen);\n        document.removeEventListener('resume', resumed, false);\n        document.removeEventListener(\n          'visibilitychange',\n          visibilityChanged,\n          false\n        );\n        if (onCloseTimer) {\n          window.clearTimeout(onCloseTimer);\n        }\n      };\n    });\n  } finally {\n    cleanup();\n  }\n}\n\n/**\n * Checks the configuration of the Cordova environment. This has no side effect\n * if the configuration is correct; otherwise it throws an error with the\n * missing plugin.\n */\nexport function _checkCordovaConfiguration(auth: AuthInternal): void {\n  const win = _cordovaWindow();\n  // Check all dependencies installed.\n  // https://github.com/nordnet/cordova-universal-links-plugin\n  // Note that cordova-universal-links-plugin has been abandoned.\n  // A fork with latest fixes is available at:\n  // https://www.npmjs.com/package/cordova-universal-links-plugin-fix\n  _assert(\n    typeof win?.universalLinks?.subscribe === 'function',\n    auth,\n    AuthErrorCode.INVALID_CORDOVA_CONFIGURATION,\n    {\n      missingPlugin: 'cordova-universal-links-plugin-fix'\n    }\n  );\n\n  // https://www.npmjs.com/package/cordova-plugin-buildinfo\n  _assert(\n    typeof win?.BuildInfo?.packageName !== 'undefined',\n    auth,\n    AuthErrorCode.INVALID_CORDOVA_CONFIGURATION,\n    {\n      missingPlugin: 'cordova-plugin-buildInfo'\n    }\n  );\n\n  // https://github.com/google/cordova-plugin-browsertab\n  _assert(\n    typeof win?.cordova?.plugins?.browsertab?.openUrl === 'function',\n    auth,\n    AuthErrorCode.INVALID_CORDOVA_CONFIGURATION,\n    {\n      missingPlugin: 'cordova-plugin-browsertab'\n    }\n  );\n  _assert(\n    typeof win?.cordova?.plugins?.browsertab?.isAvailable === 'function',\n    auth,\n    AuthErrorCode.INVALID_CORDOVA_CONFIGURATION,\n    {\n      missingPlugin: 'cordova-plugin-browsertab'\n    }\n  );\n\n  // https://cordova.apache.org/docs/en/latest/reference/cordova-plugin-inappbrowser/\n  _assert(\n    typeof win?.cordova?.InAppBrowser?.open === 'function',\n    auth,\n    AuthErrorCode.INVALID_CORDOVA_CONFIGURATION,\n    {\n      missingPlugin: 'cordova-plugin-inappbrowser'\n    }\n  );\n}\n\n/**\n * Computes the SHA-256 of a session ID. The SubtleCrypto interface is only\n * available in \"secure\" contexts, which covers Cordova (which is served on a file\n * protocol).\n */\nasync function computeSha256(sessionId: string): Promise<string> {\n  const bytes = stringToArrayBuffer(sessionId);\n\n  // TODO: For IE11 crypto has a different name and this operation comes back\n  //       as an object, not a promise. This is the old proposed standard that\n  //       is used by IE11:\n  // https://www.w3.org/TR/2013/WD-WebCryptoAPI-20130108/#cryptooperation-interface\n  const buf = await crypto.subtle.digest('SHA-256', bytes);\n  const arr = Array.from(new Uint8Array(buf));\n  return arr.map(num => num.toString(16).padStart(2, '0')).join('');\n}\n\nfunction stringToArrayBuffer(str: string): Uint8Array {\n  // This function is only meant to deal with an ASCII charset and makes\n  // certain simplifying assumptions.\n  debugAssert(\n    /[0-9a-zA-Z]+/.test(str),\n    'Can only convert alpha-numeric strings'\n  );\n  if (typeof TextEncoder !== 'undefined') {\n    return new TextEncoder().encode(str);\n  }\n\n  const buff = new ArrayBuffer(str.length);\n  const view = new Uint8Array(buff);\n  for (let i = 0; i < str.length; i++) {\n    view[i] = str.charCodeAt(i);\n  }\n  return view;\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  AuthEvent,\n  AuthEventConsumer,\n  AuthEventType,\n  EventManager\n} from '../../model/popup_redirect';\nimport { AuthErrorCode } from '../errors';\nimport { AuthInternal } from '../../model/auth';\nimport { _createError } from '../util/assert';\n\n// The amount of time to store the UIDs of seen events; this is\n// set to 10 min by default\nconst EVENT_DUPLICATION_CACHE_DURATION_MS = 10 * 60 * 1000;\n\nexport class AuthEventManager implements EventManager {\n  private readonly cachedEventUids: Set<string> = new Set();\n  private readonly consumers: Set<AuthEventConsumer> = new Set();\n  protected queuedRedirectEvent: AuthEvent | null = null;\n  protected hasHandledPotentialRedirect = false;\n  private lastProcessedEventTime = Date.now();\n\n  constructor(private readonly auth: AuthInternal) {}\n\n  registerConsumer(authEventConsumer: AuthEventConsumer): void {\n    this.consumers.add(authEventConsumer);\n\n    if (\n      this.queuedRedirectEvent &&\n      this.isEventForConsumer(this.queuedRedirectEvent, authEventConsumer)\n    ) {\n      this.sendToConsumer(this.queuedRedirectEvent, authEventConsumer);\n      this.saveEventToCache(this.queuedRedirectEvent);\n      this.queuedRedirectEvent = null;\n    }\n  }\n\n  unregisterConsumer(authEventConsumer: AuthEventConsumer): void {\n    this.consumers.delete(authEventConsumer);\n  }\n\n  onEvent(event: AuthEvent): boolean {\n    // Check if the event has already been handled\n    if (this.hasEventBeenHandled(event)) {\n      return false;\n    }\n\n    let handled = false;\n    this.consumers.forEach(consumer => {\n      if (this.isEventForConsumer(event, consumer)) {\n        handled = true;\n        this.sendToConsumer(event, consumer);\n        this.saveEventToCache(event);\n      }\n    });\n\n    if (this.hasHandledPotentialRedirect || !isRedirectEvent(event)) {\n      // If we've already seen a redirect before, or this is a popup event,\n      // bail now\n      return handled;\n    }\n\n    this.hasHandledPotentialRedirect = true;\n\n    // If the redirect wasn't handled, hang on to it\n    if (!handled) {\n      this.queuedRedirectEvent = event;\n      handled = true;\n    }\n\n    return handled;\n  }\n\n  private sendToConsumer(event: AuthEvent, consumer: AuthEventConsumer): void {\n    if (event.error && !isNullRedirectEvent(event)) {\n      const code =\n        (event.error.code?.split('auth/')[1] as AuthErrorCode) ||\n        AuthErrorCode.INTERNAL_ERROR;\n      consumer.onError(_createError(this.auth, code));\n    } else {\n      consumer.onAuthEvent(event);\n    }\n  }\n\n  private isEventForConsumer(\n    event: AuthEvent,\n    consumer: AuthEventConsumer\n  ): boolean {\n    const eventIdMatches =\n      consumer.eventId === null ||\n      (!!event.eventId && event.eventId === consumer.eventId);\n    return consumer.filter.includes(event.type) && eventIdMatches;\n  }\n\n  private hasEventBeenHandled(event: AuthEvent): boolean {\n    if (\n      Date.now() - this.lastProcessedEventTime >=\n      EVENT_DUPLICATION_CACHE_DURATION_MS\n    ) {\n      this.cachedEventUids.clear();\n    }\n\n    return this.cachedEventUids.has(eventUid(event));\n  }\n\n  private saveEventToCache(event: AuthEvent): void {\n    this.cachedEventUids.add(eventUid(event));\n    this.lastProcessedEventTime = Date.now();\n  }\n}\n\nfunction eventUid(e: AuthEvent): string {\n  return [e.type, e.eventId, e.sessionId, e.tenantId].filter(v => v).join('-');\n}\n\nfunction isNullRedirectEvent({ type, error }: AuthEvent): boolean {\n  return (\n    type === AuthEventType.UNKNOWN &&\n    error?.code === `auth/${AuthErrorCode.NO_AUTH_EVENT}`\n  );\n}\n\nfunction isRedirectEvent(event: AuthEvent): boolean {\n  switch (event.type) {\n    case AuthEventType.SIGN_IN_VIA_REDIRECT:\n    case AuthEventType.LINK_VIA_REDIRECT:\n    case AuthEventType.REAUTH_VIA_REDIRECT:\n      return true;\n    case AuthEventType.UNKNOWN:\n      return isNullRedirectEvent(event);\n    default:\n      return false;\n  }\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { querystringDecode } from '@firebase/util';\nimport { AuthEventManager } from '../../core/auth/auth_event_manager';\nimport { AuthErrorCode } from '../../core/errors';\nimport { PersistedBlob, PersistenceInternal } from '../../core/persistence';\nimport {\n  KeyName,\n  _persistenceKeyName\n} from '../../core/persistence/persistence_user_manager';\nimport { _createError } from '../../core/util/assert';\nimport { _getInstance } from '../../core/util/instantiator';\nimport { AuthInternal } from '../../model/auth';\nimport { AuthEvent, AuthEventType } from '../../model/popup_redirect';\nimport { browserLocalPersistence } from '../../platform_browser/persistence/local_storage';\n\nconst SESSION_ID_LENGTH = 20;\n\n/** Custom AuthEventManager that adds passive listeners to events */\nexport class CordovaAuthEventManager extends AuthEventManager {\n  private readonly passiveListeners = new Set<(e: AuthEvent) => void>();\n  private resolveInialized!: () => void;\n  private initPromise = new Promise<void>(resolve => {\n    this.resolveInialized = resolve;\n  });\n\n  addPassiveListener(cb: (e: AuthEvent) => void): void {\n    this.passiveListeners.add(cb);\n  }\n\n  removePassiveListener(cb: (e: AuthEvent) => void): void {\n    this.passiveListeners.delete(cb);\n  }\n\n  // In a Cordova environment, this manager can live through multiple redirect\n  // operations\n  resetRedirect(): void {\n    this.queuedRedirectEvent = null;\n    this.hasHandledPotentialRedirect = false;\n  }\n\n  /** Override the onEvent method */\n  onEvent(event: AuthEvent): boolean {\n    this.resolveInialized();\n    this.passiveListeners.forEach(cb => cb(event));\n    return super.onEvent(event);\n  }\n\n  async initialized(): Promise<void> {\n    await this.initPromise;\n  }\n}\n\n/**\n * Generates a (partial) {@link AuthEvent}.\n */\nexport function _generateNewEvent(\n  auth: AuthInternal,\n  type: AuthEventType,\n  eventId: string | null = null\n): AuthEvent {\n  return {\n    type,\n    eventId,\n    urlResponse: null,\n    sessionId: generateSessionId(),\n    postBody: null,\n    tenantId: auth.tenantId,\n    error: _createError(auth, AuthErrorCode.NO_AUTH_EVENT)\n  };\n}\n\nexport function _savePartialEvent(\n  auth: AuthInternal,\n  event: AuthEvent\n): Promise<void> {\n  return storage()._set(persistenceKey(auth), event as object as PersistedBlob);\n}\n\nexport async function _getAndRemoveEvent(\n  auth: AuthInternal\n): Promise<AuthEvent | null> {\n  const event = (await storage()._get(\n    persistenceKey(auth)\n  )) as AuthEvent | null;\n  if (event) {\n    await storage()._remove(persistenceKey(auth));\n  }\n  return event;\n}\n\nexport function _eventFromPartialAndUrl(\n  partialEvent: AuthEvent,\n  url: string\n): AuthEvent | null {\n  // Parse the deep link within the dynamic link URL.\n  const callbackUrl = _getDeepLinkFromCallback(url);\n  // Confirm it is actually a callback URL.\n  // Currently the universal link will be of this format:\n  // https://<AUTH_DOMAIN>/__/auth/callback<OAUTH_RESPONSE>\n  // This is a fake URL but is not intended to take the user anywhere\n  // and just redirect to the app.\n  if (callbackUrl.includes('/__/auth/callback')) {\n    // Check if there is an error in the URL.\n    // This mechanism is also used to pass errors back to the app:\n    // https://<AUTH_DOMAIN>/__/auth/callback?firebaseError=<STRINGIFIED_ERROR>\n    const params = searchParamsOrEmpty(callbackUrl);\n    // Get the error object corresponding to the stringified error if found.\n    const errorObject = params['firebaseError']\n      ? parseJsonOrNull(decodeURIComponent(params['firebaseError']))\n      : null;\n    const code = errorObject?.['code']?.split('auth/')?.[1];\n    const error = code ? _createError(code) : null;\n    if (error) {\n      return {\n        type: partialEvent.type,\n        eventId: partialEvent.eventId,\n        tenantId: partialEvent.tenantId,\n        error,\n        urlResponse: null,\n        sessionId: null,\n        postBody: null\n      };\n    } else {\n      return {\n        type: partialEvent.type,\n        eventId: partialEvent.eventId,\n        tenantId: partialEvent.tenantId,\n        sessionId: partialEvent.sessionId,\n        urlResponse: callbackUrl,\n        postBody: null\n      };\n    }\n  }\n\n  return null;\n}\n\nfunction generateSessionId(): string {\n  const chars = [];\n  const allowedChars =\n    '1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\n  for (let i = 0; i < SESSION_ID_LENGTH; i++) {\n    const idx = Math.floor(Math.random() * allowedChars.length);\n    chars.push(allowedChars.charAt(idx));\n  }\n  return chars.join('');\n}\n\nfunction storage(): PersistenceInternal {\n  return _getInstance(browserLocalPersistence);\n}\n\nfunction persistenceKey(auth: AuthInternal): string {\n  return _persistenceKeyName(KeyName.AUTH_EVENT, auth.config.apiKey, auth.name);\n}\n\nfunction parseJsonOrNull(json: string): ReturnType<typeof JSON.parse> | null {\n  try {\n    return JSON.parse(json);\n  } catch (e) {\n    return null;\n  }\n}\n\n// Exported for testing\nexport function _getDeepLinkFromCallback(url: string): string {\n  const params = searchParamsOrEmpty(url);\n  const link = params['link'] ? decodeURIComponent(params['link']) : undefined;\n  // Double link case (automatic redirect)\n  const doubleDeepLink = searchParamsOrEmpty(link)['link'];\n  // iOS custom scheme links.\n  const iOSDeepLink = params['deep_link_id']\n    ? decodeURIComponent(params['deep_link_id'])\n    : undefined;\n  const iOSDoubleDeepLink = searchParamsOrEmpty(iOSDeepLink)['link'];\n  return iOSDoubleDeepLink || iOSDeepLink || doubleDeepLink || link || url;\n}\n\n/**\n * Optimistically tries to get search params from a string, or else returns an\n * empty search params object.\n */\nfunction searchParamsOrEmpty(url: string | undefined): Record<string, string> {\n  if (!url?.includes('?')) {\n    return {};\n  }\n\n  const [_, ...rest] = url.split('?');\n  return querystringDecode(rest.join('?')) as Record<string, string>;\n}\n", "/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AuthProvider, PopupRedirectResolver } from '../../model/public_types';\nimport { browserSessionPersistence } from '../../platform_browser/persistence/session_storage';\nimport { AuthInternal } from '../../model/auth';\nimport {\n  AuthEvent,\n  AuthEventType,\n  PopupRedirectResolverInternal\n} from '../../model/popup_redirect';\nimport { AuthPopup } from '../../platform_browser/util/popup';\nimport { _createError, _fail } from '../../core/util/assert';\nimport { AuthErrorCode } from '../../core/errors';\nimport {\n  _checkCordovaConfiguration,\n  _generateHandlerUrl,\n  _performRedirect,\n  _validateOrigin,\n  _waitForAppResume\n} from './utils';\nimport {\n  CordovaAuthEventManager,\n  _eventFromPartialAndUrl,\n  _generateNewEvent,\n  _getAndRemoveEvent,\n  _savePartialEvent\n} from './events';\nimport { AuthEventManager } from '../../core/auth/auth_event_manager';\nimport { _getRedirectResult } from '../../platform_browser/strategies/redirect';\nimport {\n  _clearRedirectOutcomes,\n  _overrideRedirectResult\n} from '../../core/strategies/redirect';\nimport { _cordovaWindow } from '../plugins';\n\n/**\n * How long to wait for the initial auth event before concluding no\n * redirect pending\n */\nconst INITIAL_EVENT_TIMEOUT_MS = 500;\n\nclass CordovaPopupRedirectResolver implements PopupRedirectResolverInternal {\n  readonly _redirectPersistence = browserSessionPersistence;\n  readonly _shouldInitProactively = true; // This is lightweight for Cordova\n  private readonly eventManagers = new Map<string, CordovaAuthEventManager>();\n  private readonly originValidationPromises: Record<string, Promise<void>> = {};\n\n  _completeRedirectFn = _getRedirectResult;\n  _overrideRedirectResult = _overrideRedirectResult;\n\n  async _initialize(auth: AuthInternal): Promise<CordovaAuthEventManager> {\n    const key = auth._key();\n    let manager = this.eventManagers.get(key);\n    if (!manager) {\n      manager = new CordovaAuthEventManager(auth);\n      this.eventManagers.set(key, manager);\n      this.attachCallbackListeners(auth, manager);\n    }\n    return manager;\n  }\n\n  _openPopup(auth: AuthInternal): Promise<AuthPopup> {\n    _fail(auth, AuthErrorCode.OPERATION_NOT_SUPPORTED);\n  }\n\n  async _openRedirect(\n    auth: AuthInternal,\n    provider: AuthProvider,\n    authType: AuthEventType,\n    eventId?: string\n  ): Promise<void> {\n    _checkCordovaConfiguration(auth);\n    const manager = await this._initialize(auth);\n    await manager.initialized();\n\n    // Reset the persisted redirect states. This does not matter on Web where\n    // the redirect always blows away application state entirely. On Cordova,\n    // the app maintains control flow through the redirect.\n    manager.resetRedirect();\n    _clearRedirectOutcomes();\n\n    await this._originValidation(auth);\n\n    const event = _generateNewEvent(auth, authType, eventId);\n    await _savePartialEvent(auth, event);\n    const url = await _generateHandlerUrl(auth, event, provider);\n    const iabRef = await _performRedirect(url);\n    return _waitForAppResume(auth, manager, iabRef);\n  }\n\n  _isIframeWebStorageSupported(\n    _auth: AuthInternal,\n    _cb: (support: boolean) => unknown\n  ): void {\n    throw new Error('Method not implemented.');\n  }\n\n  _originValidation(auth: AuthInternal): Promise<void> {\n    const key = auth._key();\n    if (!this.originValidationPromises[key]) {\n      this.originValidationPromises[key] = _validateOrigin(auth);\n    }\n\n    return this.originValidationPromises[key];\n  }\n\n  private attachCallbackListeners(\n    auth: AuthInternal,\n    manager: AuthEventManager\n  ): void {\n    // Get the global plugins\n    const { universalLinks, handleOpenURL, BuildInfo } = _cordovaWindow();\n\n    const noEventTimeout = setTimeout(async () => {\n      // We didn't see that initial event. Clear any pending object and\n      // dispatch no event\n      await _getAndRemoveEvent(auth);\n      manager.onEvent(generateNoEvent());\n    }, INITIAL_EVENT_TIMEOUT_MS);\n\n    const universalLinksCb = async (\n      eventData: Record<string, string> | null\n    ): Promise<void> => {\n      // We have an event so we can clear the no event timeout\n      clearTimeout(noEventTimeout);\n\n      const partialEvent = await _getAndRemoveEvent(auth);\n      let finalEvent: AuthEvent | null = null;\n      if (partialEvent && eventData?.['url']) {\n        finalEvent = _eventFromPartialAndUrl(partialEvent, eventData['url']);\n      }\n\n      // If finalEvent is never filled, trigger with no event\n      manager.onEvent(finalEvent || generateNoEvent());\n    };\n\n    // Universal links subscriber doesn't exist for iOS, so we need to check\n    if (\n      typeof universalLinks !== 'undefined' &&\n      typeof universalLinks.subscribe === 'function'\n    ) {\n      universalLinks.subscribe(null, universalLinksCb);\n    }\n\n    // iOS 7 or 8 custom URL schemes.\n    // This is also the current default behavior for iOS 9+.\n    // For this to work, cordova-plugin-customurlscheme needs to be installed.\n    // https://github.com/EddyVerbruggen/Custom-URL-scheme\n    // Do not overwrite the existing developer's URL handler.\n    const existingHandleOpenURL = handleOpenURL;\n    const packagePrefix = `${BuildInfo.packageName.toLowerCase()}://`;\n    _cordovaWindow().handleOpenURL = async url => {\n      if (url.toLowerCase().startsWith(packagePrefix)) {\n        // We want this intentionally to float\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        universalLinksCb({ url });\n      }\n      // Call the developer's handler if it is present.\n      if (typeof existingHandleOpenURL === 'function') {\n        try {\n          existingHandleOpenURL(url);\n        } catch (e) {\n          // This is a developer error. Don't stop the flow of the SDK.\n          console.error(e);\n        }\n      }\n    };\n  }\n}\n\n/**\n * An implementation of {@link PopupRedirectResolver} suitable for Cordova\n * based applications.\n *\n * @public\n */\nexport const cordovaPopupRedirectResolver: PopupRedirectResolver =\n  CordovaPopupRedirectResolver;\n\nfunction generateNoEvent(): AuthEvent {\n  return {\n    type: AuthEventType.UNKNOWN,\n    eventId: null,\n    sessionId: null,\n    urlResponse: null,\n    postBody: null,\n    tenantId: null,\n    error: _createError(AuthErrorCode.NO_AUTH_EVENT)\n  };\n}\n", "/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Auth,\n  AuthProvider,\n  PopupRedirectResolver,\n  User\n} from '../../model/public_types';\nimport {\n  _linkWithRedirect,\n  _reauthenticateWithRedirect,\n  _signInWithRedirect\n} from '../../platform_browser/strategies/redirect';\n\nexport function signInWithRedirect(\n  auth: Auth,\n  provider: AuthProvider,\n  resolver?: PopupRedirectResolver\n): Promise<void> {\n  return _signInWithRedirect(auth, provider, resolver) as Promise<void>;\n}\n\nexport function reauthenticateWithRedirect(\n  user: User,\n  provider: AuthProvider,\n  resolver?: PopupRedirectResolver\n): Promise<void> {\n  return _reauthenticateWithRedirect(user, provider, resolver) as Promise<void>;\n}\n\nexport function linkWithRedirect(\n  user: User,\n  provider: AuthProvider,\n  resolver?: PopupRedirectResolver\n): Promise<void> {\n  return _linkWithRedirect(user, provider, resolver) as Promise<void>;\n}\n", "/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * This is the file that people using Cordova will actually import. You\n * should only include this file if you have something specific about your\n * implementation that mandates having a separate entrypoint. Otherwise you can\n * just use index.ts\n */\n\nimport { FirebaseApp, getApp, _getProvider } from '@firebase/app';\nimport { Auth } from './src/model/public_types';\nimport { indexedDBLocalPersistence } from './src/platform_browser/persistence/indexed_db';\n\nimport { initializeAuth } from './src';\nimport { registerAuth } from './src/core/auth/register';\nimport { ClientPlatform } from './src/core/util/version';\n\nexport * from './index.shared';\n\n// Cordova also supports indexedDB / browserSession / browserLocal\nexport { indexedDBLocalPersistence } from './src/platform_browser/persistence/indexed_db';\nexport { browserLocalPersistence } from './src/platform_browser/persistence/local_storage';\nexport { browserSessionPersistence } from './src/platform_browser/persistence/session_storage';\nexport { getRedirectResult } from './src/platform_browser/strategies/redirect';\n\nexport { cordovaPopupRedirectResolver } from './src/platform_cordova/popup_redirect/popup_redirect';\nexport {\n  signInWithRedirect,\n  reauthenticateWithRedirect,\n  linkWithRedirect\n} from './src/platform_cordova/strategies/redirect';\n\nimport { cordovaPopupRedirectResolver } from './src/platform_cordova/popup_redirect/popup_redirect';\n\nexport function getAuth(app: FirebaseApp = getApp()): Auth {\n  const provider = _getProvider(app, 'auth');\n\n  if (provider.isInitialized()) {\n    return provider.getImmediate();\n  }\n\n  return initializeAuth(app, {\n    persistence: indexedDBLocalPersistence,\n    popupRedirectResolver: cordovaPopupRedirectResolver\n  });\n}\n\nregisterAuth(ClientPlatform.CORDOVA);\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgCO,IAAM,wBAAwB;ACM/B,SAAU,YACd,UAA2B;AAD7B,MAmBC,QAAA;AAhBC,SAAO,QAAQ,IACb,SAAS,IAAI,SAAM,SAAO;AAAA,WAAA,UAAA,OAAA,QAAA,QAAA,WAAA;;;;;;AAER,mBAAA,CAAA,GAAM,OAAO;;AAArB,oBAAQA,IAAa,KAAA;AAC3B,mBAAO,CAAA,GAAA;cACL,WAAW;cACX;aAC4B;;;AAE9B,mBAAO,CAAA,GAAA;cACL,WAAW;cACX,QAAM;aACkB;;;;;;;;IAE7B,CAAA;EAAA,CAAA,CAAC;AAEN;AC1BA,IAAA;;EAAA,WAAA;AAUE,aAAAC,UAA6B,aAAwB;AAAxB,WAAW,cAAX;AANZ,WAAW,cAIxB,CAAA;AAGF,WAAK,oBAAoB,KAAK,YAAY,KAAK,IAAI;;AAS9C,IAAAA,UAAY,eAAnB,SAAoB,aAAwB;AAI1C,UAAM,mBAAmB,KAAK,UAAU,KAAK,SAAA,UAAQ;AACnD,eAAA,SAAS,cAAc,WAAW;MAAlC,CAAmC;AAErC,UAAI,kBAAkB;AACpB,eAAO;MACR;AACD,UAAM,cAAc,IAAIA,UAAS,WAAW;AAC5C,WAAK,UAAU,KAAK,WAAW;AAC/B,aAAO;;AAGD,IAAAA,UAAa,UAAA,gBAArB,SAAsB,aAAwB;AAC5C,aAAO,KAAK,gBAAgB;;AAahB,IAAAA,UAAW,UAAA,cAAzB,SAGE,OAAY;;;;;;;AACN,6BAAe;AACf,cAAAD,MAA+B,aAAa,MAA1C,UAAOA,IAAA,SAAE,YAASA,IAAA,WAAE,OAAIA,IAAA;AAE1B,yBACJ,KAAK,YAAY,SAAS;AAC5B,kBAAI,EAAC,aAAA,QAAA,aAAQ,SAAA,SAAR,SAAU,OAAM;AACnB,uBAAO;kBAAA;;gBAAA;cACR;AAED,2BAAa,MAAM,CAAC,EAAE,YAAY;gBAChC,QAAmB;gBACnB;gBACA;cACD,CAAA;AAEK,yBAAW,MAAM,KAAK,QAAQ,EAAE,IAAI,SAAM,SAAO;AAAA,uBAAA,UAAA,OAAA,QAAA,QAAA,WAAA;AAAA,yBAAA,YAAA,MAAA,SAAAA,KAAA;AACrD,2BAAA,CAAA,GAAA,QAAQ,aAAa,QAAQ,IAAI,CAAC;kBAAA,CAAA;gBAAA,CAAA;cAAA,CAAA;AAEnB,qBAAA,CAAA,GAAM,YAAY,QAAQ,CAAC;;AAAtC,yBAAW,GAA2B,KAAA;AAC5C,2BAAa,MAAM,CAAC,EAAE,YAAY;gBAChC,QAAoB;gBACpB;gBACA;gBACA;cACD,CAAA;;;;;;;;IACF;AASD,IAAAC,UAAA,UAAA,aAAA,SACE,WACA,cAAmC;AAEnC,UAAI,OAAO,KAAK,KAAK,WAAW,EAAE,WAAW,GAAG;AAC9C,aAAK,YAAY,iBAAiB,WAAW,KAAK,iBAAiB;MACpE;AAED,UAAI,CAAC,KAAK,YAAY,SAAS,GAAG;AAChC,aAAK,YAAY,SAAS,IAAI,oBAAI,IAAG;MACtC;AAED,WAAK,YAAY,SAAS,EAAE,IAAI,YAAY;;AAU9C,IAAAA,UAAA,UAAA,eAAA,SACE,WACA,cAAoC;AAEpC,UAAI,KAAK,YAAY,SAAS,KAAK,cAAc;AAC/C,aAAK,YAAY,SAAS,EAAE,OAAO,YAAY;MAChD;AACD,UAAI,CAAC,gBAAgB,KAAK,YAAY,SAAS,EAAE,SAAS,GAAG;AAC3D,eAAO,KAAK,YAAY,SAAS;MAClC;AAED,UAAI,OAAO,KAAK,KAAK,WAAW,EAAE,WAAW,GAAG;AAC9C,aAAK,YAAY,oBAAoB,WAAW,KAAK,iBAAiB;MACvE;;AAzHqB,IAAAA,UAAS,YAAe,CAAA;AA2HlD,WAACA;EAAA,EA5HD;;ACdgB,SAAA,iBAAiB,QAAa,QAAW;AAAxB,MAAA,WAAA,QAAA;AAAA,aAAW;EAAA;AAAE,MAAA,WAAA,QAAA;AAAA,aAAW;EAAA;AACvD,MAAI,SAAS;AACb,WAAS,IAAI,GAAG,IAAI,QAAQ,KAAK;AAC/B,cAAU,KAAK,MAAM,KAAK,OAAM,IAAK,EAAE;EACxC;AACD,SAAO,SAAS;AAClB;ACgBA,IAAA;;EAAA,WAAA;AAGE,aAAAC,QAA6B,QAAqB;AAArB,WAAM,SAAN;AAFZ,WAAA,WAAW,oBAAI,IAAG;;AAS3B,IAAAA,QAAoB,UAAA,uBAA5B,SAA6B,SAAuB;AAClD,UAAI,QAAQ,gBAAgB;AAC1B,gBAAQ,eAAe,MAAM,oBAC3B,WACA,QAAQ,SAAS;AAEnB,gBAAQ,eAAe,MAAM,MAAK;MACnC;AACD,WAAK,SAAS,OAAO,OAAO;;AAgBxB,IAAAA,QAAA,UAAA,QAAN,SACE,WACA,MACA,SAA8B;AAA9B,UAAA,YAAA,QAAA;AAAA,kBAA8B;MAAA;;;;;AAExB,2BACJ,OAAO,mBAAmB,cAAc,IAAI,eAAc,IAAK;AACjE,cAAI,CAAC,gBAAgB;AACnB,kBAAM,IAAI;cAAK;;YAAA;UAChB;AAOD,iBAAA,CAAA,GAAO,IAAI,QAAqC,SAAC,SAAS,QAAM;AAC9D,gBAAM,UAAU,iBAAiB,IAAI,EAAE;AACvC,2BAAe,MAAM,MAAK;AAC1B,gBAAM,WAAW,WAAW,WAAA;AAC1B,qBAAO,IAAI;gBAAK;;cAAA,CAAiC;eAChD,OAAO;AACV,sBAAU;cACR;cACA,WAAA,SAAU,OAAY;AACpB,oBAAM,eAAe;AACrB,oBAAI,aAAa,KAAK,YAAY,SAAS;AACzC;gBACD;AACD,wBAAQ,aAAa,KAAK,QAAM;kBAC9B,KAAA;AAEE,iCAAa,QAAQ;AACrB,sCAAkB;sBAAW,WAAA;AAC3B,+BAAO,IAAI;0BAAK;;wBAAA,CAAuB;sBACzC;sBAAC;;oBAAA;AACD;kBACF,KAAA;AAEE,iCAAa,eAAe;AAC5B,4BAAQ,aAAa,KAAK,QAAQ;AAClC;kBACF;AACE,iCAAa,QAAQ;AACrB,iCAAa,eAAe;AAC5B,2BAAO,IAAI;sBAAK;;oBAAA,CAAgC;AAChD;gBACH;;;AAGL,kBAAK,SAAS,IAAI,OAAO;AACzB,2BAAe,MAAM,iBAAiB,WAAW,QAAQ,SAAS;AAClE,kBAAK,OAAO,YACV;cACE;cACA;cACA;YACwB,GAC1B,CAAC,eAAe,KAAK,CAAC;WAEzB,EAAE,QAAQ,WAAA;AACT,gBAAI,SAAS;AACX,oBAAK,qBAAqB,OAAO;YAClC;UACH,CAAC,CAAC;;;IACH;AACH,WAACA;EAAD,EAAC;;SChGe,UAAO;AACrB,SAAO;AACT;SC1BgB,YAAS;AACvB,SACE,OAAO,QAAO,EAAG,mBAAmB,MAAM,eAC1C,OAAO,QAAO,EAAG,eAAe,MAAM;AAE1C;SAEsB,0BAAuB;;;;;;AAC3C,cAAI,EAAC,cAAA,QAAA,cAAS,SAAA,SAAT,UAAW,gBAAe;AAC7B,mBAAA,CAAA,GAAO,IAAI;UACZ;;;;AAEsB,iBAAA,CAAA,GAAM,UAAU,cAAc,KAAK;;AAAlD,yBAAe,GAAmC,KAAA;AACxD,iBAAO,CAAA,GAAA,aAAa,MAAM;;;AAE1B,iBAAA,CAAA,GAAO,IAAI;;;;;;;;;AAEd;SAEe,8BAA2B;;AACzC,WAAOC,MAAA,cAAS,QAAT,cAAS,SAAA,SAAT,UAAW,mBAAa,QAAAA,QAAA,SAAA,SAAAA,IAAE,eAAc;AACjD;SAEgB,wBAAqB;AACnC,SAAO,UAAS,IAAM,OAAoC;AAC5D;ACDO,IAAM,UAAU;AACvB,IAAM,aAAa;AACnB,IAAM,sBAAsB;AAC5B,IAAM,kBAAkB;AAaxB,IAAA;;EAAA,WAAA;AACE,aAAAC,WAA6B,SAAmB;AAAnB,WAAO,UAAP;;AAE7B,IAAAA,WAAA,UAAA,YAAA,WAAA;AAAA,UASC,QAAA;AARC,aAAO,IAAI,QAAW,SAAC,SAAS,QAAM;AACpC,cAAK,QAAQ,iBAAiB,WAAW,WAAA;AACvC,kBAAQ,MAAK,QAAQ,MAAM;QAC7B,CAAC;AACD,cAAK,QAAQ,iBAAiB,SAAS,WAAA;AACrC,iBAAO,MAAK,QAAQ,KAAK;QAC3B,CAAC;MACH,CAAC;;AAEL,WAACA;EAAD,EAAC;;AAED,SAAS,eAAe,IAAiB,aAAoB;AAC3D,SAAO,GACJ,YAAY,CAAC,mBAAmB,GAAG,cAAc,cAAc,UAAU,EACzE,YAAY,mBAAmB;AACpC;SAOgB,kBAAe;AAC7B,MAAM,UAAU,UAAU,eAAe,OAAO;AAChD,SAAO,IAAI,UAAgB,OAAO,EAAE,UAAS;AAC/C;SAEgB,gBAAa;AAA7B,MAkCC,QAAA;AAjCC,MAAM,UAAU,UAAU,KAAK,SAAS,UAAU;AAClD,SAAO,IAAI,QAAQ,SAAC,SAAS,QAAM;AACjC,YAAQ,iBAAiB,SAAS,WAAA;AAChC,aAAO,QAAQ,KAAK;IACtB,CAAC;AAED,YAAQ,iBAAiB,iBAAiB,WAAA;AACxC,UAAM,KAAK,QAAQ;AAEnB,UAAI;AACF,WAAG,kBAAkB,qBAAqB,EAAE,SAAS,gBAAe,CAAE;MACvE,SAAQ,GAAG;AACV,eAAO,CAAC;MACT;IACH,CAAC;AAED,YAAQ,iBAAiB,WAAW,WAAA;AAAA,aAAA,UAAA,OAAA,QAAA,QAAA,WAAA;;;;;AAC5B,mBAAkB,QAAQ;mBAM5B,CAAC,GAAG,iBAAiB,SAAS,mBAAmB;AAAjD,uBAAkD,CAAA,GAAA,CAAA;AAEpD,iBAAG,MAAK;AACR,qBAAM,CAAA,GAAA,gBAAe,CAAE;;AAAvB,iBAAA,KAAA;AACA,cAAAD,MAAA;AAAQ,qBAAM,CAAA,GAAA,cAAa,CAAE;;AAA7B,cAAAA,IAAQ,MAAA,QAAA,CAAA,GAAA,KAAA,CAAqB,CAAA;;;AAE7B,sBAAQ,EAAE;;;;;;;;;MAEb,CAAA;IAAA,CAAA;EACH,CAAC;AACH;SAEsB,WACpB,IACA,KACA,OAAgC;;;;;AAE1B,gBAAU,eAAe,IAAI,IAAI,EAAE,KAAGA,MAAA,CAAA,GAC1CA,IAAC,eAAe,IAAG,KACnBA,IAAA,QAAK;AAEP,aAAO,CAAA,GAAA,IAAI,UAAgB,OAAO,EAAE,UAAS,CAAE;;;AAChD;AAED,SAAe,UACb,IACA,KAAW;;;;;;AAEL,oBAAU,eAAe,IAAI,KAAK,EAAE,IAAI,GAAG;AACpC,iBAAM,CAAA,GAAA,IAAI,UAAgC,OAAO,EAAE,UAAS,CAAE;;AAArE,iBAAOA,IAA8D,KAAA;AAC3E,iBAAA,CAAA,GAAO,SAAS,SAAY,OAAO,KAAK,KAAK;;;;AAC9C;AAEe,SAAA,cAAc,IAAiB,KAAW;AACxD,MAAM,UAAU,eAAe,IAAI,IAAI,EAAE,OAAO,GAAG;AACnD,SAAO,IAAI,UAAgB,OAAO,EAAE,UAAS;AAC/C;AAEO,IAAME,yBAAuB;AAC7B,IAAM,2BAA2B;AAExC,IAAA;;EAAA,WAAA;AAqBE,aAAAC,6BAAA;AAlBA,WAAA,OAA6B;AAEpB,WAAqB,wBAAG;AAEhB,WAAS,YAA8C,CAAA;AACvD,WAAU,aAA4C,CAAA;AAG/D,WAAS,YAAe;AACxB,WAAa,gBAAG;AAEhB,WAAQ,WAAoB;AAC5B,WAAM,SAAkB;AACxB,WAA8B,iCAAG;AACjC,WAAmB,sBAAyB;AAMlD,WAAK,+BACH,KAAK,iCAAgC,EAAG,KACtC,WAAO;MAAA,GACP,WAAA;MAAA,CAAQ;;AAIR,IAAAA,2BAAA,UAAA,UAAN,WAAA;;;;;;AACE,kBAAI,KAAK,IAAI;AACX,uBAAO,CAAA,GAAA,KAAK,EAAE;cACf;AACD,cAAAH,MAAA;AAAU,qBAAM,CAAA,GAAA,cAAa,CAAE;;AAA/B,cAAAA,IAAK,KAAK,GAAA,KAAA;AACV,qBAAO,CAAA,GAAA,KAAK,EAAE;;;;IACf;AAEK,IAAAG,2BAAY,UAAA,eAAlB,SAAsB,IAAmC;;;;;;AACnD,4BAAc;;;;;;AAIH,qBAAA,CAAA,GAAM,KAAK,QAAO,CAAE;;AAAzB,mBAAKH,IAAoB,KAAA;AACxB,qBAAA,CAAA,GAAM,GAAG,EAAE,CAAC;YAAnB,KAAA;AAAA,qBAAA,CAAA,GAAOA,IAAA,KAAA,CAAY;;;AAEnB,kBAAI,gBAAgB,0BAA0B;AAC5C,sBAAM;cACP;AACD,kBAAI,KAAK,IAAI;AACX,qBAAK,GAAG,MAAK;AACb,qBAAK,KAAK;cACX;;;;;;;;;;;;IAIN;AAMa,IAAAG,2BAAA,UAAA,mCAAd,WAAA;;;AACE,iBAAA,CAAA,GAAO,UAAS,IAAK,KAAK,mBAAkB,IAAK,KAAK,iBAAgB,CAAE;;;IACzE;AAKa,IAAAA,2BAAA,UAAA,qBAAd,WAAA;;;;AACE,eAAK,WAAW,SAAS,aAAa,sBAAqB,CAAG;AAE9D,eAAK,SAAS,WAAU,cAEtB,SAAO,SAAiB,MAAuB;AAAA,mBAAA,UAAA,OAAA,QAAA,QAAA,WAAA;;;;kBAChC,KAAA;AAAA,2BAAA,CAAA,GAAM,KAAK,MAAK,CAAE;;AAAzB,2BAAOH,IAAkB,KAAA;AAC/B,2BAAO,CAAA,GAAA;sBACL,cAAc,KAAK,SAAS,KAAK,GAAG;qBACrC;;;YACF,CAAA;UAAA,CAAA;AAGH,eAAK,SAAS,WAAU,QAEtB,SAAO,SAAiB,OAAkB;AAAA,mBAAA,UAAA,OAAA,QAAA,QAAA,WAAA;;AACxC,uBAAA,CAAA,GAAO;kBAAA;;gBAAA,CAAwB;;YAChC,CAAA;UAAA,CAAA;;;;;;;IAEJ;AASa,IAAAG,2BAAA,UAAA,mBAAd,WAAA;;;;;;;AAEE,mBAAA;AAA2B,qBAAM,CAAA,GAAA,wBAAuB,CAAE;;AAA1D,iBAAK,sBAAsB,GAAA,KAAA;AAC3B,kBAAI,CAAC,KAAK,qBAAqB;AAC7B,uBAAO;kBAAA;;gBAAA;cACR;AACD,mBAAK,SAAS,IAAI,OAAO,KAAK,mBAAmB;AAEjC,qBAAM,CAAA,GAAA,KAAK,OAAO;gBAEhC;gBAAA,CAAA;gBAAE;;cAAA,CAEH;;AAJK,wBAAU,GAIf,KAAA;AACD,kBAAI,CAAC,SAAS;AACZ,uBAAO;kBAAA;;gBAAA;cACR;AACD,oBACEH,MAAA,QAAQ,CAAC,OAAC,QAAAA,QAAA,SAAA,SAAAA,IAAE,gBACZ,KAAA,QAAQ,CAAC,OAAC,QAAA,OAAA,SAAA,SAAA,GAAE,MAAM;gBAAgC;;cAAA,IAClD;AACA,qBAAK,iCAAiC;cACvC;;;;;;;;IACF;AAWa,IAAAG,2BAAmB,UAAA,sBAAjC,SAAkC,KAAW;;;;;AAC3C,kBACE,CAAC,KAAK,UACN,CAAC,KAAK,uBACN,4BAA2B,MAAO,KAAK,qBACvC;AACA,uBAAO;kBAAA;;gBAAA;cACR;;;;AAEC,qBAAM,CAAA,GAAA,KAAK,OAAO;gBAEhB;gBAAA,EAAE,IAAG;;gBAEL,KAAK,iCACF,MACA;;cAAA,CACJ;;AAPD,iBAAA,KAAA;;;;;;;;;;;;;IAWH;AAEK,IAAAA,2BAAA,UAAA,eAAN,WAAA;;;;;;;AAEI,kBAAI,CAAC,WAAW;AACd,uBAAA,CAAA,GAAO,KAAK;cACb;AACU,qBAAM,CAAA,GAAA,cAAa,CAAE;;AAA1B,mBAAK,GAAqB,KAAA;AAChC,qBAAM,CAAA,GAAA,WAAW,IAAI,uBAAuB,GAAG,CAAC;;AAAhD,iBAAA,KAAA;AACA,qBAAA,CAAA,GAAM,cAAc,IAAI,qBAAqB,CAAC;;AAA9C,iBAAA,KAAA;AACA,qBAAA,CAAA,GAAO,IAAI;;;;YAEb,KAAA;AAAA,qBAAA,CAAA,GAAO,KAAK;;;;IACb;AAEa,IAAAA,2BAAiB,UAAA,oBAA/B,SAAgC,OAA0B;;;;;AACxD,mBAAK;;;;AAEH,qBAAM,CAAA,GAAA,MAAK,CAAE;;AAAb,cAAAH,IAAA,KAAA;;;AAEA,mBAAK;;;;;;;;;;;;;IAER;AAEK,IAAAG,2BAAA,UAAA,OAAN,SAAW,KAAa,OAAuB;;;;AAC7C,iBAAO,CAAA,GAAA,KAAK,kBAAkB,WAAA;AAAA,mBAAA,UAAA,OAAA,QAAA,QAAA,WAAA;;;kBAC5B,KAAA;AAAA,2BAAA,CAAA,GAAM,KAAK,aAAa,SAAC,IAAe;AAAK,6BAAA,WAAW,IAAI,KAAK,KAAK;oBAAzB,CAA0B,CAAC;;AAAxE,oBAAAH,IAAA,KAAA;AACA,yBAAK,WAAW,GAAG,IAAI;AACvB,2BAAA,CAAA,GAAO,KAAK,oBAAoB,GAAG,CAAC;;;YACrC,CAAA;UAAA,CAAA,CAAC;;;IACH;AAEK,IAAAG,2BAAI,UAAA,OAAV,SAAuC,KAAW;;;;;YACnC,KAAA;AAAA,qBAAA,CAAA,GAAM,KAAK,aAAa,SAAC,IAAe;AACnD,uBAAA,UAAU,IAAI,GAAG;cAAjB,CAAkB,CACnB;;AAFK,oBAAOH,IAAA,KAAA;AAGb,mBAAK,WAAW,GAAG,IAAI;AACvB,qBAAA,CAAA,GAAO,GAAG;;;;IACX;AAEK,IAAAG,2BAAO,UAAA,UAAb,SAAc,KAAW;;;;AACvB,iBAAO,CAAA,GAAA,KAAK,kBAAkB,WAAA;AAAA,mBAAA,UAAA,OAAA,QAAA,QAAA,WAAA;;;kBAC5B,KAAA;AAAA,2BAAA,CAAA,GAAM,KAAK,aAAa,SAAC,IAAoB;AAAA,6BAAA,cAAc,IAAI,GAAG;oBAArB,CAAsB,CAAC;;AAApE,oBAAAH,IAAA,KAAA;AACA,2BAAO,KAAK,WAAW,GAAG;AAC1B,2BAAA,CAAA,GAAO,KAAK,oBAAoB,GAAG,CAAC;;;YACrC,CAAA;UAAA,CAAA,CAAC;;;IACH;AAEa,IAAAG,2BAAA,UAAA,QAAd,WAAA;;;;;YAEiB,KAAA;AAAA,qBAAA,CAAA,GAAM,KAAK,aAAa,SAAC,IAAe;AACrD,oBAAM,gBAAgB,eAAe,IAAI,KAAK,EAAE,OAAM;AACtD,uBAAO,IAAI,UAA6B,aAAa,EAAE,UAAS;cAClE,CAAC,CAAC;;AAHI,uBAAS,GAGb,KAAA;AAEF,kBAAI,CAAC,QAAQ;AACX,uBAAA,CAAA,GAAO,CAAA,CAAE;cACV;AAGD,kBAAI,KAAK,kBAAkB,GAAG;AAC5B,uBAAA,CAAA,GAAO,CAAA,CAAE;cACV;AAEK,qBAAO,CAAA;AACP,6BAAe,oBAAI,IAAG;AAC5B,kBAAI,OAAO,WAAW,GAAG;AACvB,qBAAA,KAAA,GAAwC,WAAM,QAAN,KAAM,SAAA,QAAN,MAAQ;AAArC,kBAAAH,MAAA,SAAA,EAAA,GAAa,MAAGA,IAAA,WAAE,QAAKA,IAAA;AAChC,+BAAa,IAAI,GAAG;AACpB,sBAAI,KAAK,UAAU,KAAK,WAAW,GAAG,CAAC,MAAM,KAAK,UAAU,KAAK,GAAG;AAClE,yBAAK,gBAAgB,KAAK,KAAyB;AACnD,yBAAK,KAAK,GAAG;kBACd;gBACF;cACF;AAED,mBAAA,KAAA,GAAuB,KAAA,OAAO,KAAK,KAAK,UAAU,GAA3B,KAA4B,GAAA,QAA5B,MAA8B;AAA1C,2BAAQ,GAAA,EAAA;AACjB,oBAAI,KAAK,WAAW,QAAQ,KAAK,CAAC,aAAa,IAAI,QAAQ,GAAG;AAE5D,uBAAK,gBAAgB,UAAU,IAAI;AACnC,uBAAK,KAAK,QAAQ;gBACnB;cACF;AACD,qBAAA,CAAA,GAAO,IAAI;;;;IACZ;AAEO,IAAAG,2BAAA,UAAA,kBAAR,SACE,KACA,UAAiC;AAEjC,WAAK,WAAW,GAAG,IAAI;AACvB,UAAM,YAAY,KAAK,UAAU,GAAG;AACpC,UAAI,WAAW;AACb,iBAA4C,KAAA,GAArBH,MAAA,MAAM,KAAK,SAAS,GAApB,KAAqBA,IAAA,QAArB,MAAuB;AAAzC,cAAM,WAAQA,IAAA,EAAA;AACjB,mBAAS,QAAQ;QAClB;MACF;;AAGK,IAAAG,2BAAA,UAAA,eAAR,WAAA;AAAA,UAOC,QAAA;AANC,WAAK,YAAW;AAEhB,WAAK,YAAY,YACf,WAAA;AAAA,eAAA,UAAA,OAAA,QAAA,QAAA,WAAA;AAAA,iBAAA,YAAA,MAAA,SAAAH,KAAA;AAAY,mBAAA,CAAA,GAAA,KAAK,MAAK,CAAE;;;SACxBE,sBAAoB;;AAIhB,IAAAC,2BAAA,UAAA,cAAR,WAAA;AACE,UAAI,KAAK,WAAW;AAClB,sBAAc,KAAK,SAAS;AAC5B,aAAK,YAAY;MAClB;;AAGH,IAAAA,2BAAA,UAAA,eAAA,SAAa,KAAa,UAA8B;AACtD,UAAI,OAAO,KAAK,KAAK,SAAS,EAAE,WAAW,GAAG;AAC5C,aAAK,aAAY;MAClB;AACD,UAAI,CAAC,KAAK,UAAU,GAAG,GAAG;AACxB,aAAK,UAAU,GAAG,IAAI,oBAAI,IAAG;AAE7B,aAAK,KAAK,KAAK,GAAG;MACnB;AACD,WAAK,UAAU,GAAG,EAAE,IAAI,QAAQ;;AAGlC,IAAAA,2BAAA,UAAA,kBAAA,SAAgB,KAAa,UAA8B;AACzD,UAAI,KAAK,UAAU,GAAG,GAAG;AACvB,aAAK,UAAU,GAAG,EAAE,OAAO,QAAQ;AAEnC,YAAI,KAAK,UAAU,GAAG,EAAE,SAAS,GAAG;AAClC,iBAAO,KAAK,UAAU,GAAG;QAC1B;MACF;AAED,UAAI,OAAO,KAAK,KAAK,SAAS,EAAE,WAAW,GAAG;AAC5C,aAAK,YAAW;MACjB;;AA/RI,IAAAA,2BAAI,OAAY;AAiSzB,WAACA;EAAA,EAlSD;;AA0SO,IAAM,4BAAyC;AC1TtD,SAAS,iBAAc;;AACrB,SAAAH,MAAA,CAAA,GACEA;IAAA;;EAAA,IACE,wDACFA;IAAA;;EAAA,IAAgC,IAChCA;IAAA;;EAAA,IACE,8LAGFA;IAAA;;EAAA,IACE,sJAGFA;IAAA;;EAAA,IACE,mKAGFA;IAAA;;EAAA,IACE,gFAEFA;IAAA;;EAAA,IAAmC,mCACnCA;IAAA;;EAAA,IAAkC,kCAClCA;IAAA;;EAAA,IACE,wEACFA;IAAA;;EAAA,IACE,yDACFA;IAAA;;EAAA,IACE,8GAEFA;IAAA;;EAAA,IACE,2LAGFA;IAAA;;EAAA,IACE,gGAEFA;IAAA;;EAAA,IACE,yDACFA;IAAA;;EAAA,IACE,2DACFA;IAAA;;EAAA,IACE,iKAGFA;IAAA;;EAAA,IAAkC,gCAClCA;IAAA;;EAAA,IACE,oFACFA;IAAA;;EAAA,IAAgC,uCAChCA;IAAA;;EAAA,IACE,uIAEFA;IAAA;;EAAA,IACE,sEACFA;IAAA;;EAAA,IACE,uLAGFA;IAAA;;EAAA,IAAoC,uCACpCA;IAAA;;EAAA,IACE,yLAGFA;IAAA;;EAAA,IACE,wDACFA;IAAA;;EAAA,IACE,iOAIFA;IAAA;;EAAA,IACE,yEACFA;IAAA;;EAAA,IACE,6FACFA;IAAA;;EAAA,IAA+B,yCAC/BA;IAAA;;EAAA,IACE,sEACFA;IAAA;;EAAA,IACE,uEACFA;IAAA;;EAAA,IACE,mDACFA;IAAA;;EAAA,IACE,wEACFA;IAAA;;EAAA,IACE,gLAEFA;IAAA;;EAAA,IACE,kFACFA;IAAA;;EAAA,IACE,wGAEFA;IAAA;;EAAA,IACE,2FAEFA;IAAA;;EAAA,IACE,gJAEFA;IAAA;;EAAA,IACE,4GAEFA;IAAA;;EAAA,IACE,iEACFA;IAAA;;EAAA,IACE,qFACFA;IAAA;;EAAA,IACE,iPAIFA;IAAA;;EAAA,IACE,yCACFA;IAAA;;EAAA,IACE,6GAEFA;IAAA;;EAAA,IACE,8KAEFA;IAAA;;EAAA,IACE,4EACFA;IAAA;;EAAA,IACE,6CACFA;IAAA;;EAAA,IACE,6DACFA;IAAA;;EAAA,IACE,4FACFA;IAAA;;EAAA,IACE,+HAEFA;IAAA;;EAAA,IACE,iIAEFA;IAAA;;EAAA,IACE,8EACFA;IAAA;;EAAA,IACE,mDACFA;IAAA;;EAAA,IAAsC,uCACtCA;IAAA;;EAAA,IACE,qEACFA;IAAA;;EAAA,IACE,qKAGFA;IAAA;;EAAA,IAAkC,yCAClCA;IAAA;;EAAA,IACE,4CACFA;IAAA;;EAAA,IACE,oEACFA;IAAA;;EAAA,IACE,yEACFA;IAAA;;EAAA,IACE,wEACFA;IAAA;;EAAA,IACE,kDACFA;IAAA;;EAAA,IACE,4EACFA;IAAA;;EAAA,IACE,0EACFA;IAAA;;EAAA,IACE,yJAGFA;IAAA;;EAAA,IACE,mGACFA;IAAA;;EAAA,IAA+B,uCAC/BA;IAAA;;EAAA,IACE,8DACFA;IAAA;;EAAA,IACE,2GAEFA;IAAA;;EAAA,IACE,0JAGFA;IAAA;;EAAA,IACE,mLAGFA;IAAA;;EAAA,IACE,6FACFA;IAAA;;EAAA,IACE,0EACFA;IAAA;;EAAA,IACE,mEACFA;IAAA;;EAAA,IACE,6DACFA;IAAA;;EAAA,IACE,4EACFA;IAAA;;EAAA,IACE,oDACFA;IAAA;;EAAA,IACE,8DACFA;IAAA;;EAAA,IACE,0DACFA;IAAA;;EAAA,IACE,6EACFA;IAAA;;EAAA,IACE,uEACFA;IAAA;;EAAA,IAAyB,gCACzBA;IAAA;;EAAA,IACE,0EACFA;IAAA;;EAAA,IACE,2FAEFA;IAAA;;EAAA,IACE,4GAEFA;IAAA;;EAAA,IACE,uHACFA;IAAA;;EAAA,IACE,4EACFA;IAAA;;EAAA,IACE,8DACFA;IAAA;;EAAA,IACE,4CACFA;IAAA;;EAAA,IACE,yEACFA;IAAA;;EAAA,IACE,6FAEFA;IAAA;;EAAA,IACE,2DACFA;IAAA;;EAAA,IACE,gFACFA;IAAA;;EAAA,IAAiC,IACjCA;IAAA;;EAAA,IACE,mDACFA;IAAA;;EAAA,IACE,gFACFA;IAAA;;EAAA,IACE,qOAIFA;IAAA;;EAAA,IACE,uEACFA;IAAA;;EAAA,IACE,uEACFA;IAAA;;EAAA,IACE,wEACFA;IAAA;;EAAA,IACE,qEACFA;IAAA;;EAAA,IACE,6EACFA;IAAA;;EAAA,IACE,yEACFA;IAAA;;EAAA,IAAkC,+BAClCA;IAAA;;EAAA,IACE,yEACFA;IAAA;;EAAA,IACE,kIACFA;IAAA;;EAAA,IACE,gDACFA;AACJ;AAMA,SAAS,gBAAa;;AAIpB,SAAOA,MAAA,CAAA,GACLA;IAAA;;EAAA,IACE;AAIN;AASO,IAAM,gBAA8B;AASpC,IAAM,eAA6B;AAuDnC,IAAM,8BAA8B,IAAI,aAG7C,QAAQ,YAAY,cAAa,CAAE;AAaxB,IAAA,6CAA6C;EACxD,sBAAsB;EACtB,gBAAgB;EAChB,oBAAoB;EACpB,mBAAmB;EACnB,sBAAsB;EACtB,cAAc;EACd,mBAAmB;EACnB,kBAAkB;EAClB,2BAA2B;EAC3B,qBAAqB;EACrB,gCAAgC;EAChC,gCAAgC;EAChC,4BAA4B;EAC5B,iCAAiC;EACjC,cAAc;EACd,wBAAwB;EACxB,kBAAkB;EAClB,uBAAuB;EACvB,gBAAgB;EAChB,iBAAiB;EACjB,wBAAwB;EACxB,gBAAgB;EAChB,cAAc;EACd,oBAAoB;EACpB,mBAAmB;EACnB,cAAc;EACd,sBAAsB;EACtB,+BAA+B;EAC/B,sBAAsB;EACtB,6BAA6B;EAC7B,eAAe;EACf,yBAAyB;EACzB,sBAAsB;EACtB,2BAA2B;EAC3B,yBAAyB;EACzB,qBAAqB;EACrB,yBAAyB;EACzB,wBAAwB;EACxB,kBAAkB;EAClB,gBAAgB;EAChB,kBAAkB;EAClB,qBAAqB;EACrB,sBAAsB;EACtB,qBAAqB;EACrB,yBAAyB;EACzB,gBAAgB;EAChB,sBAAsB;EACtB,mBAAmB;EACnB,oBAAoB;EACpB,cAAc;EACd,8BAA8B;EAC9B,wBAAwB;EACxB,qBAAqB;EACrB,cAAc;EACd,sBAAsB;EACtB,sBAAsB;EACtB,uBAAuB;EACvB,0BAA0B;EAC1B,kBAAkB;EAClB,qBAAqB;EACrB,sBAAsB;EACtB,sBAAsB;EACtB,kBAAkB;EAClB,mBAAmB;EACnB,wBAAwB;EACxB,WAAW;EACX,eAAe;EACf,kBAAkB;EAClB,uBAAuB;EACvB,yBAAyB;EACzB,eAAe;EACf,sBAAsB;EACtB,yBAAyB;EACzB,gBAAgB;EAChB,4BAA4B;EAC5B,4BAA4B;EAC5B,qBAAqB;EACrB,gCAAgC;EAChC,8BAA8B;EAC9B,oBAAoB;EACpB,SAAS;EACT,eAAe;EACf,6BAA6B;EAC7B,qBAAqB;EACrB,0BAA0B;EAC1B,yBAAyB;EACzB,8BAA8B;EAC9B,kBAAkB;EAClB,gBAAgB;EAChB,cAAc;EACd,eAAe;EACf,eAAe;EACf,iBAAiB;EACjB,eAAe;EACf,yBAAyB;EACzB,qBAAqB;EACrB,uBAAuB;EACvB,yBAAyB;EACzB,yBAAyB;EACzB,0BAA0B;EAC1B,qBAAqB;EACrB,2BAA2B;EAC3B,2BAA2B;EAC3B,kBAAkB;;AClkBpB,IAAM,YAAY,IAAI,OAAO,gBAAgB;AAiBvC,SAAU,SAAS,KAAW;AAAE,MAAiB,OAAA,CAAA;WAAA,KAAA,GAAjB,KAAiB,UAAA,QAAjB,MAAiB;AAAjB,SAAiB,KAAA,CAAA,IAAA,UAAA,EAAA;;AACrD,MAAI,UAAU,YAAY,SAAS,MAAM;AACvC,cAAU,KAAV,MAAA,WAAe,cAAA,CAAA,SAAA,OAAS,aAAW,KAAA,EAAA,OAAM,GAAG,CAAE,GAAK,MAAM,KAAA,CAAA;EAC1D;AACH;AAEM,SAAU,UAAU,KAAW;AAAE,MAAiB,OAAA,CAAA;WAAA,KAAA,GAAjB,KAAiB,UAAA,QAAjB,MAAiB;AAAjB,SAAiB,KAAA,CAAA,IAAA,UAAA,EAAA;;AACtD,MAAI,UAAU,YAAY,SAAS,OAAO;AACxC,cAAU,MAAV,MAAA,WAAgB,cAAA,CAAA,SAAA,OAAS,aAAW,KAAA,EAAA,OAAM,GAAG,CAAE,GAAK,MAAM,KAAA,CAAA;EAC3D;AACH;ACWM,SAAU,MACd,YAAoB;AACpB,MAAkB,OAAA,CAAA;WAAA,KAAA,GAAlB,KAAkB,UAAA,QAAlB,MAAkB;AAAlB,SAAkB,KAAA,CAAA,IAAA,UAAA,EAAA;;AAElB,QAAM,oBAAmB,MAAA,QAAA,cAAA,CAAC,UAAU,GAAK,MAAM,KAAA,CAAA;AACjD;AAaM,SAAU,aACd,YAAoB;AACpB,MAAkB,OAAA,CAAA;WAAA,KAAA,GAAlB,KAAkB,UAAA,QAAlB,MAAkB;AAAlB,SAAkB,KAAA,CAAA,IAAA,UAAA,EAAA;;AAElB,SAAO,oBAAmB,MAAA,QAAA,cAAA,CAAC,UAAU,GAAK,MAAM,KAAA,CAAA;AAClD;SAEgB,wBACd,MACA,MACA,SAAe;;AAEf,MAAM,WAAQ,SAAA,SAAA,CAAA,GACR,aAAkC,CAAE,IAAAA,MAAA,CAAA,GAAAA,IACvC,IAAI,IAAG,SAAOA,IAAA;AAEjB,MAAM,UAAU,IAAI,aAClB,QACA,YACA,QAAQ;AAEV,SAAO,QAAQ,OAAO,MAAM;IAC1B,SAAS,KAAK;EACf,CAAA;AACH;SAEgB,kBACd,MACA,QACA,UAAiB;AAEjB,MAAM,sBAAsB;AAC5B,MAAI,EAAE,kBAAkB,sBAAsB;AAC5C,QAAI,oBAAoB,SAAS,OAAO,YAAY,MAAM;AACxD;QAAM;QAAI;;MAAA;IACX;AAED,UAAM,wBACJ,MAEA,kBAAA,WAAA,OAAW,OAAO,YAAY,MAAwC,oCAAA,IACpE,qDAAqD;EAE1D;AACH;AAEA,SAAS,oBACP,YAAoB;;AACpB,MAAkB,OAAA,CAAA;WAAA,KAAA,GAAlB,KAAkB,UAAA,QAAlB,MAAkB;AAAlB,SAAkB,KAAA,CAAA,IAAA,UAAA,EAAA;;AAElB,MAAI,OAAO,eAAe,UAAU;AAClC,QAAM,OAAO,KAAK,CAAC;AACnB,QAAM,aAAa,cAAA,CAAA,GAAI,KAAK,MAAM,CAAC,GAAC,IAAA;AACpC,QAAI,WAAW,CAAC,GAAG;AACjB,iBAAW,CAAC,EAAE,UAAU,WAAW;IACpC;AAED,YAAOA,MAAC,WAA4B,eAAc,OAChD,MAAAA,KAAA,cAAA,CAAA,IAAI,GACD,YACH,KAAA,CAAA;EACH;AAED,SAAO,4BAA4B,OAAM,MAAlC,6BACL,cAAA,CAAA,UAAU,GACN,MACJ,KAAA,CAAA;AACJ;AAegB,SAAA,QACd,WACA,YAAoB;AACpB,MAAkB,OAAA,CAAA;WAAA,KAAA,GAAlB,KAAkB,UAAA,QAAlB,MAAkB;AAAlB,SAAkB,KAAA,CAAA,IAAA,UAAA,EAAA;;AAElB,MAAI,CAAC,WAAW;AACd,UAAM,oBAAmB,MAAA,QAAA,cAAA,CAAC,UAAU,GAAK,MAAM,KAAA,CAAA;EAChD;AACH;AA4FM,SAAU,UAAU,SAAe;AAGvC,MAAM,UAAU,gCAAgC;AAChD,YAAU,OAAO;AAKjB,QAAM,IAAI,MAAM,OAAO;AACzB;AASgB,SAAA,YACd,WACA,SAAe;AAEf,MAAI,CAAC,WAAW;AACd,cAAU,OAAO;EAClB;AACH;SC7QgB,iBAAc;;AAC5B,SAAQ,OAAO,SAAS,iBAAeA,MAAA,KAAK,cAAQ,QAAAA,QAAA,SAAA,SAAAA,IAAE,SAAS;AACjE;SAEgB,iBAAc;AAC5B,SAAO,kBAAiB,MAAO,WAAW,kBAAiB,MAAO;AACpE;SAEgB,oBAAiB;;AAC/B,SAAQ,OAAO,SAAS,iBAAeA,MAAA,KAAK,cAAQ,QAAAA,QAAA,SAAA,SAAAA,IAAE,aAAa;AACrE;SCJgB,YAAS;AACvB,MACE,OAAO,cAAc,eACrB,aACA,YAAY,aACZ,OAAO,UAAU,WAAW;;;;;GAM3B,eAAc,KAAM,mBAAkB,KAAM,gBAAgB,YAC7D;AACA,WAAO,UAAU;EAClB;AAED,SAAO;AACT;SAEgB,mBAAgB;AAC9B,MAAI,OAAO,cAAc,aAAa;AACpC,WAAO;EACR;AACD,MAAM,oBAAuC;AAC7C;;IAEG,kBAAkB,aAAa,kBAAkB,UAAU,CAAC;;IAG7D,kBAAkB;IAElB;;AAEJ;AC1BA,IAAA;;EAAA,WAAA;AAIE,aACmBI,OAAA,YACA,WAAiB;AADjB,WAAU,aAAV;AACA,WAAS,YAAT;AAGjB,kBACE,YAAY,YACZ,6CAA6C;AAE/C,WAAK,WAAW,gBAAe,KAAM,cAAa;;AAGpD,IAAAA,OAAA,UAAA,MAAA,WAAA;AACE,UAAI,CAAC,UAAS,GAAI;AAEhB,eAAO,KAAK,IAAG,KAAmB,KAAK,UAAU;MAClD;AAKD,aAAO,KAAK,WAAW,KAAK,YAAY,KAAK;;AAEjD,WAACA;EAAD,EAAC;;ACrCe,SAAA,aAAa,QAAwB,MAAa;AAChE,cAAY,OAAO,UAAU,oCAAoC;AACzD,MAAA,MAAQ,OAAO,SAAQ;AAE/B,MAAI,CAAC,MAAM;AACT,WAAO;EACR;AAED,SAAO,GAAA,OAAG,GAAG,EAAG,OAAA,KAAK,WAAW,GAAG,IAAI,KAAK,MAAM,CAAC,IAAI,IAAI;AAC7D;ACVA,IAAA;;EAAA,WAAA;AAAA,aAAAC,iBAAA;;AAKS,IAAAA,eAAA,aAAP,SACE,WACA,aACA,cAA8B;AAE9B,WAAK,YAAY;AACjB,UAAI,aAAa;AACf,aAAK,cAAc;MACpB;AACD,UAAI,cAAc;AAChB,aAAK,eAAe;MACrB;;AAGI,IAAAA,eAAA,QAAP,WAAA;AACE,UAAI,KAAK,WAAW;AAClB,eAAO,KAAK;MACb;AACD,UAAI,OAAO,SAAS,eAAe,WAAW,MAAM;AAClD,eAAO,KAAK;MACb;AACD,UAAI,OAAO,eAAe,eAAe,WAAW,OAAO;AACzD,eAAO,WAAW;MACnB;AACD,UAAI,OAAO,UAAU,aAAa;AAChC,eAAO;MACR;AACD,gBACE,iHAAiH;;AAI9G,IAAAA,eAAA,UAAP,WAAA;AACE,UAAI,KAAK,aAAa;AACpB,eAAO,KAAK;MACb;AACD,UAAI,OAAO,SAAS,eAAe,aAAa,MAAM;AACpD,eAAO,KAAK;MACb;AACD,UAAI,OAAO,eAAe,eAAe,WAAW,SAAS;AAC3D,eAAO,WAAW;MACnB;AACD,UAAI,OAAO,YAAY,aAAa;AAClC,eAAO;MACR;AACD,gBACE,mHAAmH;;AAIhH,IAAAA,eAAA,WAAP,WAAA;AACE,UAAI,KAAK,cAAc;AACrB,eAAO,KAAK;MACb;AACD,UAAI,OAAO,SAAS,eAAe,cAAc,MAAM;AACrD,eAAO,KAAK;MACb;AACD,UAAI,OAAO,eAAe,eAAe,WAAW,UAAU;AAC5D,eAAO,WAAW;MACnB;AACD,UAAI,OAAO,aAAa,aAAa;AACnC,eAAO;MACR;AACD,gBACE,oHAAoH;;AAG1H,WAACA;EAAD,EAAC;;;ACyCM,IAAM,oBAAgBL,OAAA,CAAA;AAE3BA;EAAoE;;AAAA,IAAA;AAEpEA;EAAgE;;AAAA,IAAA;AAGhEA;EAA6D;;AAAA,IAAA;AAE7DA;EAAgE;;AAAA,IAAA;AAGhEA;EAA8D;;AAAA,IAAA;AAE9DA;EAA8D;;AAAA,IAAA;;AAG9DA;EAAyE;;AAAA,IAAA;AAGzEA;EAAsD;;AAAA,IAAA,wBACtDA;EAA0E;;AAAA,IAAA;AAG1EA;EAAoE;;AAAA,IAAA,sBACpEA;EAAqE;;AAAA,IAAA,sBACrEA;EACyC;;AAAA,IAAA;AAGzCA;EAA4D;;AAAA,IAAA;AAG5DA;EAAyD;;AAAA,IAAA,kBACzDA;EAC2C;;AAAA,IAAA,qBAE3CA;EAA8D;;AAAA,IAAA,uBAC9DA;EAA8D;;AAAA,IAAA;AAE9DA;EAA4D;;AAAA,IAAA;AAG5DA;EAC8C;;AAAA,IAAA,yBAC9CA;EAA0D;;AAAA,IAAA,sBAC1DA;EAAwD;;AAAA,IAAA,sBACxDA;EAAyD;;AAAA,IAAA;AAGzDA;EAC2C;;AAAA,IAAA,qBAC3CA;EACmD;;AAAA,IAAA;AAGnDA;EAAsD;;AAAA,IAAA,6BACtDA;EAAsE;;AAAA,IAAA,2BACtEA;EAAuE;;AAAA,IAAA,sBACvEA;EAAsE;;AAAA,IAAA,2BACtEA;EAAyD;;AAAA,IAAA;;;AAKzDA;EAC4C;;AAAA,IAAA,4BAC5CA;EAAoE;;AAAA,IAAA;AAGpEA;EAA4E;;AAAA,IAAA;AAG5EA;EAAsE;;AAAA,IAAA;AAGtEA;EACmC;;AAAA,IAAA,gCACnCA;EAAwE;;AAAA,IAAA,+BACxEA;EAAuE;;AAAA,IAAA,6BACvEA;EACmC;;AAAA,IAAA,gCACnCA;EAC8C;;AAAA,IAAA,gCAC9CA;EAC4C;;AAAA,IAAA;AAG5CA;EAA4E;;AAAA,IAAA;AAG5EA;EAAwE;;AAAA,IAAA,yBACxEA;EAA4E;;AAAA,IAAA,2BAC5EA;EAA4E;;AAAA,IAAA,2BAC5EA;EACwC;;AAAA,IAAA,4BACxCA;EAAoE;;AAAA,IAAA,uBACpEA;EACyC;;AAAA,IAAA,6BACzCA;EACyC;;AAAA,IAAA,6BACzCA;EAA8D;;AAAA,IAAA;AClIzD,IAAM,yBAAyB,IAAI,MAAM,KAAQ,GAAM;AAE9C,SAAA,mBACd,MACA,SAAU;AAEV,MAAI,KAAK,YAAY,CAAC,QAAQ,UAAU;AACtC,WAAA,SAAA,SAAA,CAAA,GACK,OAAO,GACV,EAAA,UAAU,KAAK,SAAQ,CACvB;EACH;AACD,SAAO;AACT;AAEM,SAAgB,mBACpB,MACA,QACA,MACA,SACA,gBAAyD;AAAzD,MAAA,mBAAA,QAAA;AAAA,qBAAyD,CAAA;EAAA;;;;AAEzD,aAAA,CAAA,GAAO,+BAA+B,MAAM,gBAAgB,WAAA;AAAA,eAAA,UAAA,OAAA,QAAA,QAAA,WAAA;;;;;AACtD,uBAAO,CAAA;AACP,yBAAS,CAAA;AACb,oBAAI,SAAS;AACX,sBAAI,WAAM,OAAqB;AAC7B,6BAAS;kBACV,OAAM;AACL,2BAAO;sBACL,MAAM,KAAK,UAAU,OAAO;;kBAE/B;gBACF;AAEK,wBAAQ,YAAW,SAAA,EACvB,KAAK,KAAK,OAAO,OAAM,GACpB,MAAM,CACT,EAAC,MAAM,CAAC;AAEM,uBAAA,CAAA,GAAO,KAAsB,sBAAqB,CAAE;;AAA9D,0BAAUA,IAAoD,KAAA;AACpE;kBAAO;;gBAAA,IAA4B;AAEnC,oBAAI,KAAK,cAAc;AACrB;oBAAqC;;kBAAA,IAAG,KAAK;gBAC9C;AAED,uBAAA,CAAA,GAAO,cAAc,MAAK,EACxB,gBAAgB,MAAM,KAAK,OAAO,SAAS,MAAM,KAAK,GAAC,SAAA,EAErD,QACA,SACA,gBAAgB,cAAa,GAC1B,IAAI,CAAA,CAEV;;;QACF,CAAA;MAAA,CAAA,CAAC;;;AACH;SAEqB,+BACpB,MACA,gBACA,SAAgC;;;;;;AAE/B,eAAsB,mBAAmB;AACpC,qBAAgB,SAAA,SAAA,CAAA,GAAA,gBAAgB,GAAK,cAAc;;;;AAEjD,2BAAiB,IAAI,eAAyB,IAAI;AAC7B,iBAAM,CAAA,GAAA,QAAQ,KAAwB;YAC/D,QAAO;YACP,eAAe;UAChB,CAAA,CAAC;;AAHI,qBAAqB,GAGzB,KAAA;AAIF,yBAAe,oBAAmB;AAErB,iBAAA,CAAA,GAAM,SAAS,KAAI,CAAE;;AAA5B,iBAAO,GAAqB,KAAA;AAClC,cAAI,sBAAsB,MAAM;AAC9B,kBAAM,iBAAiB,MAAuC,4CAAA,IAAI;UACnE;AAED,cAAI,SAAS,MAAM,EAAE,kBAAkB,OAAO;AAC5C,mBAAA,CAAA,GAAO,IAAI;UACZ,OAAM;AACC,2BAAe,SAAS,KAAK,KAAK,eAAe,KAAK,MAAM;AAC5D,YAAAA,MAAwC,aAAa,MAAM,KAAK,GAA/D,kBAAeA,IAAA,CAAA,GAAE,qBAAkBA,IAAA,CAAA;AAC1C,gBAAI,oBAAe,oCAAmD;AACpE,oBAAM,iBACJ,MAEA,6BAAA,IAAI;YAEP,WAAU,oBAAe,gBAA+B;AACvD,oBAAM,iBAAiB,MAAkC,wBAAA,IAAI;YAC9D,WAAU,oBAAe,iBAAgC;AACxD,oBAAM,iBAAiB,MAAmC,iBAAA,IAAI;YAC/D;AACK,wBACJ,SAAS,eAA8B,KACtC,gBACE,YAAW,EACX,QAAQ,WAAW,GAAG;AAC3B,gBAAI,oBAAoB;AACtB,oBAAM,wBAAwB,MAAM,WAAW,kBAAkB;YAClE,OAAM;AACL,oBAAM,MAAM,SAAS;YACtB;UACF;;;;AAED,cAAI,eAAa,eAAe;AAC9B,kBAAM;UACP;AAID,gBAAM,MAA4C,0BAAA,EAAE,WAAW,OAAO,GAAC,EAAC,CAAE;;;;;;;;;;AAE7E;AAEK,SAAgB,sBACpB,MACA,QACA,MACA,SACA,gBAAyD;AAAzD,MAAA,mBAAA,QAAA;AAAA,qBAAyD,CAAA;EAAA;;;;;QAEjC,KAAA;AAAA,iBAAA,CAAA,GAAM,mBAC5B,MACA,QACA,MACA,SACA,cAAc,CACf;;AANK,2BAAkBA,IAAA,KAAA;AAOxB,cAAI,0BAA0B,gBAAgB;AAC5C,kBAAM,MAAkC,8BAAA;cACtC,iBAAiB;YAClB,CAAA;UACF;AAED,iBAAA,CAAA,GAAO,cAAc;;;;AACtB;AAEK,SAAU,gBACd,MACA,MACA,MACA,OAAa;AAEb,MAAM,OAAO,GAAG,OAAA,IAAI,EAAA,OAAG,MAAI,GAAA,EAAA,OAAI,KAAK;AAEpC,MAAI,CAAE,KAAsB,OAAO,UAAU;AAC3C,WAAO,GAAA,OAAG,KAAK,OAAO,WAAS,KAAA,EAAA,OAAM,IAAI;EAC1C;AAED,SAAO,aAAa,KAAK,QAA0B,IAAI;AACzD;AAEM,SAAU,uBACd,qBAA2B;AAE3B,UAAQ,qBAAmB;IACzB,KAAK;AACH,aAAgC;IAClC,KAAK;AACH,aAA8B;IAChC,KAAK;AACH,aAA4B;IAC9B;AACE,aAAsD;EACzD;AACH;AAEA,IAAA;;EAAA,WAAA;AAiBE,aAAAM,gBAA6B,MAAU;AAAvC,UAA2C,QAAA;AAAd,WAAI,OAAJ;AAbrB,WAAK,QAAe;AACnB,WAAA,UAAU,IAAI,QAAW,SAAC,GAAG,QAAM;AAC1C,cAAK,QAAQ,WAAW,WAAA;AACtB,iBAAO,OACL;YAAa,MAAK;YAA2C;;UAAA,CAAA;QAEjE,GAAG,uBAAuB,IAAG,CAAE;MACjC,CAAC;;AAED,IAAAA,gBAAA,UAAA,sBAAA,WAAA;AACE,mBAAa,KAAK,KAAK;;AAI3B,WAACA;EAAD,EAAC;;SAOe,iBACd,MACA,MACA,UAA2B;AAE3B,MAAM,cAAgC;IACpC,SAAS,KAAK;;AAGhB,MAAI,SAAS,OAAO;AAClB,gBAAY,QAAQ,SAAS;EAC9B;AACD,MAAI,SAAS,aAAa;AACxB,gBAAY,cAAc,SAAS;EACpC;AAED,MAAM,QAAQ,aAAa,MAAM,MAAM,WAAW;AAGjD,QAAM,WAAwC,iBAAiB;AAChE,SAAO;AACT;ACrQM,SAAU,aACd,YAA8C;AAE9C,SACE,eAAe,UACd,WAAkC,eAAe;AAEtD;AASA,IAAA;;EAAA,WAAA;AAWE,aAAAC,iBAAY,UAAoC;AAPhD,WAAO,UAAW;AAKlB,WAAyB,4BAAwC,CAAA;AAG/D,UAAI,SAAS,iBAAiB,QAAW;AACvC,cAAM,IAAI,MAAM,wBAAwB;MACzC;AAED,WAAK,UAAU,SAAS,aAAa,MAAM,GAAG,EAAE,CAAC;AACjD,WAAK,4BAA4B,SAAS;;AAS5C,IAAAA,iBAA2B,UAAA,8BAA3B,SAA4B,aAAmB;AAC7C,UACE,CAAC,KAAK,6BACN,KAAK,0BAA0B,WAAW,GAC1C;AACA,eAAO;MACR;AAED,eAAwC,KAAA,GAAAC,MAAA,KAAK,2BAAL,KAAAA,IAAA,QAAA,MAAgC;AAAnE,YAAM,4BAAyBA,IAAA,EAAA;AAClC,YACE,0BAA0B,YAC1B,0BAA0B,aAAa,aACvC;AACA,iBAAO,uBACL,0BAA0B,gBAAgB;QAE7C;MACF;AACD,aAAO;;AAST,IAAAD,iBAAiB,UAAA,oBAAjB,SAAkB,aAAmB;AACnC,aACE,KAAK,4BAA4B,WAAW,MAClB,aAC1B,KAAK,4BAA4B,WAAW,MAAC;;AAGnD,WAACA;EAAD,EAAC;;AC7EqB,SAAA,mBACpB,MACA,SAAkC;;;AAElC,aAAO,CAAA,GAAA,mBAIL,MAGA,OAAA,uBAAA,mBAAmB,MAAM,OAAO,CAAC,CAClC;;;AACF;AChDqB,SAAA,cACpB,MACA,SAA6B;;;AAE7B,aAAA,CAAA,GAAO,mBACL,MAGA,QAAA,uBAAA,OAAO,CACR;;;AACF;AAoBqB,SAAA,qBACpB,MACA,SAAoC;;;AAEpC,aAAA,CAAA,GAAO,mBAGL,MAAkD,QAAA,uBAAA,OAAO,CAAC;;;AAC7D;AAyBqB,SAAA,eACpB,MACA,SAA8B;;;AAE9B,aAAA,CAAA,GAAO,mBACL,MAGA,QAAA,uBAAA,OAAO,CACR;;;AACF;ACjFK,SAAU,yBACd,cAA8B;AAE9B,MAAI,CAAC,cAAc;AACjB,WAAO;EACR;AACD,MAAI;AAEF,QAAM,OAAO,IAAI,KAAK,OAAO,YAAY,CAAC;AAE1C,QAAI,CAAC,MAAM,KAAK,QAAO,CAAE,GAAG;AAE1B,aAAO,KAAK,YAAW;IACxB;EACF,SAAQ,GAAG;EAEX;AACD,SAAO;AACT;ACGgB,SAAA,WAAW,MAAY,cAAoB;AAApB,MAAA,iBAAA,QAAA;AAAA,mBAAoB;EAAA;AACzD,SAAO,mBAAmB,IAAI,EAAE,WAAW,YAAY;AACzD;AAcsB,SAAA,iBACpB,MACA,cAAoB;AAApB,MAAA,iBAAA,QAAA;AAAA,mBAAoB;EAAA;;;;;;AAEd,yBAAe,mBAAmB,IAAI;AAC9B,iBAAA,CAAA,GAAM,aAAa,WAAW,YAAY,CAAC;;AAAnD,kBAAQE,IAA2C,KAAA;AACnD,mBAAS,YAAY,KAAK;AAEhC;YACE,UAAU,OAAO,OAAO,OAAO,aAAa,OAAO;YACnD,aAAa;YAAI;;UAAA;AAGb,qBACJ,OAAO,OAAO,aAAa,WAAW,OAAO,WAAW;AAEpD,2BAAqC,aAAA,QAAA,aAAQ,SAAA,SAAR,SAAW,kBAAkB;AAExE,iBAAO,CAAA,GAAA;YACL;YACA;YACA,UAAU,yBACR,4BAA4B,OAAO,SAAS,CAAC;YAE/C,cAAc,yBACZ,4BAA4B,OAAO,GAAG,CAAC;YAEzC,gBAAgB,yBACd,4BAA4B,OAAO,GAAG,CAAC;YAEzC,gBAAgB,kBAAkB;YAClC,qBAAoB,aAAA,QAAA,aAAA,SAAA,SAAA,SAAW,uBAAuB,MAAK;WAC5D;;;;AACF;AAED,SAAS,4BAA4B,SAAe;AAClD,SAAO,OAAO,OAAO,IAAI;AAC3B;AAEM,SAAU,YAAY,OAAa;AACjC,MAAAA,MAAkC,MAAM,MAAM,GAAG,GAAhD,YAASA,IAAA,CAAA,GAAE,UAAOA,IAAA,CAAA,GAAE,YAASA,IAAA,CAAA;AACpC,MACE,cAAc,UACd,YAAY,UACZ,cAAc,QACd;AACA,cAAU,gDAAgD;AAC1D,WAAO;EACR;AAED,MAAI;AACF,QAAM,UAAU,aAAa,OAAO;AACpC,QAAI,CAAC,SAAS;AACZ,gBAAU,qCAAqC;AAC/C,aAAO;IACR;AACD,WAAO,KAAK,MAAM,OAAO;EAC1B,SAAQ,GAAG;AACV,cACE,4CACC,MAAA,QAAA,MAAA,SAAA,SAAA,EAAa,SAAQ,CAAE;AAE1B,WAAO;EACR;AACH;AAKM,SAAU,gBAAgB,OAAa;AAC3C,MAAM,cAAc,YAAY,KAAK;AACrC;IAAQ;IAAW;;EAAA;AACnB;IAAQ,OAAO,YAAY,QAAQ;IAAW;;EAAA;AAC9C;IAAQ,OAAO,YAAY,QAAQ;IAAW;;EAAA;AAC9C,SAAO,OAAO,YAAY,GAAG,IAAI,OAAO,YAAY,GAAG;AACzD;SC3GsB,qBACpB,MACA,SACA,iBAAuB;AAAvB,MAAA,oBAAA,QAAA;AAAA,sBAAuB;EAAA;;;;;;AAEvB,cAAI,iBAAiB;AACnB,mBAAA,CAAA,GAAO,OAAO;UACf;;;;AAEQ,iBAAA,CAAA,GAAM,OAAO;QAApB,KAAA;AAAA,iBAAA,CAAA,GAAOA,IAAA,KAAA,CAAa;;;gBAEhB,eAAa,iBAAiB,kBAAkB,GAAC;AAAjD,mBAAkD,CAAA,GAAA,CAAA;gBAChD,KAAK,KAAK,gBAAgB;AAA1B,mBAA8B,CAAA,GAAA,CAAA;AAChC,iBAAA,CAAA,GAAM,KAAK,KAAK,QAAO,CAAE;;AAAzB,UAAAA,IAAA,KAAA;;QAIJ,KAAA;AAAA,gBAAM;;;;;;;;;AAET;AAED,SAAS,kBAAkBA,KAAuB;AAArB,MAAA,OAAIA,IAAA;AAC/B,SACE,SAAS,QAAqC;IAAA;;EAAA,KAC9C,SAAS,QAAqC;IAAA;;EAAA;AAElD;ACpBA,IAAA;;EAAA,WAAA;AAUE,aAAAC,kBAA6B,MAAkB;AAAlB,WAAI,OAAJ;AATrB,WAAS,YAAG;AAMZ,WAAO,UAAe;AACtB,WAAA,eAA0C;;AAIlD,IAAAA,kBAAA,UAAA,SAAA,WAAA;AACE,UAAI,KAAK,WAAW;AAClB;MACD;AAED,WAAK,YAAY;AACjB,WAAK,SAAQ;;AAGf,IAAAA,kBAAA,UAAA,QAAA,WAAA;AACE,UAAI,CAAC,KAAK,WAAW;AACnB;MACD;AAED,WAAK,YAAY;AACjB,UAAI,KAAK,YAAY,MAAM;AACzB,qBAAa,KAAK,OAAO;MAC1B;;AAGK,IAAAA,kBAAW,UAAA,cAAnB,SAAoB,UAAiB;;AACnC,UAAI,UAAU;AACZ,YAAM,WAAW,KAAK;AACtB,aAAK,eAAe,KAAK;UACvB,KAAK,eAAe;UAAC;;QAAA;AAGvB,eAAO;MACR,OAAM;AAEL,aAAK,eAAY;AACjB,YAAM,WAAUD,MAAA,KAAK,KAAK,gBAAgB,oBAAkB,QAAAA,QAAA,SAAAA,MAAA;AAC5D,YAAM,WAAW,UAAU,KAAK,IAAG,IAAE;AAErC,eAAO,KAAK,IAAI,GAAG,QAAQ;MAC5B;;AAGK,IAAAC,kBAAQ,UAAA,WAAhB,SAAiB,UAAgB;AAAjC,UAUC,QAAA;AAVgB,UAAA,aAAA,QAAA;AAAA,mBAAgB;MAAA;AAC/B,UAAI,CAAC,KAAK,WAAW;AAEnB;MACD;AAED,UAAM,WAAW,KAAK,YAAY,QAAQ;AAC1C,WAAK,UAAU,WAAW,WAAA;AAAA,eAAA,UAAA,OAAA,QAAA,QAAA,WAAA;;;cACxB,KAAA;AAAA,uBAAA,CAAA,GAAM,KAAK,UAAS,CAAE;;AAAtB,gBAAAD,IAAA,KAAA;;;;;;;;SACC,QAAQ;;AAGC,IAAAC,kBAAA,UAAA,YAAd,WAAA;;;;;;;AAEI,qBAAM,CAAA,GAAA,KAAK,KAAK,WAAW,IAAI,CAAC;;AAAhC,cAAAD,IAAA,KAAA;;;;AAGA,mBACG,QAAmB,QAAnB,QAAA,SAAA,SAAA,IAAqB,UACtB,QAAA;gBAAA;;cAAA,GACA;AACA,qBAAK;;kBAAwB;gBAAI;cAClC;AAED,qBAAO;gBAAA;;cAAA;;AAET,mBAAK,SAAQ;;;;;;;;IACd;AACH,WAACC;EAAD,EAAC;;ACrFD,IAAA;;EAAA,WAAA;AAIE,aACUC,cAAA,WACA,aAA6B;AAD7B,WAAS,YAAT;AACA,WAAW,cAAX;AAER,WAAK,gBAAe;;AAGd,IAAAA,cAAA,UAAA,kBAAR,WAAA;AACE,WAAK,iBAAiB,yBAAyB,KAAK,WAAW;AAC/D,WAAK,eAAe,yBAAyB,KAAK,SAAS;;AAG7D,IAAAA,cAAK,UAAA,QAAL,SAAM,UAAsB;AAC1B,WAAK,YAAY,SAAS;AAC1B,WAAK,cAAc,SAAS;AAC5B,WAAK,gBAAe;;AAGtB,IAAAA,cAAA,UAAA,SAAA,WAAA;AACE,aAAO;QACL,WAAW,KAAK;QAChB,aAAa,KAAK;;;AAGxB,WAACA;EAAD,EAAC;;ACnBK,SAAgB,qBAAqB,MAAkB;;;;;;;AACrD,iBAAO,KAAK;AACF,iBAAA,CAAA,GAAM,KAAK,WAAU,CAAE;;AAAjC,oBAAU,GAAuB,KAAA;AACtB,iBAAA,CAAA,GAAM,qBACrB,MACA,eAAe,MAAM,EAAE,QAAO,CAAE,CAAC,CAClC;;AAHK,qBAAW,GAGhB,KAAA;AAED;YAAQ,aAAA,QAAA,aAAA,SAAA,SAAA,SAAU,MAAM;YAAQ;YAAI;;UAAA;AAE9B,wBAAc,SAAS,MAAM,CAAC;AAEpC,eAAK,sBAAsB,WAAW;AAEhC,8BAAkBF,MAAA,YAAY,sBAAgB,QAAAA,QAAA,SAAA,SAAAA,IAAE,UAClD,oBAAoB,YAAY,gBAAgB,IAChD,CAAA;AAEE,yBAAe,kBAAkB,KAAK,cAAc,eAAe;AAOnE,2BAAiB,KAAK;AACtB,2BACJ,EAAE,KAAK,SAAS,YAAY,iBAAiB,EAAC,iBAAA,QAAA,iBAAY,SAAA,SAAZ,aAAc;AACxD,wBAAc,CAAC,iBAAiB,QAAQ;AAExC,oBAAiC;YACrC,KAAK,YAAY;YACjB,aAAa,YAAY,eAAe;YACxC,UAAU,YAAY,YAAY;YAClC,OAAO,YAAY,SAAS;YAC5B,eAAe,YAAY,iBAAiB;YAC5C,aAAa,YAAY,eAAe;YACxC,UAAU,YAAY,YAAY;YAClC;YACA,UAAU,IAAI,aAAa,YAAY,WAAW,YAAY,WAAW;YACzE;;AAGF,iBAAO,OAAO,MAAM,OAAO;;;;;;;;AAC5B;AASK,SAAgB,OAAO,MAAU;;;;;;AAC/B,yBAA6B,mBAAmB,IAAI;AAC1D,iBAAA,CAAA,GAAM,qBAAqB,YAAY,CAAC;;AAAxC,UAAAA,IAAA,KAAA;AAKA,iBAAM,CAAA,GAAA,aAAa,KAAK,sBAAsB,YAAY,CAAC;;AAA3D,UAAAA,IAAA,KAAA;AACA,uBAAa,KAAK,0BAA0B,YAAY;;;;;;;;AACzD;AAED,SAAS,kBACP,UACA,SAAmB;AAEnB,MAAM,UAAU,SAAS,OACvB,SAAA,GAAC;AAAI,WAAA,CAAC,QAAQ,KAAK,SAAA,GAAC;AAAI,aAAA,EAAE,eAAe,EAAE;IAAU,CAAA;EAAhD,CAAiD;AAExD,SAAW,cAAA,cAAA,CAAA,GAAA,SAAY,IAAA,GAAA,SAAS,IAAA;AAClC;AAEA,SAAS,oBAAoB,WAA6B;AACxD,SAAO,UAAU,IAAI,SAACA,KAA2B;AAAzB,QAAA,aAAUA,IAAA,YAAK,WAAQ,OAAAA,KAAzB,CAAA,YAAA,CAA2B;AAC/C,WAAO;MACL;MACA,KAAK,SAAS,SAAS;MACvB,aAAa,SAAS,eAAe;MACrC,OAAO,SAAS,SAAS;MACzB,aAAa,SAAS,eAAe;MACrC,UAAU,SAAS,YAAY;;EAEnC,CAAC;AACH;ACrDsB,SAAA,gBACpB,MACA,cAAoB;;;;;;QAGlB,KAAA;AAAA,iBAAA,CAAA,GAAM,+BACJ,MACA,CAAA,GACA,WAAA;AAAA,mBAAA,UAAA,OAAA,QAAA,QAAA,WAAA;;;;;AACQ,2BAAO,YAAY;sBACvB,cAAc;sBACd,iBAAiB;oBAClB,CAAA,EAAE,MAAM,CAAC;AACJ,oBAAAA,MAA2B,KAAK,QAA9B,eAAYA,IAAA,cAAE,SAAMA,IAAA;AACtB,0BAAM,gBACV,MACA,cAAY,aAEZ,OAAO,OAAA,MAAM,CAAE;AAGD,2BAAA,CAAA,GAAO,KAAsB,sBAAqB,CAAE;;AAA9D,8BAAU,GAAoD,KAAA;AACpE;sBAAO;;oBAAA,IAA4B;AAEnC,2BAAA,CAAA,GAAO,cAAc,MAAK,EAAG,KAAK;sBAChC,QAAuB;sBACvB;sBACA;oBACD,CAAA,CAAC;;;YACH,CAAA;UAAA,CAAA,CACF;;AA1BG,qBACJA,IAyBC,KAAA;AAGH,iBAAO,CAAA,GAAA;YACL,aAAa,SAAS;YACtB,WAAW,SAAS;YACpB,cAAc,SAAS;WACxB;;;;AACF;AAEqB,SAAA,YACpB,MACA,SAA2B;;;AAE3B,aAAO,CAAA,GAAA,mBACL,MAGA,QAAA,4BAAA,mBAAmB,MAAM,OAAO,CAAC,CAClC;;;AACF;ACxED,IAAA;;EAAA,WAAA;AAAA,aAAAG,mBAAA;AACE,WAAY,eAAkB;AAC9B,WAAW,cAAkB;AAC7B,WAAc,iBAAkB;;AAEhC,WAAA,eAAIA,iBAAS,WAAA,aAAA;MAAb,KAAA,WAAA;AACE,eACE,CAAC,KAAK,kBACN,KAAK,IAAG,IAAK,KAAK,iBAAqC;;;;IAE1D,CAAA;AAED,IAAAA,iBAAwB,UAAA,2BAAxB,SACE,UAA+C;AAE/C;QAAQ,SAAS;QAAO;;MAAA;AACxB;QACE,OAAO,SAAS,YAAY;QAAW;;MAAA;AAGzC;QACE,OAAO,SAAS,iBAAiB;QAAW;;MAAA;AAG9C,UAAM,YACJ,eAAe,YAAY,OAAO,SAAS,cAAc,cACrD,OAAO,SAAS,SAAS,IACzB,gBAAgB,SAAS,OAAO;AACtC,WAAK,0BACH,SAAS,SACT,SAAS,cACT,SAAS;;AAIP,IAAAA,iBAAA,UAAA,WAAN,SACE,MACA,cAAoB;AAApB,UAAA,iBAAA,QAAA;AAAA,uBAAoB;MAAA;;;;;AAEpB;gBACE,CAAC,KAAK,eAAe,KAAK;gBAC1B;gBAAI;;cAAA;AAIN,kBAAI,CAAC,gBAAgB,KAAK,eAAe,CAAC,KAAK,WAAW;AACxD,uBAAO,CAAA,GAAA,KAAK,WAAW;cACxB;mBAEG,KAAK;AAAL,uBAAiB,CAAA,GAAA,CAAA;AACnB,qBAAM,CAAA,GAAA,KAAK,QAAQ,MAAM,KAAK,YAAa,CAAC;;AAA5C,cAAAH,IAAA,KAAA;AACA,qBAAO,CAAA,GAAA,KAAK,WAAW;YAGzB,KAAA;AAAA,qBAAA,CAAA,GAAO,IAAI;;;;IACZ;AAED,IAAAG,iBAAA,UAAA,oBAAA,WAAA;AACE,WAAK,eAAe;;AAGR,IAAAA,iBAAA,UAAA,UAAd,SAAsB,MAAoB,UAAgB;;;;;YACP,KAAA;AAAA,qBAAA,CAAA,GAAM,gBACrD,MACA,QAAQ,CACT;;AAHK,cAAAH,MAA2C,GAAA,KAAA,GAAzC,cAAWA,IAAA,aAAE,eAAYA,IAAA,cAAE,YAASA,IAAA;AAI5C,mBAAK,0BACH,aACA,cACA,OAAO,SAAS,CAAC;;;;;;;;IAEpB;AAEO,IAAAG,iBAAA,UAAA,4BAAR,SACE,aACA,cACA,cAAoB;AAEpB,WAAK,eAAe,gBAAgB;AACpC,WAAK,cAAc,eAAe;AAClC,WAAK,iBAAiB,KAAK,IAAG,IAAK,eAAe;;AAG7C,IAAAA,iBAAA,WAAP,SAAgB,SAAiB,QAAqB;AAC5C,UAAA,eAA8C,OAAM,cAAtC,cAAgC,OAAM,aAAzB,iBAAmB,OAAM;AAE5D,UAAM,UAAU,IAAIA,iBAAe;AACnC,UAAI,cAAc;AAChB,gBAAQ,OAAO,iBAAiB,UAAwC,kBAAA;UACtE;QACD,CAAA;AACD,gBAAQ,eAAe;MACxB;AACD,UAAI,aAAa;AACf,gBAAQ,OAAO,gBAAgB,UAAwC,kBAAA;UACrE;QACD,CAAA;AACD,gBAAQ,cAAc;MACvB;AACD,UAAI,gBAAgB;AAClB,gBACE,OAAO,mBAAmB,UAE1B,kBAAA;UACE;QACD,CAAA;AAEH,gBAAQ,iBAAiB;MAC1B;AACD,aAAO;;AAGT,IAAAA,iBAAA,UAAA,SAAA,WAAA;AACE,aAAO;QACL,cAAc,KAAK;QACnB,aAAa,KAAK;QAClB,gBAAgB,KAAK;;;AAIzB,IAAAA,iBAAO,UAAA,UAAP,SAAQ,iBAAgC;AACtC,WAAK,cAAc,gBAAgB;AACnC,WAAK,eAAe,gBAAgB;AACpC,WAAK,iBAAiB,gBAAgB;;AAGxC,IAAAA,iBAAA,UAAA,SAAA,WAAA;AACE,aAAO,OAAO,OAAO,IAAIA,iBAAe,GAAI,KAAK,OAAM,CAAE;;AAG3D,IAAAA,iBAAA,UAAA,kBAAA,WAAA;AACE,aAAO,UAAU,iBAAiB;;AAEtC,WAACA;EAAD,EAAC;;AClID,SAAS,wBACP,WACA,SAAe;AAEf,UACE,OAAO,cAAc,YAAY,OAAO,cAAc,aAAW,kBAEjE,EAAE,QAAO,CAAE;AAEf;AAEA,IAAA;;EAAA,WAAA;AAwBE,aAAAC,UAAYJ,KAAsD;AAApD,UAAA,MAAGA,IAAA,KAAE,OAAIA,IAAA,MAAE,kBAAeA,IAAA,iBAAK,MAAjC,OAAAA,KAAA,CAAA,OAAA,QAAA,iBAAA,CAAsC;AAtBzC,WAAA,aAAiC;AAoBzB,WAAA,mBAAmB,IAAI,iBAAiB,IAAI;AA6CrD,WAAc,iBAAuB;AACrC,WAAc,iBAA+B;AA3CnD,WAAK,MAAM;AACX,WAAK,OAAO;AACZ,WAAK,kBAAkB;AACvB,WAAK,cAAc,gBAAgB;AACnC,WAAK,cAAc,IAAI,eAAe;AACtC,WAAK,QAAQ,IAAI,SAAS;AAC1B,WAAK,gBAAgB,IAAI,iBAAiB;AAC1C,WAAK,cAAc,IAAI,eAAe;AACtC,WAAK,WAAW,IAAI,YAAY;AAChC,WAAK,cAAc,IAAI,eAAe;AACtC,WAAK,WAAW,IAAI,YAAY;AAChC,WAAK,eAAe,IAAI,eAAmB,cAAA,CAAA,GAAA,IAAI,cAAY,IAAA,IAAI,CAAA;AAC/D,WAAK,WAAW,IAAI,aAClB,IAAI,aAAa,QACjB,IAAI,eAAe,MAAS;;AAI1B,IAAAI,UAAU,UAAA,aAAhB,SAAiB,cAAsB;;;;;YACjB,KAAA;AAAA,qBAAA,CAAA,GAAM,qBACxB,MACA,KAAK,gBAAgB,SAAS,KAAK,MAAM,YAAY,CAAC,CACvD;;AAHK,4BAAcJ,IAGnB,KAAA;AACD;gBAAQ;gBAAa,KAAK;gBAAI;;cAAA;AAE1B,kBAAA,EAAA,KAAK,gBAAgB;AAArB,uBAAgC,CAAA,GAAA,CAAA;AAClC,mBAAK,cAAc;AACnB,qBAAM,CAAA,GAAA,KAAK,KAAK,sBAAsB,IAAI,CAAC;;AAA3C,cAAAA,IAAA,KAAA;AACA,mBAAK,KAAK,0BAA0B,IAAI;;YAG1C,KAAA;AAAA,qBAAA,CAAA,GAAO,WAAW;;;;IACnB;AAED,IAAAI,UAAgB,UAAA,mBAAhB,SAAiB,cAAsB;AACrC,aAAO,iBAAiB,MAAM,YAAY;;AAG5C,IAAAA,UAAA,UAAA,SAAA,WAAA;AACE,aAAO,OAAO,IAAI;;AAMpB,IAAAA,UAAO,UAAA,UAAP,SAAQ,MAAkB;AACxB,UAAI,SAAS,MAAM;AACjB;MACD;AACD;QAAQ,KAAK,QAAQ,KAAK;QAAK,KAAK;QAAI;;MAAA;AACxC,WAAK,cAAc,KAAK;AACxB,WAAK,WAAW,KAAK;AACrB,WAAK,QAAQ,KAAK;AAClB,WAAK,gBAAgB,KAAK;AAC1B,WAAK,cAAc,KAAK;AACxB,WAAK,cAAc,KAAK;AACxB,WAAK,WAAW,KAAK;AACrB,WAAK,eAAe,KAAK,aAAa,IAAI,SAAA,UAAQ;AAAI,eAAM,SAAA,CAAA,GAAA,QAAQ;MAAd,CAAiB;AACvE,WAAK,SAAS,MAAM,KAAK,QAAQ;AACjC,WAAK,gBAAgB,QAAQ,KAAK,eAAe;;AAGnD,IAAAA,UAAM,UAAA,SAAN,SAAO,MAAkB;AACvB,UAAM,UAAU,IAAIA,UACf,SAAA,SAAA,CAAA,GAAA,IAAI,GAAA,EACP,MACA,iBAAiB,KAAK,gBAAgB,OAAM,EAAE,CAAA,CAAA;AAEhD,cAAQ,SAAS,MAAM,KAAK,QAAQ;AACpC,aAAO;;AAGT,IAAAA,UAAS,UAAA,YAAT,SAAU,UAA6B;AAErC;QAAQ,CAAC,KAAK;QAAgB,KAAK;QAAI;;MAAA;AACvC,WAAK,iBAAiB;AACtB,UAAI,KAAK,gBAAgB;AACvB,aAAK,sBAAsB,KAAK,cAAc;AAC9C,aAAK,iBAAiB;MACvB;;AAGH,IAAAA,UAAqB,UAAA,wBAArB,SAAsB,UAAqB;AACzC,UAAI,KAAK,gBAAgB;AACvB,aAAK,eAAe,QAAQ;MAC7B,OAAM;AAEL,aAAK,iBAAiB;MACvB;;AAGH,IAAAA,UAAA,UAAA,yBAAA,WAAA;AACE,WAAK,iBAAiB,OAAM;;AAG9B,IAAAA,UAAA,UAAA,wBAAA,WAAA;AACE,WAAK,iBAAiB,MAAK;;AAGvB,IAAAA,UAAA,UAAA,2BAAN,SACE,UACAC,SAAc;AAAd,UAAAA,YAAA,QAAA;AAAA,QAAAA,UAAc;MAAA;;;;;;AAEV,gCAAkB;AACtB,kBACE,SAAS,WACT,SAAS,YAAY,KAAK,gBAAgB,aAC1C;AACA,qBAAK,gBAAgB,yBAAyB,QAAQ;AACtD,kCAAkB;cACnB;AAEG,kBAAA,CAAAA;AAAA,uBAAM,CAAA,GAAA,CAAA;AACR,qBAAA,CAAA,GAAM,qBAAqB,IAAI,CAAC;;AAAhC,cAAAL,IAAA,KAAA;;;AAGF,qBAAM,CAAA,GAAA,KAAK,KAAK,sBAAsB,IAAI,CAAC;;AAA3C,cAAAA,IAAA,KAAA;AACA,kBAAI,iBAAiB;AACnB,qBAAK,KAAK,0BAA0B,IAAI;cACzC;;;;;;;;IACF;AAEK,IAAAI,UAAA,UAAA,SAAN,WAAA;;;;;YACkB,KAAA;AAAA,qBAAA,CAAA,GAAM,KAAK,WAAU,CAAE;;AAAjC,wBAAUJ,IAAuB,KAAA;AACvC,qBAAA,CAAA,GAAM,qBAAqB,MAAM,cAAc,KAAK,MAAM,EAAE,QAAO,CAAE,CAAC,CAAC;;AAAvE,cAAAA,IAAA,KAAA;AACA,mBAAK,gBAAgB,kBAAiB;AAKtC,qBAAA,CAAA,GAAO,KAAK,KAAK,QAAO,CAAE;;;;IAC3B;AAED,IAAAI,UAAA,UAAA,SAAA,WAAA;AACE,aAAA,SAAA,SAAA;QACE,KAAK,KAAK;QACV,OAAO,KAAK,SAAS;QACrB,eAAe,KAAK;QACpB,aAAa,KAAK,eAAe;QACjC,aAAa,KAAK;QAClB,UAAU,KAAK,YAAY;QAC3B,aAAa,KAAK,eAAe;QACjC,UAAU,KAAK,YAAY;QAC3B,cAAc,KAAK,aAAa,IAAI,SAAA,UAAQ;AAAI,iBAAM,SAAA,CAAA,GAAA,QAAQ;QAAd,CAAiB;QACjE,iBAAiB,KAAK,gBAAgB,OAAM;;;QAG5C,kBAAkB,KAAK;MAAgB,GACpC,KAAK,SAAS,OAAM,CAAE,GAAA;;QAGzB,QAAQ,KAAK,KAAK,OAAO;QACzB,SAAS,KAAK,KAAK;MAAI,CAGvB;;AAGJ,WAAA,eAAIA,UAAY,WAAA,gBAAA;MAAhB,KAAA,WAAA;AACE,eAAO,KAAK,gBAAgB,gBAAgB;;;;IAC7C,CAAA;AAEM,IAAAA,UAAA,YAAP,SAAiB,MAAoB,QAAqB;;AACxD,UAAM,eAAcJ,MAAA,OAAO,iBAAW,QAAAA,QAAA,SAAAA,MAAI;AAC1C,UAAM,SAAQ,KAAA,OAAO,WAAK,QAAA,OAAA,SAAA,KAAI;AAC9B,UAAM,eAAc,KAAA,OAAO,iBAAW,QAAA,OAAA,SAAA,KAAI;AAC1C,UAAM,YAAW,KAAA,OAAO,cAAQ,QAAA,OAAA,SAAA,KAAI;AACpC,UAAM,YAAW,KAAA,OAAO,cAAQ,QAAA,OAAA,SAAA,KAAI;AACpC,UAAM,oBAAmB,KAAA,OAAO,sBAAgB,QAAA,OAAA,SAAA,KAAI;AACpD,UAAM,aAAY,KAAA,OAAO,eAAS,QAAA,OAAA,SAAA,KAAI;AACtC,UAAM,eAAc,KAAA,OAAO,iBAAW,QAAA,OAAA,SAAA,KAAI;AAExC,UAAA,MAKE,OALC,KACH,gBAIE,OAJW,eACb,cAGE,OAHS,aACX,eAEE,OAAM,cADS,0BACf,OAAM;AAEV;QAAQ,OAAO;QAAyB;QAAI;;MAAA;AAE5C,UAAM,kBAAkB,gBAAgB,SACtC,KAAK,MACL,uBAAwC;AAG1C;QAAQ,OAAO,QAAQ;QAAU;QAAI;;MAAA;AACrC,8BAAwB,aAAa,KAAK,IAAI;AAC9C,8BAAwB,OAAO,KAAK,IAAI;AACxC;QACE,OAAO,kBAAkB;QACzB;QAAI;;MAAA;AAGN;QACE,OAAO,gBAAgB;QACvB;QAAI;;MAAA;AAGN,8BAAwB,aAAa,KAAK,IAAI;AAC9C,8BAAwB,UAAU,KAAK,IAAI;AAC3C,8BAAwB,UAAU,KAAK,IAAI;AAC3C,8BAAwB,kBAAkB,KAAK,IAAI;AACnD,8BAAwB,WAAW,KAAK,IAAI;AAC5C,8BAAwB,aAAa,KAAK,IAAI;AAC9C,UAAM,OAAO,IAAII,UAAS;QACxB;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;MACD,CAAA;AAED,UAAI,gBAAgB,MAAM,QAAQ,YAAY,GAAG;AAC/C,aAAK,eAAe,aAAa,IAAI,SAAA,UAAQ;AAAI,iBAAM,SAAA,CAAA,GAAA,QAAQ;QAAd,CAAiB;MACnE;AAED,UAAI,kBAAkB;AACpB,aAAK,mBAAmB;MACzB;AAED,aAAO;;AAQI,IAAAA,UAAA,uBAAb,SACE,MACA,iBACA,aAA4B;AAA5B,UAAA,gBAAA,QAAA;AAAA,sBAA4B;MAAA;;;;;;AAEtB,gCAAkB,IAAI,gBAAe;AAC3C,8BAAgB,yBAAyB,eAAe;AAGlD,qBAAO,IAAIA,UAAS;gBACxB,KAAK,gBAAgB;gBACrB;gBACA;gBACA;cACD,CAAA;AAGD,qBAAA,CAAA,GAAM,qBAAqB,IAAI,CAAC;;AAAhC,cAAAJ,IAAA,KAAA;AACA,qBAAA,CAAA,GAAO,IAAI;;;;IACZ;AACH,WAACI;EAAD,EAAC;;ACjTD,IAAM,gBAAuC,oBAAI,IAAG;AAE9C,SAAU,aAAgB,KAAY;AAC1C,cAAY,eAAe,UAAU,6BAA6B;AAClE,MAAI,WAAW,cAAc,IAAI,GAAG;AAEpC,MAAI,UAAU;AACZ,gBACE,oBAAoB,KACpB,gDAAgD;AAElD,WAAO;EACR;AAED,aAAW,IAAK,IAAgC;AAChD,gBAAc,IAAI,KAAK,QAAQ;AAC/B,SAAO;AACT;ACrBA,IAAA;;EAAA,WAAA;AAAA,aAAAE,uBAAA;AAEW,WAAA,OAA4B;AACrC,WAAO,UAAqC,CAAA;;AAEtC,IAAAA,qBAAA,UAAA,eAAN,WAAA;;;AACE,iBAAA,CAAA,GAAO,IAAI;;;IACZ;AAEK,IAAAA,qBAAA,UAAA,OAAN,SAAW,KAAa,OAAuB;;;AAC7C,eAAK,QAAQ,GAAG,IAAI;;;;;;;IACrB;AAEK,IAAAA,qBAAI,UAAA,OAAV,SAAuC,KAAW;;;;AAC1C,kBAAQ,KAAK,QAAQ,GAAG;AAC9B,iBAAO,CAAA,GAAA,UAAU,SAAY,OAAQ,KAAW;;;IACjD;AAEK,IAAAA,qBAAO,UAAA,UAAb,SAAc,KAAW;;;AACvB,iBAAO,KAAK,QAAQ,GAAG;;;;;;;IACxB;AAED,IAAAA,qBAAA,UAAA,eAAA,SAAa,MAAc,WAA+B;AAExD;;AAGF,IAAAA,qBAAA,UAAA,kBAAA,SAAgB,MAAc,WAA+B;AAE3D;;AA5BK,IAAAA,qBAAI,OAAW;AA8BxB,WAACA;EAAA,EA/BD;;AAsCO,IAAM,sBAAmC;SC9BhC,oBACd,KACA,QACA,SAAgB;AAEhB,SAAO,GAAA,OAAA,YAAA,GAAA,EAAA,OAA4B,KAAG,GAAA,EAAA,OAAI,QAAU,GAAA,EAAA,OAAA,OAAO;AAC7D;AAEA,IAAA;;EAAA,WAAA;AAKE,aAAAC,wBACS,aACU,MACA,SAAe;AAFzB,WAAW,cAAX;AACU,WAAI,OAAJ;AACA,WAAO,UAAP;AAEX,UAAAP,MAAmB,KAAK,MAAtB,SAAMA,IAAA,QAAEQ,QAAIR,IAAA;AACpB,WAAK,cAAc,oBAAoB,KAAK,SAAS,OAAO,QAAQQ,KAAI;AACxE,WAAK,qBAAqB,oBAAmB,eAE3C,OAAO,QACPA,KAAI;AAEN,WAAK,oBAAoB,KAAK,gBAAgB,KAAK,IAAI;AACvD,WAAK,YAAY,aAAa,KAAK,aAAa,KAAK,iBAAiB;;AAGxE,IAAAD,wBAAc,UAAA,iBAAd,SAAe,MAAkB;AAC/B,aAAO,KAAK,YAAY,KAAK,KAAK,aAAa,KAAK,OAAM,CAAE;;AAGxD,IAAAA,wBAAA,UAAA,iBAAN,WAAA;;;;;;AACe,qBAAM,CAAA,GAAA,KAAK,YAAY,KAAoB,KAAK,WAAW,CAAC;;AAAnE,qBAAOP,IAA4D,KAAA;AACzE,qBAAA,CAAA,GAAO,OAAO,SAAS,UAAU,KAAK,MAAM,IAAI,IAAI,IAAI;;;;IACzD;AAED,IAAAO,wBAAA,UAAA,oBAAA,WAAA;AACE,aAAO,KAAK,YAAY,QAAQ,KAAK,WAAW;;AAGlD,IAAAA,wBAAA,UAAA,6BAAA,WAAA;AACE,aAAO,KAAK,YAAY,KACtB,KAAK,oBACL,KAAK,YAAY,IAAI;;AAInB,IAAAA,wBAAc,UAAA,iBAApB,SAAqB,gBAAmC;;;;;;AACtD,kBAAI,KAAK,gBAAgB,gBAAgB;AACvC,uBAAO;kBAAA;;gBAAA;cACR;AAEmB,qBAAA,CAAA,GAAM,KAAK,eAAc,CAAE;;AAAzC,4BAAcP,IAA2B,KAAA;AAC/C,qBAAA,CAAA,GAAM,KAAK,kBAAiB,CAAE;;AAA9B,cAAAA,IAAA,KAAA;AAEA,mBAAK,cAAc;AAEnB,kBAAI,aAAa;AACf,uBAAA,CAAA,GAAO,KAAK,eAAe,WAAW,CAAC;cACxC;;;;;;;;IACF;AAED,IAAAO,wBAAA,UAAA,SAAA,WAAA;AACE,WAAK,YAAY,gBAAgB,KAAK,aAAa,KAAK,iBAAiB;;AAG9D,IAAAA,wBAAA,SAAb,SACE,MACA,sBACA,SAA2B;AAA3B,UAAA,YAAA,QAAA;AAAA,kBAA2B;MAAA;;;;;;;AAE3B,kBAAI,CAAC,qBAAqB,QAAQ;AAChC,uBAAA,CAAA,GAAO,IAAIA,wBACT,aAAa,mBAAmB,GAChC,MACA,OAAO,CACR;cACF;AAIC,qBAAM,CAAA,GAAA,QAAQ,IACZ,qBAAqB,IAAI,SAAME,cAAW;AAAA,uBAAA,UAAA,OAAA,QAAA,QAAA,WAAA;;;sBACpC,KAAA;AAAA,+BAAA,CAAA,GAAMA,aAAY,aAAY,CAAE;;AAApC,4BAAIT,IAAA,KAAA,GAAkC;AACpC,iCAAA,CAAA,GAAOS,YAAW;wBACnB;AACD,+BAAA,CAAA,GAAO,MAAS;;;gBACjB,CAAA;cAAA,CAAA,CAAC,CACH;;AARG,sCACJ,GAOC,KAAA,EACD,OAAO,SAAAA,cAAe;AAAA,uBAAAA;cAAW,CAAA;AAG/B,oCACF,sBAAsB,CAAC,KACvB,aAAkC,mBAAmB;AAEjD,oBAAM,oBAAoB,SAAS,KAAK,OAAO,QAAQ,KAAK,IAAI;AAIlE,8BAAqC;AAIK,mBAAA,GAApB,yBAAoB;;;AAApB,kBAAA,EAAA,KAAA,uBAAA;AAAoB,uBAAA,CAAA,GAAA,CAAA;AAAnC,4BAAW,uBAAA,EAAA;;;;AAEL,qBAAA,CAAA,GAAM,YAAY,KAAoB,GAAG,CAAC;;AAAjD,qBAAO,GAA0C,KAAA;AACvD,kBAAI,MAAM;AACF,uBAAO,SAAS,UAAU,MAAM,IAAI;AAC1C,oBAAI,gBAAgB,qBAAqB;AACvC,kCAAgB;gBACjB;AACD,sCAAsB;AACtB,uBAAM,CAAA,GAAA,CAAA;cACP;;;;;;AAVqB;;;AAgBpB,mCAAqB,sBAAsB,OAC/C,SAAA,GAAK;AAAA,uBAAA,EAAE;cAAF,CAAuB;AAI9B,kBACE,CAAC,oBAAoB,yBACrB,CAAC,mBAAmB,QACpB;AACA,uBAAO,CAAA,GAAA,IAAIF,wBAAuB,qBAAqB,MAAM,OAAO,CAAC;cACtE;AAED,oCAAsB,mBAAmB,CAAC;AACtC,kBAAA,CAAA;AAAA,uBAAa,CAAA,GAAA,CAAA;AAGf,qBAAM,CAAA,GAAA,oBAAoB,KAAK,KAAK,cAAc,OAAM,CAAE,CAAC;;AAA3D,iBAAA,KAAA;;;AAKF,qBAAM,CAAA,GAAA,QAAQ,IACZ,qBAAqB,IAAI,SAAME,cAAW;AAAA,uBAAA,UAAA,OAAA,QAAA,QAAA,WAAA;;;;AACpC,4BAAA,EAAAA,iBAAgB;AAAhB,iCAAmC,CAAA,GAAA,CAAA;;;;AAEnC,+BAAA,CAAA,GAAMA,aAAY,QAAQ,GAAG,CAAC;;AAA9B,wBAAAC,IAAA,KAAA;;;;;;;;;;;;gBAGL,CAAA;cAAA,CAAA,CAAC,CACH;;AARD,iBAAA,KAAA;AASA,qBAAO,CAAA,GAAA,IAAIH,wBAAuB,qBAAqB,MAAM,OAAO,CAAC;;;;IACtE;AACH,WAACA;EAAD,EAAC;;AC5IK,SAAU,gBAAgB,WAAiB;AAC/C,MAAM,KAAK,UAAU,YAAW;AAChC,MAAI,GAAG,SAAS,QAAQ,KAAK,GAAG,SAAS,MAAM,KAAK,GAAG,SAAS,QAAQ,GAAG;AACzE,WAAyB;EAC1B,WAAU,YAAY,EAAE,GAAG;AAE1B,WAA4B;EAC7B,WAAU,GAAG,SAAS,MAAM,KAAK,GAAG,SAAS,UAAU,GAAG;AACzD,WAAsB;EACvB,WAAU,GAAG,SAAS,OAAO,GAAG;AAC/B,WAAwB;EACzB,WAAU,WAAW,EAAE,GAAG;AACzB,WAA2B;EAC5B,WAAU,GAAG,SAAS,OAAO,GAAG;AAC/B,WAAwB;EACzB,WAAU,cAAc,EAAE,GAAG;AAE5B,WAA8B;EAC/B,WAAU,SAAS,EAAE,GAAG;AAEvB,WAAyB;EAC1B,WAAU,UAAU,EAAE,GAAG;AACxB,WAA0B;EAC3B,YACE,GAAG,SAAS,SAAS,KAAK,aAAa,EAAE,MAC1C,CAAC,GAAG,SAAS,OAAO,GACpB;AACA,WAA0B;EAC3B,WAAU,WAAW,EAAE,GAAG;AAEzB,WAA2B;EAC5B,OAAM;AAEL,QAAM,KAAK;AACX,QAAM,UAAU,UAAU,MAAM,EAAE;AAClC,SAAI,YAAO,QAAP,YAAO,SAAA,SAAP,QAAS,YAAW,GAAG;AACzB,aAAO,QAAQ,CAAC;IACjB;EACF;AACD,SAAyB;AAC3B;AAEM,SAAU,WAAW,IAAY;AAAZ,MAAA,OAAA,QAAA;AAAA,SAAK,MAAK;EAAE;AACrC,SAAO,aAAa,KAAK,EAAE;AAC7B;AAEM,SAAU,UAAU,WAAmB;AAAnB,MAAA,cAAA,QAAA;AAAA,gBAAY,MAAK;EAAE;AAC3C,MAAM,KAAK,UAAU,YAAW;AAChC,SACE,GAAG,SAAS,SAAS,KACrB,CAAC,GAAG,SAAS,SAAS,KACtB,CAAC,GAAG,SAAS,QAAQ,KACrB,CAAC,GAAG,SAAS,SAAS;AAE1B;AAEM,SAAU,aAAa,IAAY;AAAZ,MAAA,OAAA,QAAA;AAAA,SAAK,MAAK;EAAE;AACvC,SAAO,WAAW,KAAK,EAAE;AAC3B;AAEM,SAAU,YAAY,IAAY;AAAZ,MAAA,OAAA,QAAA;AAAA,SAAK,MAAK;EAAE;AACtC,SAAO,YAAY,KAAK,EAAE;AAC5B;AAEM,SAAU,WAAW,IAAY;AAAZ,MAAA,OAAA,QAAA;AAAA,SAAK,MAAK;EAAE;AACrC,SAAO,WAAW,KAAK,EAAE;AAC3B;AAEM,SAAU,cAAc,IAAY;AAAZ,MAAA,OAAA,QAAA;AAAA,SAAK,MAAK;EAAE;AACxC,SAAO,cAAc,KAAK,EAAE;AAC9B;AAEM,SAAU,SAAS,IAAY;AAAZ,MAAA,OAAA,QAAA;AAAA,SAAK,MAAK;EAAE;AACnC,SAAO,SAAS,KAAK,EAAE;AACzB;AAEM,SAAU,OAAO,IAAY;AAAZ,MAAA,OAAA,QAAA;AAAA,SAAK,MAAK;EAAE;AACjC,SACE,oBAAoB,KAAK,EAAE,KAC1B,aAAa,KAAK,EAAE,KAAK,UAAU,KAAK,EAAE;AAE/C;AAEM,SAAU,WAAW,IAAY;AAAZ,MAAA,OAAA,QAAA;AAAA,SAAK,MAAK;EAAE;AACrC,SACE,+BAA+B,KAAK,EAAE,KACtC,+BAA+B,KAAK,EAAE;AAE1C;SAMgB,UAAO;AACrB,SAAO,KAAI,KAAO,SAAsB,iBAAiB;AAC3D;AAEM,SAAU,iBAAiB,IAAoB;AAApB,MAAA,OAAA,QAAA;AAAA,SAAa,MAAK;EAAE;AAEnD,SACE,OAAO,EAAE,KACT,WAAW,EAAE,KACb,SAAS,EAAE,KACX,cAAc,EAAE,KAChB,iBAAiB,KAAK,EAAE,KACxB,YAAY,EAAE;AAElB;SAEgB,YAAS;AACvB,MAAI;AAGF,WAAO,CAAC,EAAE,UAAU,WAAW,OAAO;EACvC,SAAQ,GAAG;AACV,WAAO;EACR;AACH;AC/HgB,SAAA,kBACd,gBACA,YAAkC;AAAlC,MAAA,eAAA,QAAA;AAAA,iBAAkC,CAAA;EAAA;AAElC,MAAI;AACJ,UAAQ,gBAAc;IACpB,KAAA;AAEE,yBAAmB,gBAAgB,MAAK,CAAE;AAC1C;IACF,KAAA;AAIE,yBAAmB,GAAG,OAAA,gBAAgB,MAAK,CAAE,GAAC,GAAA,EAAA,OAAI,cAAc;AAChE;IACF;AACE,yBAAmB;EACtB;AACD,MAAM,qBAAqB,WAAW,SAClC,WAAW,KAAK,GAAG,IACnB;AACJ,SAAO,GAAA,OAAG,kBAAgB,GAAA,EAAA,OAAA,UAAA,GAAA,EAAA,OAAiC,aAAe,GAAA,EAAA,OAAA,kBAAkB;AAC9F;ACpCA,IAAA;;EAAA,WAAA;AAGE,aAAAI,qBAA6B,MAAkB;AAAlB,WAAI,OAAJ;AAFZ,WAAK,QAAsB,CAAA;;AAI5C,IAAAA,qBAAA,UAAA,eAAA,SACE,UACA,SAAoB;AAFtB,UA8BC,QAAA;AAxBC,UAAM,kBAAmC,SACvC,MAAiB;AAEjB,eAAA,IAAI,QAAQ,SAAC,SAAS,QAAM;AAC1B,cAAI;AACF,gBAAM,SAAS,SAAS,IAAI;AAG5B,oBAAQ,MAAM;UACf,SAAQ,GAAG;AAEV,mBAAO,CAAC;UACT;QACH,CAAC;MAVD;AAYF,sBAAgB,UAAU;AAC1B,WAAK,MAAM,KAAK,eAAe;AAE/B,UAAM,QAAQ,KAAK,MAAM,SAAS;AAClC,aAAO,WAAA;AAGL,cAAK,MAAM,KAAK,IAAI,WAAA;AAAM,iBAAA,QAAQ,QAAO;QAAE;MAC7C;;AAGI,IAAAA,qBAAa,UAAA,gBAAnB,SAAoB,UAAqB;;;;;;AACvC,kBAAI,KAAK,KAAK,gBAAgB,UAAU;AACtC,uBAAO;kBAAA;;gBAAA;cACR;AAKK,6BAAkC,CAAA;;;;sBAEJC,MAAA,KAAK;;;AAAL,kBAAA,EAAA,KAAAA,IAAA;AAAU,uBAAA,CAAA,GAAA,CAAA;AAAjC,oCAAmBA,IAAA,EAAA;AAC5B,qBAAA,CAAA,GAAM,oBAAoB,QAAQ,CAAC;;AAAnC,iBAAA,KAAA;AAGA,kBAAI,oBAAoB,SAAS;AAC/B,6BAAa,KAAK,oBAAoB,OAAO;cAC9C;;;AAN+B;;;;;;AAWlC,2BAAa,QAAO;AACpB,mBAAA,KAAA,GAAsB,iBAAY,cAAZ,KAAY,eAAA,QAAZ,MAAc;AAAzB,0BAAO,eAAA,EAAA;AAChB,oBAAI;AACF,0BAAO;gBACR,SAAQ,GAAG;gBAEX;cACF;AAED,oBAAM,KAAK,KAAK,cAAc,OAAoC,iBAAA;gBAChE,iBAAkB,QAAW,QAAX,QAAA,SAAA,SAAA,IAAa;cAChC,CAAA;;;;;;;;;IAEJ;AACH,WAACD;EAAD,EAAC;;ACzCqB,SAAA,mBACpB,MACA,SAAsC;AAAtC,MAAA,YAAA,QAAA;AAAA,cAAsC,CAAA;EAAA;;;AAEtC,aAAO,CAAA,GAAA,mBAIL,MAGA,OAAA,sBAAA,mBAAmB,MAAM,OAAO,CAAC,CAClC;;;AACF;AC5CD,IAAM,8BAA8B;AAOpC,IAAA;;EAAA,WAAA;AAOE,aAAAE,oBAAY,UAAmC;;AAE7C,UAAM,kBAAkB,SAAS;AACjC,WAAK,wBAAwB,CAAA;AAE7B,WAAK,sBAAsB,qBACzBD,MAAA,gBAAgB,uBAAiB,QAAAA,QAAA,SAAAA,MAAI;AACvC,UAAI,gBAAgB,mBAAmB;AACrC,aAAK,sBAAsB,oBACzB,gBAAgB;MACnB;AACD,UAAI,gBAAgB,+BAA+B,QAAW;AAC5D,aAAK,sBAAsB,0BACzB,gBAAgB;MACnB;AACD,UAAI,gBAAgB,+BAA+B,QAAW;AAC5D,aAAK,sBAAsB,0BACzB,gBAAgB;MACnB;AACD,UAAI,gBAAgB,6BAA6B,QAAW;AAC1D,aAAK,sBAAsB,2BACzB,gBAAgB;MACnB;AACD,UAAI,gBAAgB,qCAAqC,QAAW;AAClE,aAAK,sBAAsB,mCACzB,gBAAgB;MACnB;AAED,WAAK,mBAAmB,SAAS;AACjC,UAAI,KAAK,qBAAqB,iCAAiC;AAC7D,aAAK,mBAAmB;MACzB;AAGD,WAAK,oCACH,MAAA,KAAA,SAAS,sCAAgC,QAAA,OAAA,SAAA,SAAA,GAAE,KAAK,EAAE,OAAK,QAAA,OAAA,SAAA,KAAA;AAEzD,WAAK,wBAAuB,KAAA,SAAS,0BAAwB,QAAA,OAAA,SAAA,KAAA;AAC7D,WAAK,gBAAgB,SAAS;;AAGhC,IAAAC,oBAAgB,UAAA,mBAAhB,SAAiB,UAAgB;;AAC/B,UAAM,SAA2C;QAC/C,SAAS;QACT,gBAAgB;;AAIlB,WAAK,8BAA8B,UAAU,MAAM;AACnD,WAAK,iCAAiC,UAAU,MAAM;AAGtD,aAAO,YAAP,OAAO,WAAYD,MAAA,OAAO,4BAAsB,QAAAA,QAAA,SAAAA,MAAI;AACpD,aAAO,YAAP,OAAO,WAAY,KAAA,OAAO,4BAAsB,QAAA,OAAA,SAAA,KAAI;AACpD,aAAO,YAAP,OAAO,WAAY,KAAA,OAAO,6BAAuB,QAAA,OAAA,SAAA,KAAI;AACrD,aAAO,YAAP,OAAO,WAAY,KAAA,OAAO,6BAAuB,QAAA,OAAA,SAAA,KAAI;AACrD,aAAO,YAAP,OAAO,WAAY,KAAA,OAAO,8BAAwB,QAAA,OAAA,SAAA,KAAI;AACtD,aAAO,YAAP,OAAO,WAAY,KAAA,OAAO,sCAAgC,QAAA,OAAA,SAAA,KAAI;AAE9D,aAAO;;AASD,IAAAC,oBAAA,UAAA,gCAAR,SACE,UACA,QAAwC;AAExC,UAAM,oBAAoB,KAAK,sBAAsB;AACrD,UAAM,oBAAoB,KAAK,sBAAsB;AACrD,UAAI,mBAAmB;AACrB,eAAO,yBAAyB,SAAS,UAAU;MACpD;AACD,UAAI,mBAAmB;AACrB,eAAO,yBAAyB,SAAS,UAAU;MACpD;;AASK,IAAAA,oBAAA,UAAA,mCAAR,SACE,UACA,QAAwC;AAGxC,WAAK;QACH;;QACkC;;QACA;;QACF;;QACQ;MAAK;AAG/C,UAAI;AACJ,eAAS,IAAI,GAAG,IAAI,SAAS,QAAQ,KAAK;AACxC,uBAAe,SAAS,OAAO,CAAC;AAChC,aAAK;UACH;;UACkC,gBAAgB,OAChD,gBAAgB;;UACgB,gBAAgB,OAChD,gBAAgB;;UACc,gBAAgB,OAC9C,gBAAgB;;UACsB,KAAK,iCAAiC,SAC5E,YAAY;QACb;MAEJ;;AAcK,IAAAA,oBAAsC,UAAA,yCAA9C,SACE,QACA,4BACA,4BACA,0BACA,kCAAyC;AAEzC,UAAI,KAAK,sBAAsB,yBAAyB;AACtD,eAAO,4BAAP,OAAO,0BAA4B;MACpC;AACD,UAAI,KAAK,sBAAsB,yBAAyB;AACtD,eAAO,4BAAP,OAAO,0BAA4B;MACpC;AACD,UAAI,KAAK,sBAAsB,0BAA0B;AACvD,eAAO,6BAAP,OAAO,2BAA6B;MACrC;AACD,UAAI,KAAK,sBAAsB,kCAAkC;AAC/D,eAAO,qCAAP,OAAO,mCACL;MACH;;AAEL,WAACA;EAAD,EAAC;;ACxGD,IAAA;;EAAA,WAAA;AAqCE,aAAAC,UACkB,KACC,0BACA,yBACD,QAAsB;AAHtB,WAAG,MAAH;AACC,WAAwB,2BAAxB;AACA,WAAuB,0BAAvB;AACD,WAAM,SAAN;AAxClB,WAAW,cAAgB;AAC3B,WAAc,iBAA0B;AAChC,WAAA,aAAa,QAAQ,QAAO;AAG5B,WAAA,wBAAwB,IAAI,aAAmB,IAAI;AACnD,WAAA,sBAAsB,IAAI,aAAmB,IAAI;AACxC,WAAA,mBAAmB,IAAI,oBAAoB,IAAI;AACxD,WAAY,eAAwB;AACpC,WAAyB,4BAAG;AACnB,WAAuC,0CAAW;AAInE,WAAgB,mBAAG;AACnB,WAAc,iBAAG;AACjB,WAAQ,WAAG;AACX,WAAsB,yBAAyB;AAC/C,WAAsB,yBAAyC;AAC/D,WAAa,gBACX;AACF,WAAqB,wBAA2B;AAChD,WAAuB,0BAAoC,CAAA;AAC3D,WAAsB,yBAAkC;AACxD,WAAuB,0BAA2C,CAAA;AAM1D,WAAe,kBAA8B;AAErD,WAAY,eAAkB;AAC9B,WAAQ,WAAkB;AAC1B,WAAA,WAAyB,EAAE,mCAAmC,MAAK;AAqmB3D,WAAU,aAAa,CAAA;AA7lB7B,WAAK,OAAO,IAAI;AAChB,WAAK,gBAAgB,OAAO;;AAG9B,IAAAA,UAAA,UAAA,6BAAA,SACE,sBACA,uBAA6C;AAF/C,UA8CC,QAAA;AA1CC,UAAI,uBAAuB;AACzB,aAAK,yBAAyB,aAAa,qBAAqB;MACjE;AAID,WAAK,yBAAyB,KAAK,MAAM,WAAA;AAAA,eAAA,UAAA,OAAA,QAAA,QAAA,WAAA;;;;;;AACvC,oBAAI,KAAK,UAAU;AACjB,yBAAO;oBAAA;;kBAAA;gBACR;AAED,gBAAAF,MAAA;AAA0B,uBAAM,CAAA,GAAA,uBAAuB,OACrD,MACA,oBAAoB,CACrB;;AAHD,gBAAAA,IAAK,qBAAqB,GAAA,KAAA;AAK1B,oBAAI,KAAK,UAAU;AACjB,yBAAO;oBAAA;;kBAAA;gBACR;uBAIG,KAAA,KAAK,4BAAsB,QAAA,OAAA,SAAA,SAAA,GAAE;AAA7B,yBAAmD,CAAA,GAAA,CAAA;;;;AAGnD,uBAAM,CAAA,GAAA,KAAK,uBAAuB,YAAY,IAAI,CAAC;;AAAnD,mBAAA,KAAA;;;;;cAMJ,KAAA;AAAA,uBAAA,CAAA,GAAM,KAAK,sBAAsB,qBAAqB,CAAC;;AAAvD,mBAAA,KAAA;AACA,qBAAK,oBAAkB,KAAA,KAAK,iBAAa,QAAA,OAAA,SAAA,SAAA,GAAA,QAAO;AAEhD,oBAAI,KAAK,UAAU;AACjB,yBAAO;oBAAA;;kBAAA;gBACR;AAED,qBAAK,iBAAiB;;;;;;;QACvB,CAAA;MAAA,CAAA;AAED,aAAO,KAAK;;AAMR,IAAAE,UAAA,UAAA,kBAAN,WAAA;;;;;;AACE,kBAAI,KAAK,UAAU;AACjB,uBAAO;kBAAA;;gBAAA;cACR;AAEY,qBAAA,CAAA,GAAM,KAAK,oBAAoB,eAAc,CAAE;;AAAtD,qBAAOF,IAA+C,KAAA;AAE5D,kBAAI,CAAC,KAAK,eAAe,CAAC,MAAM;AAE9B,uBAAO;kBAAA;;gBAAA;cACR;AAGG,kBAAA,EAAA,KAAK,eAAe,QAAQ,KAAK,YAAY,QAAQ,KAAK;AAA1D,uBAA6D,CAAA,GAAA,CAAA;AAE/D,mBAAK,aAAa,QAAQ,IAAI;AAG9B,qBAAA,CAAA,GAAM,KAAK,YAAY,WAAU,CAAE;;AAAnC,cAAAA,IAAA,KAAA;AACA,qBAAO;gBAAA;;cAAA;;AAKT,qBAAM,CAAA,GAAA,KAAK;gBAAmB;;gBAAqC;cAAI,CAAC;;AAAxE,cAAAA,IAAA,KAAA;;;;;;;;IACD;AAEa,IAAAE,UAAqB,UAAA,wBAAnC,SACE,uBAA6C;;;;;;YAI1C,KAAA;AAAA,qBAAA,CAAA,GAAM,KAAK,oBAAoB,eAAc,CAAE;;AAD5C,qCACH,GAAA,KAAA;AACC,kCAAoB;AACpB,uCAAyB;oBACzB,yBAAyB,KAAK,OAAO;AAArC,uBAA+C,CAAA,GAAA,CAAA;AACjD,qBAAA,CAAA,GAAM,KAAK,oCAAmC,CAAE;;AAAhD,iBAAA,KAAA;AACM,qCAAsBF,MAAA,KAAK,kBAAY,QAAAA,QAAA,SAAA,SAAAA,IAAE;AACzC,kCAAoB,sBAAA,QAAA,sBAAiB,SAAA,SAAjB,kBAAmB;AAC9B,qBAAA,CAAA,GAAM,KAAK,kBAAkB,qBAAqB,CAAC;;AAA5D,uBAAS,GAAmD,KAAA;AAMlE,mBACG,CAAC,uBAAuB,wBAAwB,uBACjD,WAAM,QAAN,WAAM,SAAA,SAAN,OAAQ,OACR;AACA,oCAAoB,OAAO;AAC3B,yCAAyB;cAC1B;;;AAIH,kBAAI,CAAC,mBAAmB;AACtB,uBAAA,CAAA,GAAO,KAAK,uBAAuB,IAAI,CAAC;cACzC;AAEG,kBAAA,CAAA,CAAC,kBAAkB;AAAnB,uBAAmC,CAAA,GAAA,CAAA;AAGjC,kBAAA,CAAA;AAAA,uBAAsB,CAAA,GAAA,CAAA;;;;AAEtB,qBAAM,CAAA,GAAA,KAAK,iBAAiB,cAAc,iBAAiB,CAAC;;AAA5D,iBAAA,KAAA;;;;AAEA,kCAAoB;AAGpB,mBAAK,uBAAwB,wBAAwB,MAAM,WAAA;AACzD,uBAAA,QAAQ,OAAO,GAAC;cAAhB,CAAiB;;;AAKvB,kBAAI,mBAAmB;AACrB,uBAAA,CAAA,GAAO,KAAK,+BAA+B,iBAAiB,CAAC;cAC9D,OAAM;AACL,uBAAA,CAAA,GAAO,KAAK,uBAAuB,IAAI,CAAC;cACzC;;AAGH;gBAAQ,KAAK;gBAAwB;gBAAI;;cAAA;AACzC,qBAAA,CAAA,GAAM,KAAK,oCAAmC,CAAE;;AAAhD,iBAAA,KAAA;AAKA,kBACE,KAAK,gBACL,KAAK,aAAa,qBAAqB,kBAAkB,kBACzD;AACA,uBAAA,CAAA,GAAO,KAAK,uBAAuB,iBAAiB,CAAC;cACtD;AAED,qBAAA,CAAA,GAAO,KAAK,+BAA+B,iBAAiB,CAAC;;;;IAC9D;AAEa,IAAAE,UAAiB,UAAA,oBAA/B,SACE,kBAAuC;;;;;;AAkBnC,uBAAgC;;;;AAIzB,qBAAA,CAAA,GAAM,KAAK,uBAAwB,oBAC1C,MACA,kBACA,IAAI,CACL;;AAJD,uBAASF,IAAA,KAAA;;;;AAQT,qBAAA,CAAA,GAAM,KAAK,iBAAiB,IAAI,CAAC;;AAAjC,cAAAA,IAAA,KAAA;;YAGF,KAAA;AAAA,qBAAA,CAAA,GAAO,MAAM;;;;IACd;AAEa,IAAAE,UAA8B,UAAA,iCAA5C,SACE,MAAkB;;;;;;;AAGhB,qBAAA,CAAA,GAAM,qBAAqB,IAAI,CAAC;;AAAhC,cAAAF,IAAA,KAAA;;;;AAEA,mBACG,QAAmB,QAAnB,QAAA,SAAA,SAAA,IAAqB,UACtB,QAAA;gBAAA;;cAAA,GACA;AAGA,uBAAA,CAAA,GAAO,KAAK,uBAAuB,IAAI,CAAC;cACzC;;YAGH,KAAA;AAAA,qBAAA,CAAA,GAAO,KAAK,uBAAuB,IAAI,CAAC;;;;IACzC;AAED,IAAAE,UAAA,UAAA,oBAAA,WAAA;AACE,WAAK,eAAe,iBAAgB;;AAGhC,IAAAA,UAAA,UAAA,UAAN,WAAA;;;AACE,eAAK,WAAW;;;;;;;IACjB;AAEK,IAAAA,UAAiB,UAAA,oBAAvB,SAAwB,YAAuB;;;;AAGvC,iBAAO,aACR,mBAAmB,UAAU,IAC9B;AACJ,cAAI,MAAM;AACR;cACE,KAAK,KAAK,OAAO,WAAW,KAAK,OAAO;cACxC;cAAI;;YAAA;UAGP;AACD,iBAAA,CAAA,GAAO,KAAK,mBAAmB,QAAQ,KAAK,OAAO,IAAI,CAAC,CAAC;;;IAC1D;AAEK,IAAAA,UAAA,UAAA,qBAAN,SACE,MACA,0BAAyC;AAAzC,UAAA,6BAAA,QAAA;AAAA,mCAAyC;MAAA;;;;;;AAEzC,kBAAI,KAAK,UAAU;AACjB,uBAAO;kBAAA;;gBAAA;cACR;AACD,kBAAI,MAAM;AACR;kBACE,KAAK,aAAa,KAAK;kBACvB;kBAAI;;gBAAA;cAGP;mBAEG,CAAC;AAAD,uBAAyB,CAAA,GAAA,CAAA;AAC3B,qBAAM,CAAA,GAAA,KAAK,iBAAiB,cAAc,IAAI,CAAC;;AAA/C,cAAAF,IAAA,KAAA;;;AAGF,qBAAO,CAAA,GAAA,KAAK,MAAM,WAAA;AAAA,uBAAA,UAAA,OAAA,QAAA,QAAA,WAAA;;;sBAChB,KAAA;AAAA,+BAAA,CAAA,GAAM,KAAK,uBAAuB,IAA2B,CAAC;;AAA9D,wBAAAA,IAAA,KAAA;AACA,6BAAK,oBAAmB;;;;;;;gBACzB,CAAA;cAAA,CAAA,CAAC;;;;IACH;AAEK,IAAAE,UAAA,UAAA,UAAN,WAAA;;;;;AAEE,qBAAM,CAAA,GAAA,KAAK,iBAAiB,cAAc,IAAI,CAAC;;AAA/C,cAAAF,IAAA,KAAA;oBAEI,KAAK,8BAA8B,KAAK;AAAxC,uBAA8D,CAAA,GAAA,CAAA;AAChE,qBAAA,CAAA,GAAM,KAAK,iBAAiB,IAAI,CAAC;;AAAjC,cAAAA,IAAA,KAAA;;;AAKF,qBAAO,CAAA,GAAA,KAAK;gBAAmB;;gBAAqC;cAAI,CAAC;;;;IAC1E;AAED,IAAAE,UAAc,UAAA,iBAAd,SAAe,aAAwB;AAAvC,UAIC,QAAA;AAHC,aAAO,KAAK,MAAM,WAAA;AAAA,eAAA,UAAA,OAAA,QAAA,QAAA,WAAA;;;;AAChB,uBAAM,CAAA,GAAA,KAAK,oBAAoB,eAAe,aAAa,WAAW,CAAC,CAAC;;AAAxE,gBAAAF,IAAA,KAAA;;;;;;;QACD,CAAA;MAAA,CAAA;;AAGH,IAAAE,UAAA,UAAA,sBAAA,WAAA;AACE,UAAI,KAAK,YAAY,MAAM;AACzB,eAAO,KAAK;MACb,OAAM;AACL,eAAO,KAAK,wBAAwB,KAAK,QAAQ;MAClD;;AAGG,IAAAA,UAAgB,UAAA,mBAAtB,SAAuB,UAAgB;;;;;;AACjC,kBAAA,CAAA,CAAC,KAAK,2BAA0B;AAAhC,uBAAkC,CAAA,GAAA,CAAA;AACpC,qBAAA,CAAA,GAAM,KAAK,sBAAqB,CAAE;;AAAlC,cAAAF,IAAA,KAAA;;;AAII,+BACJ,KAAK,2BAA0B;AAIjC,kBACE,eAAe,kBACf,KAAK,yCACL;AACA,uBAAA,CAAA,GAAO,QAAQ,OACb,KAAK,cAAc,OAAM,8CAEvB,CAAA,CAAE,CACH,CACF;cACF;AAED,qBAAA,CAAA,GAAO,eAAe,iBAAiB,QAAQ,CAAC;;;;IACjD;AAED,IAAAE,UAAA,UAAA,6BAAA,WAAA;AACE,UAAI,KAAK,aAAa,MAAM;AAC1B,eAAO,KAAK;MACb,OAAM;AACL,eAAO,KAAK,wBAAwB,KAAK,QAAQ;MAClD;;AAGG,IAAAA,UAAA,UAAA,wBAAN,WAAA;;;;;YACmB,KAAA;AAAA,qBAAA,CAAA,GAAM,mBAAmB,IAAI,CAAC;;AAAzC,yBAAWF,IAA8B,KAAA;AAEzC,+BAAyC,IAAI,mBACjD,QAAQ;AAGV,kBAAI,KAAK,aAAa,MAAM;AAC1B,qBAAK,yBAAyB;cAC/B,OAAM;AACL,qBAAK,wBAAwB,KAAK,QAAQ,IAAI;cAC/C;;;;;;;;IACF;AAED,IAAAE,UAAA,UAAA,kBAAA,WAAA;AACE,aAAO,KAAK,oBAAoB,YAAY;;AAG9C,IAAAA,UAAe,UAAA,kBAAf,SAAgB,UAAsB;AACpC,WAAK,gBAAgB,IAAI,aACvB,QACA,YACC,SAA8B,CAAE;;AAIrC,IAAAA,UAAA,UAAA,qBAAA,SACE,gBACA,OACA,WAAsB;AAEtB,aAAO,KAAK,sBACV,KAAK,uBACL,gBACA,OACA,SAAS;;AAIb,IAAAA,UAAA,UAAA,yBAAA,SACE,UACA,SAAoB;AAEpB,aAAO,KAAK,iBAAiB,aAAa,UAAU,OAAO;;AAG7D,IAAAA,UAAA,UAAA,mBAAA,SACE,gBACA,OACA,WAAsB;AAEtB,aAAO,KAAK,sBACV,KAAK,qBACL,gBACA,OACA,SAAS;;AAIb,IAAAA,UAAA,UAAA,iBAAA,WAAA;AAAA,UAWC,QAAA;AAVC,aAAO,IAAI,QAAQ,SAAC,SAAS,QAAM;AACjC,YAAI,MAAK,aAAa;AACpB,kBAAO;QACR,OAAM;AACL,cAAM,gBAAc,MAAK,mBAAmB,WAAA;AAC1C,0BAAW;AACX,oBAAO;aACN,MAAM;QACV;MACH,CAAC;;AAMG,IAAAA,UAAiB,UAAA,oBAAvB,SAAwB,OAAa;;;;;;mBAC/B,KAAK;AAAL,uBAAgB,CAAA,GAAA,CAAA;AACF,qBAAA,CAAA,GAAM,KAAK,YAAY,WAAU,CAAE;;AAA7C,wBAAUF,IAAmC,KAAA;AAE7C,wBAA8B;gBAClC,YAAY;gBACZ,WAAiC;gBACjC;gBACA;;AAEF,kBAAI,KAAK,YAAY,MAAM;AACzB,wBAAQ,WAAW,KAAK;cACzB;AACD,qBAAA,CAAA,GAAM,YAAY,MAAM,OAAO,CAAC;;AAAhC,cAAAA,IAAA,KAAA;;;;;;;;;;IAEH;AAED,IAAAE,UAAA,UAAA,SAAA,WAAA;;AACE,aAAO;QACL,QAAQ,KAAK,OAAO;QACpB,YAAY,KAAK,OAAO;QACxB,SAAS,KAAK;QACd,cAAaF,MAAA,KAAK,kBAAY,QAAAA,QAAA,SAAA,SAAAA,IAAE,OAAM;;;AAIpC,IAAAE,UAAA,UAAA,mBAAN,SACE,MACA,uBAA6C;;;;;YAErB,KAAA;AAAA,qBAAA,CAAA,GAAM,KAAK,oCACjC,qBAAqB,CACtB;;AAFK,gCAAkBF,IAEvB,KAAA;AACD,qBAAO,CAAA,GAAA,SAAS,OACZ,gBAAgB,kBAAiB,IACjC,gBAAgB,eAAe,IAAI,CAAC;;;;IACzC;AAEa,IAAAE,UAAmC,UAAA,sCAAjD,SACE,uBAA6C;;;;;;AAEzC,kBAAA,CAAA,CAAC,KAAK;AAAN,uBAAgC,CAAA,GAAA,CAAA;AAC5B,yBACH,yBAAyB,aAAa,qBAAqB,KAC5D,KAAK;AACP;gBAAQ;gBAAU;gBAAI;;cAAA;AACtB,cAAAF,MAAA;AAAkC,qBAAA,CAAA,GAAM,uBAAuB;gBAC7D;gBACA,CAAC,aAAa,SAAS,oBAAoB,CAAC;gBAAC;;cAAA,CAE9C;;AAJD,cAAAA,IAAK,6BAA6B,GAAA,KAAA;AAKlC,mBAAA;AACE,qBAAA,CAAA,GAAM,KAAK,2BAA2B,eAAc,CAAE;;AADxD,iBAAK,eACH,GAAA,KAAA;;;AAGJ,qBAAO,CAAA,GAAA,KAAK,0BAA0B;;;;IACvC;AAEK,IAAAE,UAAkB,UAAA,qBAAxB,SAAyB,IAAU;;;;;;;mBAG7B,KAAK;AAAL,uBAAmB,CAAA,GAAA,CAAA;AACrB,qBAAM,CAAA,GAAA,KAAK,MAAM,WAAA;AAAA,uBAAA,UAAA,OAAA,QAAA,QAAA,WAAA;AAAA,yBAAA,YAAA,MAAA,SAAAF,KAAA;;;;;kBAAc,CAAA;gBAAA,CAAA;cAAA,CAAA,CAAC;;AAAhC,iBAAA,KAAA;;;AAGF,oBAAIA,MAAA,KAAK,kBAAc,QAAAA,QAAA,SAAA,SAAAA,IAAA,sBAAqB,IAAI;AAC9C,uBAAO,CAAA,GAAA,KAAK,YAAY;cACzB;AAED,oBAAI,KAAA,KAAK,kBAAc,QAAA,OAAA,SAAA,SAAA,GAAA,sBAAqB,IAAI;AAC9C,uBAAO,CAAA,GAAA,KAAK,YAAY;cACzB;AAED,qBAAA,CAAA,GAAO,IAAI;;;;IACZ;AAEK,IAAAE,UAAqB,UAAA,wBAA3B,SAA4B,MAAkB;;;;AAC5C,cAAI,SAAS,KAAK,aAAa;AAC7B,mBAAO,CAAA,GAAA,KAAK,MAAM,WAAA;AAAA,qBAAA,UAAA,OAAA,QAAA,QAAA,WAAA;AAAA,uBAAA,YAAA,MAAA,SAAAF,KAAA;AAAY,yBAAA,CAAA,GAAA,KAAK,uBAAuB,IAAI,CAAC;gBAAA,CAAA;cAAA,CAAA;YAAA,CAAA,CAAC;UACjE;;;;;;;IACF;AAGD,IAAAE,UAAyB,UAAA,4BAAzB,SAA0B,MAAkB;AAC1C,UAAI,SAAS,KAAK,aAAa;AAC7B,aAAK,oBAAmB;MACzB;;AAGH,IAAAA,UAAA,UAAA,OAAA,WAAA;AACE,aAAO,GAAA,OAAG,KAAK,OAAO,YAAc,GAAA,EAAA,OAAA,KAAK,OAAO,QAAM,GAAA,EAAA,OAAI,KAAK,IAAI;;AAGrE,IAAAA,UAAA,UAAA,yBAAA,WAAA;AACE,WAAK,4BAA4B;AACjC,UAAI,KAAK,aAAa;AACpB,aAAK,aAAa,uBAAsB;MACzC;;AAGH,IAAAA,UAAA,UAAA,wBAAA,WAAA;AACE,WAAK,4BAA4B;AACjC,UAAI,KAAK,aAAa;AACpB,aAAK,aAAa,sBAAqB;MACxC;;AAIH,WAAA,eAAIA,UAAY,WAAA,gBAAA;;MAAhB,KAAA,WAAA;AACE,eAAO,KAAK;;;;IACb,CAAA;AAEO,IAAAA,UAAA,UAAA,sBAAR,WAAA;;AACE,UAAI,CAAC,KAAK,gBAAgB;AACxB;MACD;AAED,WAAK,oBAAoB,KAAK,KAAK,WAAW;AAE9C,UAAM,cAAa,MAAAF,MAAA,KAAK,iBAAa,QAAAA,QAAA,SAAA,SAAAA,IAAA,SAAO,QAAA,OAAA,SAAA,KAAA;AAC5C,UAAI,KAAK,oBAAoB,YAAY;AACvC,aAAK,kBAAkB;AACvB,aAAK,sBAAsB,KAAK,KAAK,WAAW;MACjD;;AAGK,IAAAE,UAAqB,UAAA,wBAA7B,SACE,cACA,gBACA,OACA,WAAsB;AAJxB,UA+CC,QAAA;AAzCC,UAAI,KAAK,UAAU;AACjB,eAAO,WAAA;QAAA;MACR;AAED,UAAM,KACJ,OAAO,mBAAmB,aACtB,iBACA,eAAe,KAAK,KAAK,cAAc;AAE7C,UAAI,iBAAiB;AAErB,UAAM,UAAU,KAAK,iBACjB,QAAQ,QAAO,IACf,KAAK;AACT;QAAQ;QAAS;QAAI;;MAAA;AAGrB,cAAQ,KAAK,WAAA;AACX,YAAI,gBAAgB;AAClB;QACD;AACD,WAAG,MAAK,WAAW;MACrB,CAAC;AAED,UAAI,OAAO,mBAAmB,YAAY;AACxC,YAAM,gBAAc,aAAa,YAC/B,gBACA,OACA,SAAS;AAEX,eAAO,WAAA;AACL,2BAAiB;AACjB,wBAAW;QACb;MACD,OAAM;AACL,YAAM,gBAAc,aAAa,YAAY,cAAc;AAC3D,eAAO,WAAA;AACL,2BAAiB;AACjB,wBAAW;QACb;MACD;;AAQW,IAAAA,UAAsB,UAAA,yBAApC,SACE,MAAyB;;;;;AAEzB,kBAAI,KAAK,eAAe,KAAK,gBAAgB,MAAM;AACjD,qBAAK,aAAa,sBAAqB;cACxC;AACD,kBAAI,QAAQ,KAAK,2BAA2B;AAC1C,qBAAK,uBAAsB;cAC5B;AAED,mBAAK,cAAc;AAEf,kBAAA,CAAA;AAAA,uBAAI,CAAA,GAAA,CAAA;AACN,qBAAM,CAAA,GAAA,KAAK,oBAAoB,eAAe,IAAI,CAAC;;AAAnD,cAAAF,IAAA,KAAA;;YAEA,KAAA;AAAA,qBAAA,CAAA,GAAM,KAAK,oBAAoB,kBAAiB,CAAE;;AAAlD,cAAAA,IAAA,KAAA;;;;;;;;;;IAEH;AAEO,IAAAE,UAAK,UAAA,QAAb,SAAc,QAAmB;AAG/B,WAAK,aAAa,KAAK,WAAW,KAAK,QAAQ,MAAM;AACrD,aAAO,KAAK;;AAGd,WAAA,eAAYA,UAAmB,WAAA,uBAAA;MAA/B,KAAA,WAAA;AACE;UAAQ,KAAK;UAAoB;UAAI;;QAAA;AACrC,eAAO,KAAK;;;;IACb,CAAA;AAID,IAAAA,UAAa,UAAA,gBAAb,SAAc,WAAiB;AAC7B,UAAI,CAAC,aAAa,KAAK,WAAW,SAAS,SAAS,GAAG;AACrD;MACD;AACD,WAAK,WAAW,KAAK,SAAS;AAI9B,WAAK,WAAW,KAAI;AACpB,WAAK,gBAAgB,kBACnB,KAAK,OAAO,gBACZ,KAAK,eAAc,CAAE;;AAGzB,IAAAA,UAAA,UAAA,iBAAA,WAAA;AACE,aAAO,KAAK;;AAER,IAAAA,UAAA,UAAA,wBAAN,WAAA;;;;;;;;AAEQ,yBAAO,KAAA,CAAA,GACX;gBAA+B;;cAAA,IAAA,KAAK;AAGtC,kBAAI,KAAK,IAAI,QAAQ,OAAO;AAC1B;kBAAO;;gBAAA,IAAgC,KAAK,IAAI,QAAQ;cACzD;AAGwB,qBAAA,CAAA,IAAMF,MAAA,KAAK,yBACjC,aAAa;gBACZ,UAAU;cACX,CAAA,OACC,QAAAA,QAAA,SAAA,SAAAA,IAAA,oBAAmB,CAAE;;AAJnB,iCAAmB,GAIA,KAAA;AACzB,kBAAI,kBAAkB;AACpB;kBAAO;;gBAAA,IAAiC;cACzC;AAGqB,qBAAA,CAAA,GAAM,KAAK,kBAAiB,CAAE;;AAA9C,8BAAgB,GAA8B,KAAA;AACpD,kBAAI,eAAe;AACjB;kBAAO;;gBAAA,IAAoC;cAC5C;AAED,qBAAA,CAAA,GAAO,OAAO;;;;IACf;AAEK,IAAAE,UAAA,UAAA,oBAAN,WAAA;;;;;;YAC8B,KAAA;AAAA,qBAAA,CAAA,IAAMF,MAAA,KAAK,wBACpC,aAAa,EAAE,UAAU,KAAI,CAAE,OAC9B,QAAAA,QAAA,SAAA,SAAAA,IAAA,SAAQ,CAAE;;AAFR,oCAAsB,GAEd,KAAA;AACd,kBAAI,wBAAA,QAAA,wBAAmB,SAAA,SAAnB,oBAAqB,OAAO;AAK9B,yBACE,2CAA2C,OAAA,oBAAoB,KAAK,CAAE;cAEzE;AACD,qBAAA,CAAA,GAAO,wBAAA,QAAA,wBAAmB,SAAA,SAAnB,oBAAqB,KAAK;;;;IAClC;AACH,WAACE;EAAD,EAAC;;AAQK,SAAU,UAAU,MAAU;AAClC,SAAO,mBAAmB,IAAI;AAChC;AAGA,IAAA;;EAAA,WAAA;AAME,aAAAC,cAAqB,MAAkB;AAAvC,UAA2C,QAAA;AAAtB,WAAI,OAAJ;AALb,WAAQ,WAA8B;AACrC,WAAA,cAAmC,gBAC1C,SAAA,UAAQ;AAAI,eAAC,MAAK,WAAW;MAAjB,CAA0B;;AAKxC,WAAA,eAAIA,cAAI,WAAA,QAAA;MAAR,KAAA,WAAA;AACE;UAAQ,KAAK;UAAU,KAAK;UAAI;;QAAA;AAChC,eAAO,KAAK,SAAS,KAAK,KAAK,KAAK,QAAQ;;;;IAC7C,CAAA;AACH,WAACA;EAAD,EAAC;;ACnyBD,SAAS,yBAAsB;;AAC7B,UAAO,MAAAH,MAAA,SAAS,qBAAqB,MAAM,OAAI,QAAAA,QAAA,SAAA,SAAAA,IAAA,CAAC,OAAC,QAAA,OAAA,SAAA,KAAI;AACvD;AAEM,SAAU,QAAQ,KAAW;AAEjC,SAAO,IAAI,QAAQ,SAAC,SAAS,QAAM;AACjC,QAAM,KAAK,SAAS,cAAc,QAAQ;AAC1C,OAAG,aAAa,OAAO,GAAG;AAC1B,OAAG,SAAS;AACZ,OAAG,UAAU,SAAA,GAAC;AACZ,UAAM,QAAQ;QAAY;;MAAA;AAC1B,YAAM,aAAa;AACnB,aAAO,KAAK;IACd;AACA,OAAG,OAAO;AACV,OAAG,UAAU;AACb,2BAAsB,EAAG,YAAY,EAAE;EACzC,CAAC;AACH;ACNA,IAAM,2BACJ;AAEK,IAAM,qCAAqC;AAC3C,IAAM,aAAa;AAE1B,IAAA;;EAAA,WAAA;AAaE,aAAAI,6BAAY,YAAgB;AATnB,WAAI,OAAG;AAUd,WAAK,OAAO,UAAU,UAAU;;AAQ5B,IAAAA,6BAAA,UAAA,SAAN,SACE,QACA,cAAoB;AADpB,UAAA,WAAA,QAAA;AAAA,iBAAyB;MAAA;AACzB,UAAA,iBAAA,QAAA;AAAA,uBAAoB;MAAA;;AAEpB,iBAAe,gBAAgB,MAAkB;;;;AAC/C,kBAAI,CAAC,cAAc;AACjB,oBAAI,KAAK,YAAY,QAAQ,KAAK,yBAAyB,MAAM;AAC/D,yBAAA,CAAA,GAAO,KAAK,sBAAsB,OAAO;gBAC1C;AACD,oBACE,KAAK,YAAY,QACjB,KAAK,wBAAwB,KAAK,QAAQ,MAAM,QAChD;AACA,yBAAO,CAAA,GAAA,KAAK,wBAAwB,KAAK,QAAQ,EAAE,OAAO;gBAC3D;cACF;AAED,qBAAA,CAAA,GAAO,IAAI,QAAgB,SAAO,SAAS,QAAM;AAAA,uBAAA,UAAAC,QAAA,QAAA,QAAA,WAAA;;AAC/C,uCAAmB,MAAM;sBACvB,YAAmC;sBACnC,SAAoC;;qBACrC,EACE,KAAK,SAAA,UAAQ;AACZ,0BAAI,SAAS,iBAAiB,QAAW;AACvC,+BAAO,IAAI,MAAM,yCAAyC,CAAC;sBAC5D,OAAM;AACL,4BAAM,SAAS,IAAI,gBAAgB,QAAQ;AAC3C,4BAAI,KAAK,YAAY,MAAM;AACzB,+BAAK,wBAAwB;wBAC9B,OAAM;AACL,+BAAK,wBAAwB,KAAK,QAAQ,IAAI;wBAC/C;AACD,+BAAO,QAAQ,OAAO,OAAO;sBAC9B;oBACH,CAAC,EACA,MAAM,SAAA,OAAK;AACV,6BAAO,KAAK;oBACd,CAAC;;;;;;gBACJ,CAAA;cAAA,CAAA,CAAC;;;QACH;AAED,iBAAS,uBACP,SACA,SACA,QAAkC;AAElC,cAAM,aAAa,OAAO;AAC1B,cAAI,aAAa,UAAU,GAAG;AAC5B,uBAAW,WAAW,MAAM,WAAA;AAC1B,yBAAW,WACR,QAAQ,SAAS,EAAE,OAAM,CAAE,EAC3B,KAAK,SAAA,OAAK;AACT,wBAAQ,KAAK;cACf,CAAC,EACA,MAAM,WAAA;AACL,wBAAQ,UAAU;cACpB,CAAC;YACL,CAAC;UACF,OAAM;AACL,mBAAO,MAAM,wCAAwC,CAAC;UACvD;;;;AAGH,iBAAA,CAAA,GAAO,IAAI,QAAgB,SAAC,SAAS,QAAM;AACzC,4BAAgB,MAAK,IAAI,EACtB,KAAK,SAAA,SAAO;AACX,kBAAI,CAAC,gBAAgB,aAAa,OAAO,UAAU,GAAG;AACpD,uCAAuB,SAAS,SAAS,MAAM;cAChD,OAAM;AACL,oBAAI,OAAO,WAAW,aAAa;AACjC,yBACE,IAAI,MAAM,gDAAgD,CAAC;AAE7D;gBACD;AACDC,wBACW,2BAA2B,OAAO,EAC1C,KAAK,WAAA;AACJ,yCAAuB,SAAS,SAAS,MAAM;gBACjD,CAAC,EACA,MAAM,SAAA,OAAK;AACV,yBAAO,KAAK;gBACd,CAAC;cACJ;YACH,CAAC,EACA,MAAM,SAAA,OAAK;AACV,qBAAO,KAAK;YACd,CAAC;UACL,CAAC,CAAC;;;IACH;AACH,WAACF;EAAD,EAAC;;AAEK,SAAgB,sBACpB,MACA,SACA,QACA,aAAmB;AAAnB,MAAA,gBAAA,QAAA;AAAA,kBAAmB;EAAA;;;;;;AAEb,qBAAW,IAAI,4BAA4B,IAAI;;;;AAGjC,iBAAA,CAAA,GAAM,SAAS,OAAO,MAAM,CAAC;;AAA/C,4BAAkBG,IAAA,KAAA;;;;AAEA,iBAAM,CAAA,GAAA,SAAS,OAAO,QAAQ,IAAI,CAAC;;AAArD,4BAAkBA,IAAA,KAAA;;;AAEd,uBAAU,SAAA,CAAA,GAAQ,OAAO;AAC/B,cAAI,CAAC,aAAa;AAChB,mBAAO,OAAO,YAAY,EAAE,gBAAe,CAAE;UAC9C,OAAM;AACL,mBAAO,OAAO,YAAY,EAAE,eAAe,gBAAe,CAAE;UAC7D;AACD,iBAAO,OAAO,YAAY;YAAE,cAAY;;UAAA,CAA2B;AACnE,iBAAO,OAAO,YAAY;YACxB,oBAA+C;;UAChD,CAAA;AACD,iBAAA,CAAA,GAAO,UAAU;;;;AAClB;AAOK,SAAgB,oBACpB,cACA,SACA,YACA,cAA+C;;;;;;;;AAG7C,cAAA,GAAAA,MAAA,aACG,oBAAmB,OAClB,QAAAA,QAAA,SAAA,SAAAA,IAAA;YAA4D;;UAAA;AAFhE,mBAEgE,CAAA,GAAA,CAAA;AAEnC,iBAAM,CAAA,GAAA;YACjC;YACA;YACA;YACA,eAA+C;;UAAA,CAChD;;AALK,iCAAuB,GAK5B,KAAA;AACD,iBAAA,CAAA,GAAO,aAAa,cAAc,oBAAoB,CAAC;;AAEvD,iBAAO,CAAA,GAAA,aAAa,cAAc,OAAO,EAAE,MAAM,SAAM,OAAK;AAAA,mBAAA,UAAA,OAAA,QAAA,QAAA,WAAA;;;;;AACtD,wBAAA,EAAA,MAAM,SAAS,QAA+C;sBAAA;;oBAAA;AAA9D,6BAA8D,CAAA,GAAA,CAAA;AAChE,4BAAQ,IACN,GAAA,OAAG,YAAU,8HAAA,CAA8H;AAEhH,2BAAM,CAAA,GAAA;sBACjC;sBACA;sBACA;sBACA,eAA+C;;oBAAA,CAChD;;AALK,oBAAAC,wBAAuBD,IAK5B,KAAA;AACD,2BAAA,CAAA,GAAO,aAAa,cAAcC,qBAAoB,CAAC;kBAEvD,KAAA;AAAA,2BAAA,CAAA,GAAO,QAAQ,OAAO,KAAK,CAAC;;;YAE/B,CAAA;UAAA,CAAA,CAAC;;;;AAEL;AAEK,SAAgB,2BAA2B,MAAU;;;;;;AACnD,yBAAe,UAAU,IAAI;AAElB,iBAAM,CAAA,GAAA,mBAAmB,cAAc;YACtD,YAAmC;YACnC,SAAoC;;UACrC,CAAA,CAAC;;AAHI,qBAAWD,IAGf,KAAA;AAEI,mBAAS,IAAI,gBAAgB,QAAQ;AAC3C,cAAI,aAAa,YAAY,MAAM;AACjC,yBAAa,wBAAwB;UACtC,OAAM;AACL,yBAAa,wBAAwB,aAAa,QAAQ,IAAI;UAC/D;AAED,cAAI,OAAO;YAAiB;;UAAA,GAA6C;AACjE,uBAAW,IAAI,4BAA4B,YAAY;AAC7D,iBAAK,SAAS,OAAM;UACrB;;;;;;;;AACF;AC7Le,SAAA,eAAe,KAAkB,MAAmB;AAClE,MAAM,WAAW,aAAa,KAAK,MAAM;AAEzC,MAAI,SAAS,cAAa,GAAI;AAC5B,QAAM,SAAO,SAAS,aAAY;AAClC,QAAM,iBAAiB,SAAS,WAAU;AAC1C,QAAI,UAAU,gBAAgB,SAAI,QAAJ,SAAI,SAAJ,OAAQ,CAAA,CAAE,GAAG;AACzC,aAAO;IACR,OAAM;AACL;QAAM;QAAI;;MAAA;IACX;EACF;AAED,MAAM,OAAO,SAAS,WAAW,EAAE,SAAS,KAAI,CAAE;AAElD,SAAO;AACT;AAEgB,SAAA,wBACd,MACA,MAAmB;AAEnB,MAAM,eAAc,SAAA,QAAA,SAAA,SAAA,SAAA,KAAM,gBAAe,CAAA;AACzC,MAAM,aACJ,MAAM,QAAQ,WAAW,IAAI,cAAc,CAAC,WAAW,GACvD,IAAyB,YAAY;AACvC,MAAI,SAAA,QAAA,SAAI,SAAA,SAAJ,KAAM,UAAU;AAClB,SAAK,gBAAgB,KAAK,QAAQ;EACnC;AAKD,OAAK,2BAA2B,WAAW,SAAA,QAAA,SAAA,SAAA,SAAA,KAAM,qBAAqB;AACxE;SC3CgB,oBACd,MACA,KACA,SAAsC;AAEtC,MAAM,eAAe,UAAU,IAAI;AACnC;IACE,aAAa;IACb;IAAY;;EAAA;AAId;IACE,eAAe,KAAK,GAAG;IACvB;IAAY;;EAAA;AAId,MAAM,kBAAkB,CAAC,EAAC,YAAA,QAAA,YAAA,SAAA,SAAA,QAAS;AAEnC,MAAM,WAAW,gBAAgB,GAAG;AAC9B,MAAAA,MAAiB,mBAAmB,GAAG,GAArC,OAAIA,IAAA,MAAE,OAAIA,IAAA;AAClB,MAAM,UAAU,SAAS,OAAO,KAAK,IAAI,OAAA,IAAI;AAG7C,eAAa,OAAO,WAAW,EAAE,KAAK,GAAG,OAAA,UAAQ,IAAA,EAAA,OAAK,IAAI,EAAA,OAAG,SAAO,GAAA,EAAG;AACvE,eAAa,SAAS,oCAAoC;AAC1D,eAAa,iBAAiB,OAAO,OAAO;IAC1C;IACA;IACA,UAAU,SAAS,QAAQ,KAAK,EAAE;IAClC,SAAS,OAAO,OAAO,EAAE,gBAAe,CAAE;EAC3C,CAAA;AAED,MAAI,CAAC,iBAAiB;AACpB,wBAAmB;EACpB;AACH;AAEA,SAAS,gBAAgB,KAAW;AAClC,MAAM,cAAc,IAAI,QAAQ,GAAG;AACnC,SAAO,cAAc,IAAI,KAAK,IAAI,OAAO,GAAG,cAAc,CAAC;AAC7D;AAEA,SAAS,mBAAmB,KAAW;AAIrC,MAAM,WAAW,gBAAgB,GAAG;AACpC,MAAM,YAAY,mBAAmB,KAAK,IAAI,OAAO,SAAS,MAAM,CAAC;AACrE,MAAI,CAAC,WAAW;AACd,WAAO,EAAE,MAAM,IAAI,MAAM,KAAI;EAC9B;AACD,MAAM,cAAc,UAAU,CAAC,EAAE,MAAM,GAAG,EAAE,IAAG,KAAM;AACrD,MAAM,gBAAgB,qBAAqB,KAAK,WAAW;AAC3D,MAAI,eAAe;AACjB,QAAM,OAAO,cAAc,CAAC;AAC5B,WAAO,EAAE,MAAM,MAAM,UAAU,YAAY,OAAO,KAAK,SAAS,CAAC,CAAC,EAAC;EACpE,OAAM;AACC,QAAAA,MAAe,YAAY,MAAM,GAAG,GAAnC,OAAIA,IAAA,CAAA,GAAE,OAAIA,IAAA,CAAA;AACjB,WAAO,EAAE,MAAM,MAAM,UAAU,IAAI,EAAC;EACrC;AACH;AAEA,SAAS,UAAU,SAAe;AAChC,MAAI,CAAC,SAAS;AACZ,WAAO;EACR;AACD,MAAM,OAAO,OAAO,OAAO;AAC3B,MAAI,MAAM,IAAI,GAAG;AACf,WAAO;EACR;AACD,SAAO;AACT;AAEA,SAAS,sBAAmB;AAC1B,WAAS,eAAY;AACnB,QAAM,KAAK,SAAS,cAAc,GAAG;AACrC,QAAM,MAAM,GAAG;AACf,OAAG,YACD;AACF,QAAI,WAAW;AACf,QAAI,QAAQ;AACZ,QAAI,kBAAkB;AACtB,QAAI,SAAS;AACb,QAAI,QAAQ;AACZ,QAAI,SAAS;AACb,QAAI,OAAO;AACX,QAAI,SAAS;AACb,QAAI,SAAS;AACb,QAAI,YAAY;AAChB,OAAG,UAAU,IAAI,2BAA2B;AAC5C,aAAS,KAAK,YAAY,EAAE;;AAG9B,MAAI,OAAO,YAAY,eAAe,OAAO,QAAQ,SAAS,YAAY;AACxE,YAAQ,KACN,8HAE4B;EAE/B;AACD,MAAI,OAAO,WAAW,eAAe,OAAO,aAAa,aAAa;AACpE,QAAI,SAAS,eAAe,WAAW;AACrC,aAAO,iBAAiB,oBAAoB,YAAY;IACzD,OAAM;AACL,mBAAY;IACb;EACF;AACH;AC1HA,IAAA;;EAAA,WAAA;AAEE,aAAAE,gBAOW,YASA,cAAoB;AATpB,WAAU,aAAV;AASA,WAAY,eAAZ;;AAQX,IAAAA,gBAAA,UAAA,SAAA,WAAA;AACE,aAAO,UAAU,iBAAiB;;AAIpC,IAAAA,gBAAmB,UAAA,sBAAnB,SAAoB,OAAmB;AACrC,aAAO,UAAU,iBAAiB;;AAGpC,IAAAA,gBAAA,UAAA,iBAAA,SACE,OACA,UAAgB;AAEhB,aAAO,UAAU,iBAAiB;;AAGpC,IAAAA,gBAA4B,UAAA,+BAA5B,SAA6B,OAAmB;AAC9C,aAAO,UAAU,iBAAiB;;AAEtC,WAACA;EAAD,EAAC;;ACjCqB,SAAA,cACpB,MACA,SAA6B;;;AAE7B,aAAO,CAAA,GAAA,mBACL,MAGA,QAAA,8BAAA,mBAAmB,MAAM,OAAO,CAAC,CAClC;;;AACF;AAUqB,SAAA,oBACpB,MACA,SAAmC;;;AAEnC,aAAA,CAAA,GAAO,mBAGL,MAAkD,QAAA,uBAAA,OAAO,CAAC;;;AAC7D;AAIqB,SAAA,kBACpB,MACA,SAAsB;;;AAEtB,aAAA,CAAA,GAAO,mBACL,MAGA,QAAA,uBAAA,OAAO,CACR;;;AACF;AASqB,SAAAC,kBACpB,MACA,SAA+B;;;AAE/B,aAAO,CAAA,GAAA,mBACL,MAGA,QAAA,uBAAA,mBAAmB,MAAM,OAAO,CAAC,CAClC;;;AACF;AC1DqB,SAAA,mBACpB,MACA,SAAkC;;;AAElC,aAAO,CAAA,GAAA,sBAIL,MAGA,QAAA,mCAAA,mBAAmB,MAAM,OAAO,CAAC,CAClC;;;AACF;AAoDD,SAAe,YACb,MACA,SAA0B;;;AAE1B,aAAO,CAAA,GAAA,mBACL,MAGA,QAAA,4BAAA,mBAAmB,MAAM,OAAO,CAAC,CAClC;;;AACF;AAEqB,SAAAC,wBACpB,MACA,SAA2B;;;AAE3B,aAAA,CAAA,GAAO,YAAY,MAAM,OAAO,CAAC;;;AAClC;AAEqB,SAAAC,yBACpB,MACA,SAA6B;;;AAE7B,aAAA,CAAA,GAAO,YAAY,MAAM,OAAO,CAAC;;;AAClC;AAEqB,SAAAC,wBACpB,MACA,SAA2B;;;AAE3B,aAAA,CAAA,GAAO,YAAY,MAAM,OAAO,CAAC;;;AAClC;AAEqB,SAAA,qBACpB,MACA,SAAoC;;;AAEpC,aAAA,CAAA,GAAO,YAAY,MAAM,OAAO,CAAC;;;AAClC;AC/GqB,SAAAC,sBACpB,MACA,SAAmC;;;AAEnC,aAAO,CAAA,GAAA,sBAIL,MAGA,QAAA,oCAAA,mBAAmB,MAAM,OAAO,CAAC,CAClC;;;AACF;AAOqB,SAAA,8BACpB,MACA,SAA6C;;;AAE7C,aAAO,CAAA,GAAA,sBAIL,MAGA,QAAA,oCAAA,mBAAmB,MAAM,OAAO,CAAC,CAClC;;;AACF;ACxBD,IAAA;;EAAA,SAAA,QAAA;AAAyC,cAAcC,sBAAA,MAAA;AAErD,aAAAA,qBAEW,QAEA,WACT,cAES,WAA+B;AAA/B,UAAA,cAAA,QAAA;AAAA,oBAA+B;MAAA;AAP1C,UASE,QAAA,OAAA,KAAA,MAAA,YAA2B,YAAY,KACxC;AARU,YAAM,SAAN;AAEA,YAAS,YAAT;AAGA,YAAS,YAAT;;;AAMJ,IAAAA,qBAAA,wBAAP,SACE,OACA,UAAgB;AAEhB,aAAO,IAAIA;QACT;QACA;QAAQ;;MAAA;;AAML,IAAAA,qBAAA,oBAAP,SACE,OACA,SACA,UAA8B;AAA9B,UAAA,aAAA,QAAA;AAAA,mBAA8B;MAAA;AAE9B,aAAO,IAAIA,qBACT,OACA,SAAO,aAEP,QAAQ;;AAKZ,IAAAA,qBAAA,UAAA,SAAA,WAAA;AACE,aAAO;QACL,OAAO,KAAK;QACZ,UAAU,KAAK;QACf,cAAc,KAAK;QACnB,UAAU,KAAK;;;AAYZ,IAAAA,qBAAQ,WAAf,SAAgB,MAAqB;AACnC,UAAM,MAAM,OAAO,SAAS,WAAW,KAAK,MAAM,IAAI,IAAI;AAC1D,WAAI,QAAG,QAAH,QAAG,SAAA,SAAH,IAAK,WAAS,QAAG,QAAH,QAAG,SAAA,SAAH,IAAK,WAAU;AAC/B,YAAI,IAAI,iBAAY,YAAkC;AACpD,iBAAO,KAAK,sBAAsB,IAAI,OAAO,IAAI,QAAQ;QAC1D,WAAU,IAAI,iBAAY,aAA8B;AACvD,iBAAO,KAAK,kBAAkB,IAAI,OAAO,IAAI,UAAU,IAAI,QAAQ;QACpE;MACF;AACD,aAAO;;AAIH,IAAAA,qBAAmB,UAAA,sBAAzB,SAA0B,MAAkB;;;;AAC1C,kBAAQ,KAAK,cAAY;YACvB,KAAA;AACQ,wBAAqC;gBACzC,mBAAmB;gBACnB,OAAO,KAAK;gBACZ,UAAU,KAAK;gBACf,YAAmC;;;AAErC,qBAAO,CAAA,GAAA,oBACL,MACA,SAEA,sBAAA,kBAAkB,CACnB;YACH,KAAA;AACE,qBAAO,CAAA,GAAAD,sBAAoB,MAAM;gBAC/B,OAAO,KAAK;gBACZ,SAAS,KAAK;cACf,CAAA,CAAC;YACJ;AACE;gBAAM;gBAAI;;cAAA;UACb;;;;;;;IACF;AAGK,IAAAC,qBAAA,UAAA,iBAAN,SACE,MACA,SAAe;;;;AAEf,kBAAQ,KAAK,cAAY;YACvB,KAAA;AACQ,wBAAyB;gBAC7B;gBACA,mBAAmB;gBACnB,OAAO,KAAK;gBACZ,UAAU,KAAK;gBACf,YAAmC;;;AAErC,qBAAO,CAAA,GAAA,oBACL,MACA,SAEA,kBAAA,iBAAiB,CAClB;YACH,KAAA;AACE,qBAAO,CAAA,GAAA,8BAA8B,MAAM;gBACzC;gBACA,OAAO,KAAK;gBACZ,SAAS,KAAK;cACf,CAAA,CAAC;YACJ;AACE;gBAAM;gBAAI;;cAAA;UACb;;;;;;;IACF;AAGD,IAAAA,qBAA4B,UAAA,+BAA5B,SAA6B,MAAkB;AAC7C,aAAO,KAAK,oBAAoB,IAAI;;AAExC,WAACA;EAAD,EAnIyC,cAAc;;ACGjC,SAAA,cACpB,MACA,SAA6B;;;AAE7B,aAAO,CAAA,GAAA,sBACL,MAGA,QAAA,8BAAA,mBAAmB,MAAM,OAAO,CAAC,CAClC;;;AACF;AC9BD,IAAMC,oBAAkB;AA6BxB,IAAA;;EAAA,SAAA,QAAA;AAAqC,cAAcC,kBAAA,MAAA;AAAnD,aAAAA,mBAAA;AAAA,UAmJC,QAAA,WAAA,QAAA,OAAA,MAAA,MAAA,SAAA,KAAA;AA9HS,YAAY,eAAkB;;;AAG/B,IAAAA,iBAAW,cAAlB,SAAmB,QAA6B;AAC9C,UAAM,OAAO,IAAIA,iBAAgB,OAAO,YAAY,OAAO,YAAY;AAEvE,UAAI,OAAO,WAAW,OAAO,aAAa;AAExC,YAAI,OAAO,SAAS;AAClB,eAAK,UAAU,OAAO;QACvB;AAED,YAAI,OAAO,aAAa;AACtB,eAAK,cAAc,OAAO;QAC3B;AAGD,YAAI,OAAO,SAAS,CAAC,OAAO,cAAc;AACxC,eAAK,QAAQ,OAAO;QACrB;AAED,YAAI,OAAO,cAAc;AACvB,eAAK,eAAe,OAAO;QAC5B;MACF,WAAU,OAAO,cAAc,OAAO,kBAAkB;AAEvD,aAAK,cAAc,OAAO;AAC1B,aAAK,SAAS,OAAO;MACtB,OAAM;AACL;UAAK;;QAAA;MACN;AAED,aAAO;;AAIT,IAAAA,iBAAA,UAAA,SAAA,WAAA;AACE,aAAO;QACL,SAAS,KAAK;QACd,aAAa,KAAK;QAClB,QAAQ,KAAK;QACb,OAAO,KAAK;QACZ,cAAc,KAAK;QACnB,YAAY,KAAK;QACjB,cAAc,KAAK;;;AAahB,IAAAA,iBAAQ,WAAf,SAAgB,MAAqB;AACnC,UAAM,MAAM,OAAO,SAAS,WAAW,KAAK,MAAM,IAAI,IAAI;AAClD,UAAA,aAA6D,IAAnD,YAAE,eAAiD,IAArC,cAAK,OAAgC,OAAA,KAA/D,CAAA,cAAA,cAAA,CAAqC;AAC3C,UAAI,CAAC,cAAc,CAAC,cAAc;AAChC,eAAO;MACR;AAED,UAAM,OAAO,IAAIA,iBAAgB,YAAY,YAAY;AACzD,WAAK,UAAU,KAAK,WAAW;AAC/B,WAAK,cAAc,KAAK,eAAe;AACvC,WAAK,SAAS,KAAK;AACnB,WAAK,QAAQ,KAAK;AAClB,WAAK,eAAe,KAAK,gBAAgB;AACzC,aAAO;;AAIT,IAAAA,iBAAmB,UAAA,sBAAnB,SAAoB,MAAkB;AACpC,UAAM,UAAU,KAAK,aAAY;AACjC,aAAO,cAAc,MAAM,OAAO;;AAIpC,IAAAA,iBAAA,UAAA,iBAAA,SACE,MACA,SAAe;AAEf,UAAM,UAAU,KAAK,aAAY;AACjC,cAAQ,UAAU;AAClB,aAAO,cAAc,MAAM,OAAO;;AAIpC,IAAAA,iBAA4B,UAAA,+BAA5B,SAA6B,MAAkB;AAC7C,UAAM,UAAU,KAAK,aAAY;AACjC,cAAQ,aAAa;AACrB,aAAO,cAAc,MAAM,OAAO;;AAG5B,IAAAA,iBAAA,UAAA,eAAR,WAAA;AACE,UAAM,UAAgC;QACpC,YAAYD;QACZ,mBAAmB;;AAGrB,UAAI,KAAK,cAAc;AACrB,gBAAQ,eAAe,KAAK;MAC7B,OAAM;AACL,YAAM,WAAmC,CAAA;AACzC,YAAI,KAAK,SAAS;AAChB,mBAAS,UAAU,IAAI,KAAK;QAC7B;AACD,YAAI,KAAK,aAAa;AACpB,mBAAS,cAAc,IAAI,KAAK;QACjC;AACD,YAAI,KAAK,QAAQ;AACf,mBAAS,oBAAoB,IAAI,KAAK;QACvC;AAED,iBAAS,YAAY,IAAI,KAAK;AAC9B,YAAI,KAAK,SAAS,CAAC,KAAK,cAAc;AACpC,mBAAS,OAAO,IAAI,KAAK;QAC1B;AAED,gBAAQ,WAAW,YAAY,QAAQ;MACxC;AAED,aAAO;;AAEX,WAACC;EAAD,EAnJqC,cAAc;;;ACqB7B,SAAA,sBACpB,MACA,SAAqC;;;AAErC,aAAO,CAAA,GAAA,sBAIL,MAGA,QAAA,sCAAA,mBAAmB,MAAM,OAAO,CAAC,CAClC;;;AACF;AAEqB,SAAA,oBACpB,MACA,SAAmC;;;;;;AAElB,iBAAM,CAAA,GAAA,sBAIrB,MAGA,QAAA,sCAAA,mBAAmB,MAAM,OAAO,CAAC,CAClC;;AARK,qBAAWC,IAQhB,KAAA;AACD,cAAI,SAAS,gBAAgB;AAC3B,kBAAM,iBAAiB,MAAuC,4CAAA,QAAQ;UACvE;AACD,iBAAA,CAAA,GAAO,QAAQ;;;;AAChB;AAOD,IAAM,+CAA2C,KAAA,CAAA,GAG/C;EAAwD;;AAAA,IAAA;AAGpC,SAAA,6BACpB,MACA,SAAqC;;;;AAE/B,mBAAU,SAAA,SAAA,CAAA,GACX,OAAO,GAAA,EACV,WAAW,SAAQ,CAAA;AAErB,aAAA,CAAA,GAAO,sBAIL,MAAI,QAAA,sCAGJ,mBAAmB,MAAM,UAAU,GACnC,2CAA2C,CAC5C;;;AACF;ACpGD,IAAA;;EAAA,SAAA,QAAA;AAAyC,cAAcC,sBAAA,MAAA;AACrD,aAAAA,qBAAqC,QAAqC;AAA1E,UAAA,QACE,OAAA;QAAA;QAAA;QAAA;;MAAA,KACD;AAFoC,YAAM,SAAN;;;AAK9B,IAAAA,qBAAA,oBAAP,SACE,gBACA,kBAAwB;AAExB,aAAO,IAAIA,qBAAoB,EAAE,gBAAgB,iBAAgB,CAAE;;AAI9D,IAAAA,qBAAA,qBAAP,SACE,aACA,gBAAsB;AAEtB,aAAO,IAAIA,qBAAoB,EAAE,aAAa,eAAc,CAAE;;AAIhE,IAAAA,qBAAmB,UAAA,sBAAnB,SAAoB,MAAkB;AACpC,aAAO,sBAAsB,MAAM,KAAK,yBAAwB,CAAE;;AAIpE,IAAAA,qBAAA,UAAA,iBAAA,SACE,MACA,SAAe;AAEf,aAAO,oBAAoB,MAAI,SAAA,EAC7B,QAAO,GACJ,KAAK,yBAAwB,CAAE,CAAA;;AAKtC,IAAAA,qBAA4B,UAAA,+BAA5B,SAA6B,MAAkB;AAC7C,aAAO,6BAA6B,MAAM,KAAK,yBAAwB,CAAE;;AAI3E,IAAAA,qBAAA,UAAA,2BAAA,WAAA;AACQ,UAAAD,MACJ,KAAK,QADC,iBAAcA,IAAA,gBAAE,cAAWA,IAAA,aAAE,iBAAcA,IAAA,gBAAE,mBAAgBA,IAAA;AAErE,UAAI,kBAAkB,aAAa;AACjC,eAAO,EAAE,gBAAgB,YAAW;MACrC;AAED,aAAO;QACL,aAAa;QACb,MAAM;;;AAKV,IAAAC,qBAAA,UAAA,SAAA,WAAA;AACE,UAAM,MAA8B;QAClC,YAAY,KAAK;;AAEnB,UAAI,KAAK,OAAO,aAAa;AAC3B,YAAI,cAAc,KAAK,OAAO;MAC/B;AACD,UAAI,KAAK,OAAO,gBAAgB;AAC9B,YAAI,iBAAiB,KAAK,OAAO;MAClC;AACD,UAAI,KAAK,OAAO,kBAAkB;AAChC,YAAI,mBAAmB,KAAK,OAAO;MACpC;AACD,UAAI,KAAK,OAAO,gBAAgB;AAC9B,YAAI,iBAAiB,KAAK,OAAO;MAClC;AAED,aAAO;;AAIF,IAAAA,qBAAQ,WAAf,SAAgB,MAAqB;AACnC,UAAI,OAAO,SAAS,UAAU;AAC5B,eAAO,KAAK,MAAM,IAAI;MACvB;AAEK,UAAAD,MACJ,MADM,iBAAcA,IAAA,gBAAE,mBAAgBA,IAAA,kBAAE,cAAWA,IAAA,aAAE,iBAAcA,IAAA;AAErE,UACE,CAAC,oBACD,CAAC,kBACD,CAAC,eACD,CAAC,gBACD;AACA,eAAO;MACR;AAED,aAAO,IAAIC,qBAAoB;QAC7B;QACA;QACA;QACA;MACD,CAAA;;AAEL,WAACA;EAAD,EArGyC,cAAc;;ACDvD,SAAS,UAAU,MAAmB;AACpC,UAAQ,MAAI;IACV,KAAK;AACH,aAAyC;IAC3C,KAAK;AACH,aAA0C;IAC5C,KAAK;AACH,aAAwC;IAC1C,KAAK;AACH,aAAwC;IAC1C,KAAK;AACH,aAAmD;IACrD,KAAK;AACH,aAAyD;IAC3D;AACE,aAAO;EACV;AACH;AAOA,SAAS,cAAc,KAAW;AAChC,MAAM,OAAO,kBAAkB,mBAAmB,GAAG,CAAC,EAAE,MAAM;AAG9D,MAAM,iBAAiB,OACnB,kBAAkB,mBAAmB,IAAI,CAAC,EAAE,cAAc,IAC1D;AAEJ,MAAM,cAAc,kBAAkB,mBAAmB,GAAG,CAAC,EAC3D,cAAc;AAEhB,MAAM,oBAAoB,cACtB,kBAAkB,mBAAmB,WAAW,CAAC,EAAE,MAAM,IACzD;AACJ,SAAO,qBAAqB,eAAe,kBAAkB,QAAQ;AACvE;AAQA,IAAA;;EAAA,WAAA;AAiCE,aAAAC,eAAY,YAAkB;;AAC5B,UAAM,eAAe,kBAAkB,mBAAmB,UAAU,CAAC;AACrE,UAAM,UAASF,MAAA;QAAgC;;MAAA,OAAA,QAAAA,QAAA,SAAAA,MAAI;AACnD,UAAM,QAAO,KAAA;QAA6B;;MAAA,OAAA,QAAA,OAAA,SAAA,KAAI;AAC9C,UAAM,YAAY,WAAU,KAAA;QAA6B;;MAAA,OAAA,QAAA,OAAA,SAAA,KAAI,IAAI;AAEjE;QAAQ,UAAU,QAAQ;QAAS;;MAAA;AACnC,WAAK,SAAS;AACd,WAAK,YAAY;AACjB,WAAK,OAAO;AACZ,WAAK,eAAc,KAAA;QAAqC;;MAAA,OAAA,QAAA,OAAA,SAAA,KAAI;AAC5D,WAAK,gBAAe,KAAA;QAAsC;;MAAA,OAAA,QAAA,OAAA,SAAA,KAAI;AAC9D,WAAK,YAAW,KAAA;QAAkC;;MAAA,OAAA,QAAA,OAAA,SAAA,KAAI;;AAYjD,IAAAE,eAAS,YAAhB,SAAiB,MAAY;AAC3B,UAAM,aAAa,cAAc,IAAI;AACrC,UAAI;AACF,eAAO,IAAIA,eAAc,UAAU;MACpC,SAAOF,KAAA;AACN,eAAO;MACR;;AAEL,WAACE;EAAD,EAAC;;AAQK,SAAU,mBAAmB,MAAY;AAC7C,SAAO,cAAc,UAAU,IAAI;AACrC;ACrIA,IAAA;;EAAA,WAAA;AAAA,aAAAC,qBAAA;AAkBW,WAAA,aAAaA,mBAAkB;;AAoBjC,IAAAA,mBAAA,aAAP,SAAkB,OAAe,UAAgB;AAC/C,aAAO,oBAAoB,sBAAsB,OAAO,QAAQ;;AAyB3D,IAAAA,mBAAA,qBAAP,SACE,OACA,WAAiB;AAEjB,UAAM,gBAAgB,cAAc,UAAU,SAAS;AACvD;QAAQ;QAAa;;MAAA;AAErB,aAAO,oBAAoB,kBACzB,OACA,cAAc,MACd,cAAc,QAAQ;;AAtEV,IAAAA,mBAAA,cAA8C;AAI9C,IAAAA,mBAAA,gCACc;AAId,IAAAA,mBAAA,4BACU;AA+D5B,WAACA;EAAA,EA7ED;;ACGA,IAAA;;EAAA,WAAA;AAWE,aAAAC,uBAAqB,YAAkB;AAAlB,WAAU,aAAV;AATrB,WAAmB,sBAAkB;AAE7B,WAAgB,mBAAqB,CAAA;;AAc7C,IAAAA,uBAAkB,UAAA,qBAAlB,SAAmB,cAA2B;AAC5C,WAAK,sBAAsB;;AAa7B,IAAAA,uBAAmB,UAAA,sBAAnB,SAAoB,uBAAuC;AACzD,WAAK,mBAAmB;AACxB,aAAO;;AAMT,IAAAA,uBAAA,UAAA,sBAAA,WAAA;AACE,aAAO,KAAK;;AAEhB,WAACA;EAAD,EAAC;;ACdD,IAAA;;EAAA,SAAA,QAAA;AACU,cAAqBC,oBAAA,MAAA;AAD/B,aAAAA,qBAAA;AAAA,UA0BC,QAAA,WAAA,QAAA,OAAA,MAAA,MAAA,SAAA,KAAA;AArBS,YAAM,SAAa,CAAA;;;AAO3B,IAAAA,mBAAQ,UAAA,WAAR,SAAS,OAAa;AAEpB,UAAI,CAAC,KAAK,OAAO,SAAS,KAAK,GAAG;AAChC,aAAK,OAAO,KAAK,KAAK;MACvB;AACD,aAAO;;AAMT,IAAAA,mBAAA,UAAA,YAAA,WAAA;AACE,aAAW,cAAA,CAAA,GAAA,KAAK,QAAQ,IAAA;;AAE5B,WAACA;EAAD,EAzBU,qBAAqB;;AAmE/B,IAAA;;EAAA,SAAA,QAAA;AAAmC,cAAiBC,gBAAA,MAAA;AAApD,aAAAA,iBAAA;;;AAKS,IAAAA,eAAkB,qBAAzB,SAA0B,MAAqB;AAC7C,UAAM,MAAM,OAAO,SAAS,WAAW,KAAK,MAAM,IAAI,IAAI;AAC1D;QACE,gBAAgB,OAAO,kBAAkB;QAAG;;MAAA;AAG9C,aAAO,gBAAgB,YAAY,GAAG;;AAwBxC,IAAAA,eAAU,UAAA,aAAV,SAAW,QAA8B;AACvC,aAAO,KAAK,YAAW,SAAA,SAAA,CAAA,GAAM,MAAM,GAAA,EAAE,OAAO,OAAO,SAAQ,CAAA,CAAA;;AAIrD,IAAAA,eAAW,UAAA,cAAnB,SACE,QAAkE;AAElE;QAAQ,OAAO,WAAW,OAAO;QAAW;;MAAA;AAE5C,aAAO,gBAAgB,YAAW,SAAA,SAAA,CAAA,GAC7B,MAAM,GAAA,EACT,YAAY,KAAK,YACjB,cAAc,KAAK,WAAU,CAAA,CAAA;;AAS1B,IAAAA,eAAoB,uBAA3B,SACE,gBAA8B;AAE9B,aAAOA,eAAc,gCACnB,cAAwC;;AASrC,IAAAA,eAAmB,sBAA1B,SAA2B,OAAoB;AAC7C,aAAOA,eAAc,gCAClB,MAAM,cAAc,CAAA,CAAE;;AAIZ,IAAAA,eAA+B,kCAA9C,SAA+CN,KAErB;AADR,UAAA,gBAAaA,IAAA;AAE7B,UAAI,CAAC,eAAe;AAClB,eAAO;MACR;AAEK,UAAA,KAOF,eANF,eAAY,GAAA,cACZ,mBAAgB,GAAA,kBAChB,mBAAgB,GAAA,kBAChB,eAAY,GAAA,cACZ,QAAK,GAAA,OACL,aAAU,GAAA;AAEZ,UACE,CAAC,oBACD,CAAC,oBACD,CAAC,gBACD,CAAC,cACD;AACA,eAAO;MACR;AAED,UAAI,CAAC,YAAY;AACf,eAAO;MACR;AAED,UAAI;AACF,eAAO,IAAIM,eAAc,UAAU,EAAE,YAAY;UAC/C,SAAS;UACT,aAAa;UACb;UACA;QACD,CAAA;MACF,SAAQ,GAAG;AACV,eAAO;MACR;;AAEL,WAACA;EAAD,EAnHmC,iBAAiB;;ACjEpD,IAAA;;EAAA,SAAA,QAAA;AAA0C,cAAiBC,uBAAA,MAAA;AAOzD,aAAAA,wBAAA;aACE,OAA0B;QAAA;QAAA;;MAAA,KAAA;;AAerB,IAAAA,sBAAU,aAAjB,SAAkB,aAAmB;AACnC,aAAO,gBAAgB,YAAY;QACjC,YAAYA,sBAAqB;QACjC,cAAcA,sBAAqB;QACnC;MACD,CAAA;;AAQI,IAAAA,sBAAoB,uBAA3B,SACE,gBAA8B;AAE9B,aAAOA,sBAAqB,2BAC1B,cAAwC;;AAUrC,IAAAA,sBAAmB,sBAA1B,SAA2B,OAAoB;AAC7C,aAAOA,sBAAqB,2BACzB,MAAM,cAAc,CAAA,CAAE;;AAIZ,IAAAA,sBAA0B,6BAAzC,SAA0CP,KAEhB;AADR,UAAA,gBAAaA,IAAA;AAE7B,UAAI,CAAC,iBAAiB,EAAE,sBAAsB,gBAAgB;AAC5D,eAAO;MACR;AAED,UAAI,CAAC,cAAc,kBAAkB;AACnC,eAAO;MACR;AAED,UAAI;AACF,eAAOO,sBAAqB,WAAW,cAAc,gBAAgB;MACtE,SAAO,IAAA;AACN,eAAO;MACR;;AArEa,IAAAA,sBAAA,0BACQ;AAER,IAAAA,sBAAA,cAAkD;AAoEpE,WAACA;IAzEyC,iBAAiB;;ACG3D,IAAA;;EAAA,SAAA,QAAA;AAAwC,cAAiBC,qBAAA,MAAA;AAMvD,aAAAA,sBAAA;AAAA,UAAA,QACE,OAAA;QAAA;QAAA;;MAAA,KAED;AADC,YAAK,SAAS,SAAS;;;AAgBlB,IAAAA,oBAAA,aAAP,SACE,SACA,aAA2B;AAE3B,aAAO,gBAAgB,YAAY;QACjC,YAAYA,oBAAmB;QAC/B,cAAcA,oBAAmB;QACjC;QACA;MACD,CAAA;;AAQI,IAAAA,oBAAoB,uBAA3B,SACE,gBAA8B;AAE9B,aAAOA,oBAAmB,2BACxB,cAAwC;;AASrC,IAAAA,oBAAmB,sBAA1B,SAA2B,OAAoB;AAC7C,aAAOA,oBAAmB,2BACvB,MAAM,cAAc,CAAA,CAAE;;AAIZ,IAAAA,oBAA0B,6BAAzC,SAA0CR,KAEhB;AADR,UAAA,gBAAaA,IAAA;AAE7B,UAAI,CAAC,eAAe;AAClB,eAAO;MACR;AAEK,UAAA,KACJ,eADM,eAAY,GAAA,cAAE,mBAAgB,GAAA;AAEtC,UAAI,CAAC,gBAAgB,CAAC,kBAAkB;AAEtC,eAAO;MACR;AAED,UAAI;AACF,eAAOQ,oBAAmB,WAAW,cAAc,gBAAgB;MACpE,SAAO,IAAA;AACN,eAAO;MACR;;AA5Ea,IAAAA,oBAAA,wBAA0D;AAE1D,IAAAA,oBAAA,cAA8C;AA4EhE,WAACA;IAhFuC,iBAAiB;;ACAzD,IAAA;;EAAA,SAAA,QAAA;AAAwC,cAAiBC,qBAAA,MAAA;AAMvD,aAAAA,sBAAA;aACE,OAAwB;QAAA;QAAA;;MAAA,KAAA;;AAQnB,IAAAA,oBAAU,aAAjB,SAAkB,aAAmB;AACnC,aAAO,gBAAgB,YAAY;QACjC,YAAYA,oBAAmB;QAC/B,cAAcA,oBAAmB;QACjC;MACD,CAAA;;AAQI,IAAAA,oBAAoB,uBAA3B,SACE,gBAA8B;AAE9B,aAAOA,oBAAmB,2BACxB,cAAwC;;AAUrC,IAAAA,oBAAmB,sBAA1B,SAA2B,OAAoB;AAC7C,aAAOA,oBAAmB,2BACvB,MAAM,cAAc,CAAA,CAAE;;AAIZ,IAAAA,oBAA0B,6BAAzC,SAA0CT,KAEhB;AADR,UAAA,gBAAaA,IAAA;AAE7B,UAAI,CAAC,iBAAiB,EAAE,sBAAsB,gBAAgB;AAC5D,eAAO;MACR;AAED,UAAI,CAAC,cAAc,kBAAkB;AACnC,eAAO;MACR;AAED,UAAI;AACF,eAAOS,oBAAmB,WAAW,cAAc,gBAAgB;MACpE,SAAO,IAAA;AACN,eAAO;MACR;;AA7Da,IAAAA,oBAAA,wBAA0D;AAE1D,IAAAA,oBAAA,cAA8C;AA6DhE,WAACA;IAjEuC,iBAAiB;;ACrCzD,IAAM,kBAAkB;AAKxB,IAAA;;EAAA,SAAA,QAAA;AAAwC,cAAcC,qBAAA,MAAA;AAEpD,aACEA,oBAAA,YACiB,cAAoB;AAFvC,UAAA,QAIE,OAAM,KAAA,MAAA,YAAY,UAAU,KAC7B;AAHkB,YAAY,eAAZ;;;AAMnB,IAAAA,oBAAmB,UAAA,sBAAnB,SAAoB,MAAkB;AACpC,UAAM,UAAU,KAAK,aAAY;AACjC,aAAO,cAAc,MAAM,OAAO;;AAIpC,IAAAA,oBAAA,UAAA,iBAAA,SACE,MACA,SAAe;AAEf,UAAM,UAAU,KAAK,aAAY;AACjC,cAAQ,UAAU;AAClB,aAAO,cAAc,MAAM,OAAO;;AAIpC,IAAAA,oBAA4B,UAAA,+BAA5B,SAA6B,MAAkB;AAC7C,UAAM,UAAU,KAAK,aAAY;AACjC,cAAQ,aAAa;AACrB,aAAO,cAAc,MAAM,OAAO;;AAIpC,IAAAA,oBAAA,UAAA,SAAA,WAAA;AACE,aAAO;QACL,cAAc,KAAK;QACnB,YAAY,KAAK;QACjB,cAAc,KAAK;;;AAahB,IAAAA,oBAAQ,WAAf,SAAgB,MAAqB;AACnC,UAAM,MAAM,OAAO,SAAS,WAAW,KAAK,MAAM,IAAI,IAAI;AAClD,UAAA,aACN,IAAG,YADe,eAClB,IAAG,cAD6B,eAChC,IAAG;AACL,UACE,CAAC,cACD,CAAC,gBACD,CAAC,gBACD,eAAe,cACf;AACA,eAAO;MACR;AAED,aAAO,IAAIA,oBAAmB,YAAY,YAAY;;AAQjD,IAAAA,oBAAA,UAAP,SAAe,YAAoB,cAAoB;AACrD,aAAO,IAAIA,oBAAmB,YAAY,YAAY;;AAGhD,IAAAA,oBAAA,UAAA,eAAR,WAAA;AACE,aAAO;QACL,YAAY;QACZ,mBAAmB;QACnB,cAAc,KAAK;;;AAGzB,WAACA;EAAD,EAlFwC,cAAc;;ACRtD,IAAM,uBAAuB;AAO7B,IAAA;;EAAA,SAAA,QAAA;AAAsC,cAAqBC,mBAAA,MAAA;AAKzD,aAAAA,kBAAY,YAAkB;AAC5B;QACE,WAAW,WAAW,oBAAoB;QAAC;;MAAA;AAG7C,aAAA,OAAA,KAAA,MAAM,UAAU,KAAC;;AAmBZ,IAAAA,kBAAoB,uBAA3B,SACE,gBAA8B;AAE9B,aAAOA,kBAAiB,+BACtB,cAAwC;;AAUrC,IAAAA,kBAAmB,sBAA1B,SAA2B,OAAoB;AAC7C,aAAOA,kBAAiB,+BACrB,MAAM,cAAc,CAAA,CAAE;;AAQpB,IAAAA,kBAAkB,qBAAzB,SAA0B,MAAqB;AAC7C,UAAM,aAAa,mBAAmB,SAAS,IAAI;AACnD;QAAQ;QAAU;;MAAA;AAClB,aAAO;;AAGM,IAAAA,kBAA8B,iCAA7C,SAA8CX,KAEpB;AADR,UAAA,gBAAaA,IAAA;AAE7B,UAAI,CAAC,eAAe;AAClB,eAAO;MACR;AAEK,UAAA,KAA+B,eAA7B,eAAY,GAAA,cAAE,aAAU,GAAA;AAEhC,UAAI,CAAC,gBAAgB,CAAC,YAAY;AAChC,eAAO;MACR;AAED,UAAI;AACF,eAAO,mBAAmB,QAAQ,YAAY,YAAY;MAC3D,SAAQ,GAAG;AACV,eAAO;MACR;;AAEL,WAACW;EAAD,EA9EsC,qBAAqB;;ACgD3D,IAAA;;EAAA,SAAA,QAAA;AAAyC,cAAiBC,sBAAA,MAAA;AAMxD,aAAAA,uBAAA;aACE,OAAyB;QAAA;QAAA;;MAAA,KAAA;;AASpB,IAAAA,qBAAA,aAAP,SAAkB,OAAe,QAAc;AAC7C,aAAO,gBAAgB,YAAY;QACjC,YAAYA,qBAAoB;QAChC,cAAcA,qBAAoB;QAClC,YAAY;QACZ,kBAAkB;MACnB,CAAA;;AAQI,IAAAA,qBAAoB,uBAA3B,SACE,gBAA8B;AAE9B,aAAOA,qBAAoB,2BACzB,cAAwC;;AAUrC,IAAAA,qBAAmB,sBAA1B,SAA2B,OAAoB;AAC7C,aAAOA,qBAAoB,2BACxB,MAAM,cAAc,CAAA,CAAE;;AAIZ,IAAAA,qBAA0B,6BAAzC,SAA0CZ,KAEhB;AADR,UAAA,gBAAaA,IAAA;AAE7B,UAAI,CAAC,eAAe;AAClB,eAAO;MACR;AACK,UAAA,KACJ,eADM,mBAAgB,GAAA,kBAAE,mBAAgB,GAAA;AAE1C,UAAI,CAAC,oBAAoB,CAAC,kBAAkB;AAC1C,eAAO;MACR;AAED,UAAI;AACF,eAAOY,qBAAoB,WAAW,kBAAkB,gBAAgB;MACzE,SAAO,IAAA;AACN,eAAO;MACR;;AAhEa,IAAAA,qBAAA,yBAA6D;AAE7D,IAAAA,qBAAA,cAAgD;AAgElE,WAACA;IApEwC,iBAAiB;;ACvCpC,SAAA,OACpB,MACA,SAAsB;;;AAEtB,aAAO,CAAA,GAAA,sBACL,MAGA,QAAA,uBAAA,mBAAmB,MAAM,OAAO,CAAC,CAClC;;;AACF;ACvBD,IAAA;;EAAA,WAAA;AAQE,aAAAC,oBAAY,QAA4B;AACtC,WAAK,OAAO,OAAO;AACnB,WAAK,aAAa,OAAO;AACzB,WAAK,iBAAiB,OAAO;AAC7B,WAAK,gBAAgB,OAAO;;AAGjB,IAAAA,oBAAoB,uBAAjC,SACE,MACA,eACA,iBACA,aAA4B;AAA5B,UAAA,gBAAA,QAAA;AAAA,sBAA4B;MAAA;;;;;;AAEf,qBAAM,CAAA,GAAA,SAAS,qBAC1B,MACA,iBACA,WAAW,CACZ;;AAJK,qBAAOb,IAIZ,KAAA;AACK,2BAAa,sBAAsB,eAAe;AAClD,yBAAW,IAAIa,oBAAmB;gBACtC;gBACA;gBACA,gBAAgB;gBAChB;cACD,CAAA;AACD,qBAAA,CAAA,GAAO,QAAQ;;;;IAChB;AAEY,IAAAA,oBAAA,gBAAb,SACE,MACA,eACA,UAAmC;;;;;;AAEnC,qBAAM,CAAA,GAAA,KAAK;gBAAyB;;gBAAuB;cAAI,CAAC;;AAAhE,cAAAb,IAAA,KAAA;AACM,2BAAa,sBAAsB,QAAQ;AACjD,qBAAO,CAAA,GAAA,IAAIa,oBAAmB;gBAC5B;gBACA;gBACA,gBAAgB;gBAChB;cACD,CAAA,CAAC;;;;IACH;AACH,WAACA;EAAD,EAAC;;AAED,SAAS,sBACP,UAAyB;AAEzB,MAAI,SAAS,YAAY;AACvB,WAAO,SAAS;EACjB;AAED,MAAI,iBAAiB,UAAU;AAC7B,WAAwB;EACzB;AAED,SAAO;AACT;AC5DM,SAAgB,kBAAkB,MAAU;;;;;;;AAC1C,yBAAe,UAAU,IAAI;AACnC,iBAAM,CAAA,GAAA,aAAa,sBAAsB;;AAAzC,aAAA,KAAA;AACA,eAAIb,MAAA,aAAa,iBAAW,QAAAA,QAAA,SAAA,SAAAA,IAAE,aAAa;AAEzC,mBAAO,CAAA,GAAA,IAAI,mBAAmB;cAC5B,MAAM,aAAa;cACnB,YAAY;cACZ,eAAoC;;YACrC,CAAA,CAAC;UACH;AACgB,iBAAM,CAAA,GAAA,OAAO,cAAc;YAC1C,mBAAmB;UACpB,CAAA,CAAC;;AAFI,qBAAW,GAEf,KAAA;AACqB,iBAAM,CAAA,GAAA,mBAAmB,qBAC9C,cAAY,UAEZ,UACA,IAAI,CACL;;AALK,2BAAiB,GAKtB,KAAA;AACD,iBAAM,CAAA,GAAA,aAAa,mBAAmB,eAAe,IAAI,CAAC;;AAA1D,aAAA,KAAA;AACA,iBAAA,CAAA,GAAO,cAAc;;;;AACtB;AC1BD,IAAA;;EAAA,SAAA,QAAA;AACU,cAAac,mBAAA,MAAA;AAKrB,aAAAA,kBACE,MACA,OACS,eACA,MAAmB;AAJ9B,UAeC,QAAA;;AATC,cAAA,OAAA,KAAA,MAAM,MAAM,MAAM,MAAM,OAAO,KAAC;AAHvB,YAAa,gBAAb;AACA,YAAI,OAAJ;AAIT,aAAO,eAAe,OAAMA,kBAAiB,SAAS;AACtD,YAAK,aAAa;QAChB,SAAS,KAAK;QACd,WAAUd,MAAA,KAAK,cAAQ,QAAAA,QAAA,SAAAA,MAAI;QAC3B,iBAAiB,MAAM,WAAY;QACnC;;;;AAIG,IAAAc,kBAAsB,yBAA7B,SACE,MACA,OACA,eACA,MAAmB;AAEnB,aAAO,IAAIA,kBAAiB,MAAM,OAAO,eAAe,IAAI;;AAEhE,WAACA;EAAD,EA9BU,aAAa;;AAgCjB,SAAU,8CACd,MACA,eACA,YACA,MAAmB;AAEnB,MAAM,kBACJ,kBAA8C,mBAC1C,WAAW,6BAA6B,IAAI,IAC5C,WAAW,oBAAoB,IAAI;AAEzC,SAAO,gBAAgB,MAAM,SAAA,OAAK;AAChC,QAAI,MAAM,SAAS,QAAA;MAAA;;IAAA,GAAsC;AACvD,YAAM,iBAAiB,uBACrB,MACA,OACA,eACA,IAAI;IAEP;AAED,UAAM;EACR,CAAC;AACH;AC/DM,SAAU,oBACd,cAAiB;AAEjB,SAAO,IAAI,IACT,aACG,IAAI,SAACd,KAAc;AAAZ,QAAA,aAAUA,IAAA;AAAO,WAAA;EAAA,CAAU,EAClC,OAAO,SAAA,KAAG;AAAI,WAAA,CAAC,CAAC;EAAF,CAAK,CAAa;AAEvC;ACOsB,SAAA,OAAO,MAAY,YAAkB;;;;;;;AACnD,yBAAe,mBAAmB,IAAI;AAC5C,iBAAM,CAAA,GAAA,oBAAoB,MAAM,cAAc,UAAU,CAAC;;AAAzD,aAAA,KAAA;AACmC,UAAAA,MAAA;AAAqB,eAAA,CAAA,aAAa,IAAI;;AAC9D,iBAAA,CAAA,GAAM,aAAa,WAAU,CAAE;;AADb,iBAAM,CAAA,GAAAA,IAAA,MAAA,QAAA,GAAA,OAAA,EACjC,GAAO,UAAE,GAA+B,KAAA,GACxC,GAAc,iBAAE,CAAC,UAAU,SAC3B;;AAHM,6BAAqB,GAG3B,KAAA,EAHsB;AAKlB,0BAAgB,oBAAoB,oBAAoB,CAAA,CAAE;AAEhE,uBAAa,eAAe,aAAa,aAAa,OAAO,SAAA,IAAE;AAC7D,mBAAA,cAAc,IAAI,GAAG,UAAU;UAA/B,CAAgC;AAElC,cAAI,CAAC,cAAc;YAAG;;UAAA,GAAoB;AACxC,yBAAa,cAAc;UAC5B;AAED,iBAAM,CAAA,GAAA,aAAa,KAAK,sBAAsB,YAAY,CAAC;;AAA3D,aAAA,KAAA;AACA,iBAAA,CAAA,GAAO,YAAY;;;;AACpB;SAEqBe,QACpB,MACA,YACA,iBAAuB;AAAvB,MAAA,oBAAA,QAAA;AAAA,sBAAuB;EAAA;;;;;;AAEA,UAAAf,MAAA;gBACrB,IAAI;AACJ,gBAAA,KAAA,YAAW;AAAe,eAAA,CAAA,KAAK,IAAI;AAAE,iBAAA,CAAA,GAAM,KAAK,WAAU,CAAE;;AAF7C,iBAAM,CAAA,GAAAA,IAAA,MAAA,QAAA,GAAA,OAAA;YAErB,GAAqC,MAAA,IAAA,GAAA,OAAA,CAAA,GAAA,KAAA,CAAuB,CAAC,CAAA;YAC7D;UAAe,CAAA,CAAA,CAChB;;AAJK,qBAAW,GAIhB,KAAA;AACD,iBAAO,CAAA,GAAA,mBAAmB,cAAc,MAA0B,QAAA,QAAQ,CAAC;;;;AAC5E;SAEqB,oBACpB,UACA,MACA,UAAgB;;;;;QAEhB,KAAA;AAAA,iBAAA,CAAA,GAAM,qBAAqB,IAAI,CAAC;;AAAhC,UAAAA,IAAA,KAAA;AACM,wBAAc,oBAAoB,KAAK,YAAY;AAEnD,iBACJ,aAAa,QACV,4BACD;AACJ,kBAAQ,YAAY,IAAI,QAAQ,MAAM,UAAU,KAAK,MAAM,IAAI;;;;;;;;AAChE;SC1DqB,gBACpB,MACA,YACA,iBAAuB;AAAvB,MAAA,oBAAA,QAAA;AAAA,sBAAuB;EAAA;;;;;;AAEf,iBAAS,KAAI;AACf,0BAAa;;;;AAGA,iBAAA,CAAA,GAAM,qBACrB,MACA,8CACE,MACA,eACA,YACA,IAAI,GAEN,eAAe,CAChB;;AATK,qBAAWA,IAShB,KAAA;AACD;YAAQ,SAAS;YAAS;YAAI;;UAAA;AACxB,mBAAS,YAAY,SAAS,OAAO;AAC3C;YAAQ;YAAQ;YAAI;;UAAA;AAEP,oBAAY,OAAM;AAC/B;YAAQ,KAAK,QAAQ;YAAS;YAAI;;UAAA;AAElC,iBAAO,CAAA,GAAA,mBAAmB,cAAc,MAAM,eAAe,QAAQ,CAAC;;;AAGtE,eAAK,QAAmB,QAAnB,QAAC,SAAA,SAAD,IAAqB,UAAS,QAAA;YAAA;;UAAA,GAAsC;AACvE;cAAM;cAAI;;YAAA;UACX;AACD,gBAAM;;;;;;;;;AAET;SChCqB,sBACpB,MACA,YACA,iBAAuB;AAAvB,MAAA,oBAAA,QAAA;AAAA,sBAAuB;EAAA;;;;;;AAEjB,0BAAa;AACF,iBAAM,CAAA,GAAA,8CACrB,MACA,eACA,UAAU,CACX;;AAJK,qBAAWA,IAIhB,KAAA;AACsB,iBAAM,CAAA,GAAA,mBAAmB,qBAC9C,MACA,eACA,QAAQ,CACT;;AAJK,2BAAiBA,IAItB,KAAA;eAEG,CAAC;AAAD,mBAAgB,CAAA,GAAA,CAAA;AAClB,iBAAM,CAAA,GAAA,KAAK,mBAAmB,eAAe,IAAI,CAAC;;AAAlD,UAAAA,IAAA,KAAA;;QAEF,KAAA;AAAA,iBAAA,CAAA,GAAO,cAAc;;;;AACtB;AAaqB,SAAA,qBACpB,MACA,YAA0B;;;AAE1B,aAAO,CAAA,GAAA,sBAAsB,UAAU,IAAI,GAAG,UAAU,CAAC;;;AAC1D;AAaqB,SAAA,mBACpB,MACA,YAA0B;;;;;;AAEpB,yBAAe,mBAAmB,IAAI;AAE5C,iBAAM,CAAA,GAAA,oBAAoB,OAAO,cAAc,WAAW,UAAU,CAAC;;AAArE,UAAAA,IAAA,KAAA;AAEA,iBAAA,CAAA,GAAOe,QAAM,cAAc,UAAU,CAAC;;;;AACvC;AAeqB,SAAA,6BACpB,MACA,YAA0B;;;AAE1B,aAAO,CAAA,GAAA,gBAAgB,mBAAmB,IAAI,GAAmB,UAAU,CAAC;;;AAC7E;AC7EqB,SAAAC,wBACpB,MACA,SAAqC;;;AAErC,aAAO,CAAA,GAAA,sBAIL,MAGA,QAAA,sCAAA,mBAAmB,MAAM,OAAO,CAAC,CAClC;;;AACF;ACNqB,SAAA,sBACpB,MACA,aAAmB;;;;;;AAEb,yBAAe,UAAU,IAAI;AACD,iBAAM,CAAA,GAAAC,wBAAmB,cAAc;YACvE,OAAO;YACP,mBAAmB;UACpB,CAAA,CAAC;;AAHI,qBAA4BjB,IAGhC,KAAA;AACW,iBAAM,CAAA,GAAA,mBAAmB,qBACpC,cAEA,UAAA,QAAQ,CACT;;AAJK,iBAAOA,IAIZ,KAAA;AACD,iBAAM,CAAA,GAAA,aAAa,mBAAmB,KAAK,IAAI,CAAC;;AAAhD,UAAAA,IAAA,KAAA;AACA,iBAAA,CAAA,GAAO,IAAI;;;;AACZ;ACzBD,IAAA;;EAAA,WAAA;AAKE,aAA+BkB,qBAAA,UAAoB,UAAuB;AAA3C,WAAQ,WAAR;AAC7B,WAAK,MAAM,SAAS;AACpB,WAAK,iBAAiB,IAAI,KAAK,SAAS,UAAU,EAAE,YAAW;AAC/D,WAAK,cAAc,SAAS;;AAGvB,IAAAA,qBAAA,sBAAP,SACE,MACA,YAAyB;AAEzB,UAAI,eAAe,YAAY;AAC7B,eAAO,yBAAyB,oBAAoB,MAAM,UAAU;MACrE,WAAU,cAAc,YAAY;AACnC,eAAO,wBAAwB,oBAAoB,MAAM,UAAU;MACpE;AACD,aAAO;QAAM;QAAI;;MAAA;;AAErB,WAACA;EAAD,EAAC;;AAED,IAAA;;EAAA,SAAA,QAAA;AACU,cAAmBC,2BAAA,MAAA;AAK3B,aAAAA,0BAAoB,UAA4B;AAAhD,UACE,QAAA,OAAA,KAAA,MAAA,SAAsB,QAAQ,KAE/B;AADC,YAAK,cAAc,SAAS;;;AAGvB,IAAAA,0BAAA,sBAAP,SACE,OACA,YAAyB;AAEzB,aAAO,IAAIA,0BAAyB,UAAgC;;AAExE,WAACA;EAAD,EAhBU,mBAAmB;;AAiB7B,IAAA;;EAAA,SAAA,QAAA;AACU,cAAmBC,0BAAA,MAAA;AAG3B,aAAAA,yBAAoB,UAA2B;AAC7C,aAAA,OAAA,KAAA,MAAA,QAAqB,QAAQ,KAAC;;AAGzB,IAAAA,yBAAA,sBAAP,SACE,OACA,YAAyB;AAEzB,aAAO,IAAIA,yBAAwB,UAA+B;;AAEtE,WAACA;EAAD,EAbU,mBAAmB;;SCpDb,gCACd,MACA,SACA,oBAAsC;;AAEtC;MACEpB,MAAA,mBAAmB,SAAK,QAAAA,QAAA,SAAA,SAAAA,IAAA,UAAS;IACjC;IAAI;;EAAA;AAGN;IACE,OAAO,mBAAmB,sBAAsB,eAC9C,mBAAmB,kBAAkB,SAAS;IAChD;IAAI;;EAAA;AAIN,UAAQ,cAAc,mBAAmB;AACzC,UAAQ,oBAAoB,mBAAmB;AAC/C,UAAQ,qBAAqB,mBAAmB;AAEhD,MAAI,mBAAmB,KAAK;AAC1B;MACE,mBAAmB,IAAI,SAAS,SAAS;MACzC;MAAI;;IAAA;AAGN,YAAQ,cAAc,mBAAmB,IAAI;EAC9C;AAED,MAAI,mBAAmB,SAAS;AAC9B;MACE,mBAAmB,QAAQ,YAAY,SAAS;MAChD;MAAI;;IAAA;AAGN,YAAQ,oBAAoB,mBAAmB,QAAQ;AACvD,YAAQ,4BACN,mBAAmB,QAAQ;AAC7B,YAAQ,qBAAqB,mBAAmB,QAAQ;EACzD;AACH;ACTA,SAAe,sBAAsB,MAAU;;;;;;AACvC,yBAAe,UAAU,IAAI;AAC/B,cAAA,CAAA,aAAa,2BAA0B;AAAvC,mBAAyC,CAAA,GAAA,CAAA;AAC3C,iBAAA,CAAA,GAAM,aAAa,sBAAqB,CAAE;;AAA1C,UAAAA,IAAA,KAAA;;;;;;;;;;AAEH;SAoCqB,uBACpB,MACA,OACA,oBAAuC;;;;;;AAEjC,yBAAe,UAAU,IAAI;AAC7B,oBAA+C;YACnD,aAA+C;YAC/C;YACA,YAAmC;;;AAErC,cAAI,oBAAoB;AACtB,4CAAgC,cAAc,SAAS,kBAAkB;UAC1E;AACD,iBAAM,CAAA,GAAA,oBACJ,cACA,SAAO,cAEPqB,wBAAqC,CACtC;;AALD,UAAArB,IAAA,KAAA;;;;;;;;AAMD;SAWqB,qBACpB,MACA,SACA,aAAmB;;;;;QAEnB,KAAA;AAAA,iBAAA,CAAA,GAAMsB,cACW,mBAAmB,IAAI,GAAG;YACvC;YACA;WACD,EACA,MAAM,SAAM,OAAK;AAAA,mBAAA,UAAA,OAAA,QAAA,QAAA,WAAA;;AAChB,oBACE,MAAM,SACN,QAAA;kBAAA;;gBAAA,GACA;AACA,uBAAK,sBAAsB,IAAI;gBAChC;AAED,sBAAM;;YACP,CAAA;UAAA,CAAA,CAAC;;AAdJ,UAAAtB,IAAA,KAAA;;;;;;;;AAgBD;AAUqB,SAAA,gBACpB,MACA,SAAe;;;;QAEf,KAAA;AAAA,iBAAA,CAAA,GAAMuB,kBAAwB,mBAAmB,IAAI,GAAG,EAAE,QAAO,CAAE,CAAC;;AAApE,UAAAvB,IAAA,KAAA;;;;;;;;AACD;AAYqB,SAAA,gBACpB,MACA,SAAe;;;;;;AAET,wBAAc,mBAAmB,IAAI;AAC1B,iBAAM,CAAA,GAAAwB,cAAsB,aAAa,EAAE,QAAO,CAAE,CAAC;;AAAhE,qBAAWxB,IAAqD,KAAA;AAQhE,sBAAY,SAAS;AAC3B;YAAQ;YAAW;YAAW;;UAAA;AAC9B,kBAAQ,WAAS;YACf,KAAA;AACE;YACF,KAAA;AACE;gBAAQ,SAAS;gBAAU;gBAAW;;cAAA;AACtC;YACF,KAAA;AACE;gBAAQ,SAAS;gBAAS;gBAAW;;cAAA;YAEvC;AACE;gBAAQ,SAAS;gBAAO;gBAAW;;cAAA;UACtC;AAGG,4BAA8C;AAClD,cAAI,SAAS,SAAS;AACpB,8BAAkB,oBAAoB,oBACpC,UAAU,WAAW,GACrB,SAAS,OAAO;UAEnB;AAED,iBAAO,CAAA,GAAA;YACL,MAAM;cACJ,QACG,SAAS,gBAA2D,4BACjE,SAAS,WACT,SAAS,UAAU;cACzB,gBACG,SAAS,gBAA2D,4BACjE,SAAS,QACT,SAAS,aAAa;cAC5B;YACD;YACD;WACD;;;;AACF;AAYqB,SAAA,wBACpB,MACA,MAAY;;;;;;AAEK,iBAAM,CAAA,GAAA,gBAAgB,mBAAmB,IAAI,GAAG,IAAI,CAAC;;AAA9D,iBAASA,IAAqD,KAAA,EAA1D;AAEZ,iBAAO,CAAA,GAAA,KAAK,KAAM;;;;AACnB;SAmBqB,+BACpB,MACA,OACA,UAAgB;;;;;;AAEV,yBAAe,UAAU,IAAI;AAC7B,oBAAyB;YAC7B,mBAAmB;YACnB;YACA;YACA,YAAmC;;;AAE/B,2BAA2C,oBAC/C,cACA,SAAO,kBAEP,MAAM;AAES,iBAAA,CAAA,GAAM,eAAe,MAAM,SAAA,OAAK;AAC/C,gBACE,MAAM,SAAS,QAAA;cAAA;;YAAA,GACf;AACA,mBAAK,sBAAsB,IAAI;YAChC;AAED,kBAAM;UACR,CAAC,CAAC;;AARI,qBAAWA,IAQf,KAAA;AAEqB,iBAAM,CAAA,GAAA,mBAAmB,qBAC9C,cAEA,UAAA,QAAQ,CACT;;AAJK,2BAAiBA,IAItB,KAAA;AACD,iBAAM,CAAA,GAAA,aAAa,mBAAmB,eAAe,IAAI,CAAC;;AAA1D,UAAAA,IAAA,KAAA;AAEA,iBAAA,CAAA,GAAO,cAAc;;;;AACtB;SAoBe,2BACd,MACA,OACA,UAAgB;AAHlB,MAiBC,QAAA;AAZC,SAAO,qBACL,mBAAmB,IAAI,GACvB,kBAAkB,WAAW,OAAO,QAAQ,CAAC,EAC7C,MAAM,SAAM,OAAK;AAAA,WAAA,UAAA,OAAA,QAAA,QAAA,WAAA;;AACjB,YACE,MAAM,SAAS,QAAA;UAAA;;QAAA,GACf;AACA,eAAK,sBAAsB,IAAI;QAChC;AAED,cAAM;;IACP,CAAA;EAAA,CAAA;AACH;SCtQsB,sBACpB,MACA,OACA,oBAAsC;;AAQtC,aAAS,sBACPyB,UACAC,qBAAsC;AAEtC;QACEA,oBAAmB;QACnB;QAAY;;MAAA;AAGd,UAAIA,qBAAoB;AACtB,wCACE,cACAD,UACAC,mBAAkB;MAErB;;;;;;AArBG,yBAAe,UAAU,IAAI;AAC7B,oBAAkC;YACtC,aAA6C;YAC7C;YACA,YAAmC;;;AAmBrC,gCAAsB,SAAS,kBAAkB;AACjD,iBAAM,CAAA,GAAA,oBACJ,cACA,SAAO,cAEPC,uBAAyB,CAC1B;;AALD,UAAA3B,IAAA,KAAA;;;;;;;;AAMD;AAUe,SAAA,sBAAsB,MAAY,WAAiB;AACjE,MAAM,gBAAgB,cAAc,UAAU,SAAS;AACvD,UAAO,kBAAA,QAAA,kBAAa,SAAA,SAAb,cAAe,eAAS;AACjC;SAuCsB,oBACpB,MACA,OACA,WAAkB;;;;AAEZ,oBAAc,mBAAmB,IAAI;AACrC,mBAAa,kBAAkB,mBACnC,OACA,aAAa,eAAc,CAAE;AAI/B;QACE,WAAW,eAAe,YAAY,YAAY;QAClD;QAAW;;MAAA;AAGb,aAAA,CAAA,GAAO,qBAAqB,aAAa,UAAU,CAAC;;;AACrD;ACjJqB,SAAA,cACpB,MACA,SAA6B;;;AAE7B,aAAO,CAAA,GAAA,mBACL,MAGA,QAAA,8BAAA,mBAAmB,MAAM,OAAO,CAAC,CAClC;;;AACF;ACOqB,SAAA,2BACpB,MACA,OAAa;;;;;;AAKP,wBAAc,eAAc,IAAK,eAAc,IAAK;AACpD,oBAAgC;YACpC,YAAY;YACZ;;AAGwB,iBAAM,CAAA,GAAA,cAC9B,mBAAmB,IAAI,GACvB,OAAO,CACR;;AAHO,0BAAkBA,IAGzB,KAAA,EAHoB;AAKrB,iBAAO,CAAA,GAAA,iBAAiB,CAAA,CAAE;;;;AAC3B;AAgCqB,SAAA,sBACpB,MACA,oBAA8C;;;;;;AAExC,yBAAe,mBAAmB,IAAI;AAC5B,iBAAA,CAAA,GAAM,KAAK,WAAU,CAAE;;AAAjC,oBAAUA,IAAuB,KAAA;AACjC,oBAAkC;YACtC,aAA6C;YAC7C;;AAEF,cAAI,oBAAoB;AACtB,4CACE,aAAa,MACb,SACA,kBAAkB;UAErB;AAEiB,iBAAM,CAAA,GAAA4B,wBAA0B,aAAa,MAAM,OAAO,CAAC;;AAArE,kBAAU5B,IAA2D,KAAA,EAAhE;AAET,cAAA,EAAA,UAAU,KAAK;AAAf,mBAAoB,CAAA,GAAA,CAAA;AACtB,iBAAA,CAAA,GAAM,KAAK,OAAM,CAAE;;AAAnB,UAAAA,IAAA,KAAA;;;;;;;;;;AAEH;SAoCqB,wBACpB,MACA,UACA,oBAA8C;;;;;;AAExC,yBAAe,mBAAmB,IAAI;AAC5B,iBAAA,CAAA,GAAM,KAAK,WAAU,CAAE;;AAAjC,oBAAUA,IAAuB,KAAA;AACjC,oBAA2C;YAC/C,aAAwD;YACxD;YACA;;AAEF,cAAI,oBAAoB;AACtB,4CACE,aAAa,MACb,SACA,kBAAkB;UAErB;AAEiB,iBAAM,CAAA,GAAA6B,qBAAyB,aAAa,MAAM,OAAO,CAAC;;AAApE,kBAAU7B,IAA0D,KAAA,EAA/D;AAET,cAAA,EAAA,UAAU,KAAK;AAAf,mBAAoB,CAAA,GAAA,CAAA;AAGtB,iBAAA,CAAA,GAAM,KAAK,OAAM,CAAE;;AAAnB,UAAAA,IAAA,KAAA;;;;;;;;;;AAEH;AC5JqB,SAAA8B,gBACpB,MACA,SAA6B;;;AAE7B,aAAA,CAAA,GAAO,mBACL,MAGA,QAAA,uBAAA,OAAO,CACR;;;AACF;ACNqB,SAAA,cACpB,MACA9B,KAG4D;MAF1D,cAAWA,IAAA,aACD,WAAQA,IAAA;;;;;;AAGpB,cAAI,gBAAgB,UAAa,aAAa,QAAW;AACvD,mBAAO;cAAA;;YAAA;UACR;AAEK,yBAAe,mBAAmB,IAAI;AAC5B,iBAAA,CAAA,GAAM,aAAa,WAAU,CAAE;;AAAzC,oBAAU,GAA+B,KAAA;AACzC,2BAAiB;YACrB;YACA;YACA;YACA,mBAAmB;;AAEJ,iBAAA,CAAA,GAAM,qBACrB,cACA+B,gBAAiB,aAAa,MAAM,cAAc,CAAC,CACpD;;AAHK,qBAAW,GAGhB,KAAA;AAED,uBAAa,cAAc,SAAS,eAAe;AACnD,uBAAa,WAAW,SAAS,YAAY;AAGvC,6BAAmB,aAAa,aAAa,KACjD,SAAC/B,KAAc;AAAZ,gBAAA,aAAUA,IAAA;AAAO,mBAAA,eAAkC;UAAlC,CAAkC;AAExD,cAAI,kBAAkB;AACpB,6BAAiB,cAAc,aAAa;AAC5C,6BAAiB,WAAW,aAAa;UAC1C;AAED,iBAAA,CAAA,GAAM,aAAa,yBAAyB,QAAQ,CAAC;;AAArD,aAAA,KAAA;;;;;;;;AACD;AAqBe,SAAA,YAAY,MAAY,UAAgB;AACtD,SAAO,sBACL,mBAAmB,IAAI,GACvB,UACA,IAAI;AAER;AAegB,SAAA,eAAe,MAAY,aAAmB;AAC5D,SAAO,sBACL,mBAAmB,IAAI,GACvB,MACA,WAAW;AAEf;AAEA,SAAe,sBACb,MACA,OACA,UAAuB;;;;;;AAEf,iBAAS,KAAI;AACL,iBAAA,CAAA,GAAM,KAAK,WAAU,CAAE;;AAAjC,oBAAUA,IAAuB,KAAA;AACjC,oBAAsC;YAC1C;YACA,mBAAmB;;AAGrB,cAAI,OAAO;AACT,oBAAQ,QAAQ;UACjB;AAED,cAAI,UAAU;AACZ,oBAAQ,WAAW;UACpB;AAEgB,iBAAM,CAAA,GAAA,qBACrB,MACAgC,oBAAuB,MAAM,OAAO,CAAC,CACtC;;AAHK,qBAAWhC,IAGhB,KAAA;AACD,iBAAM,CAAA,GAAA,KAAK;YAAyB;;YAAuB;UAAI,CAAC;;AAAhE,UAAAA,IAAA,KAAA;;;;;;;;AACD;AC1HK,SAAU,qBACd,iBAAiC;;AAEjC,MAAI,CAAC,iBAAiB;AACpB,WAAO;EACR;AACO,MAAA,aAAe,gBAAe;AACtC,MAAM,UAAU,gBAAgB,cAC5B,KAAK,MAAM,gBAAgB,WAAW,IACtC,CAAA;AACJ,MAAM,YACJ,gBAAgB,aAChB,gBAAgB,SAAI;AACtB,MAAI,CAAC,eAAc,oBAAe,QAAf,oBAAe,SAAA,SAAf,gBAAiB,UAAS;AAC3C,QAAM,kBAAiB,MAAAA,MAAA,YAAY,gBAAgB,OAAO,OAAG,QAAAA,QAAA,SAAA,SAAAA,IAAA,cAC3D,QAAA,OAAA,SAAA,SAAA,GAAA,kBAAkB;AAEpB,QAAI,gBAAgB;AAClB,UAAM,qBACJ,mBAAuC,eACvC,mBAAoC,WAC/B,iBACD;AAEN,aAAO,IAAI,0BAA0B,WAAW,kBAAkB;IACnE;EACF;AACD,MAAI,CAAC,YAAY;AACf,WAAO;EACR;AACD,UAAQ,YAAU;IAChB,KAAA;AACE,aAAO,IAAI,2BAA2B,WAAW,OAAO;IAC1D,KAAA;AACE,aAAO,IAAI,yBAAyB,WAAW,OAAO;IACxD,KAAA;AACE,aAAO,IAAI,yBAAyB,WAAW,OAAO;IACxD,KAAA;AACE,aAAO,IAAI,0BACT,WACA,SACA,gBAAgB,cAAc,IAAI;IAEtC,KAAuB;IACvB,KAAA;AACE,aAAO,IAAI,0BAA0B,WAAW,IAAI;IACtD;AACE,aAAO,IAAI,0BAA0B,WAAW,YAAY,OAAO;EACtE;AACH;AAEA,IAAA;;EAAA,2BAAA;AACE,aAAAiC,2BACW,WACA,YACA,SAAqC;AAArC,UAAA,YAAA,QAAA;AAAA,kBAAqC,CAAA;MAAA;AAFrC,WAAS,YAAT;AACA,WAAU,aAAV;AACA,WAAO,UAAP;;AAEb,WAACA;EAAD,EAAC;;AAED,IAAA;;EAAA,SAAA,QAAA;AAAsD,cAAyBC,0CAAA,MAAA;AAC7E,aAAAA,yCACE,WACA,YACA,SACS,UAAuB;AAJlC,UAAA,QAME,OAAA,KAAA,MAAM,WAAW,YAAY,OAAO,KACrC;AAHU,YAAQ,WAAR;;;AAIb,WAACA;EAAD,EATsD,yBAAyB;;AAW/E,IAAA;;EAAA,SAAA,QAAA;AAAyC,cAAyBC,6BAAA,MAAA;AAChE,aAAYA,4BAAA,WAAoB,SAAgC;aAC9D,OAAM,KAAA,MAAA,WAAgC,gBAAA,OAAO,KAAC;;AAElD,WAACA;EAAD,EAJyC,yBAAyB;;AAMlE,IAAA;;EAAA,SAAA,QAAA;AAAuC,cAAuCC,2BAAA,MAAA;AAC5E,aAAYA,0BAAA,WAAoB,SAAgC;AAC9D,aAAA,OAAA,KAAA,MACE,WAAS,cAET,SACA,QAAO,YAAO,QAAP,YAAO,SAAA,SAAP,QAAS,WAAU,WAAW,YAAO,QAAP,YAAO,SAAA,SAAP,QAAS,QAAQ,IAAI,KAC3D;;AAEL,WAACA;EAAD,EATuC,uCAAuC;;AAW9E,IAAA;;EAAA,SAAA,QAAA;AAAuC,cAAyBC,2BAAA,MAAA;AAC9D,aAAYA,0BAAA,WAAoB,SAAgC;aAC9D,OAAM,KAAA,MAAA,WAA8B,cAAA,OAAO,KAAC;;AAEhD,WAACA;EAAD,EAJuC,yBAAyB;;AAMhE,IAAA;;EAAA,SAAA,QAAA;AAAwC,cAAuCC,4BAAA,MAAA;AAC7E,aAAAA,2BACE,WACA,SACA,YAAyB;AAEzB,aAAA,OAAA,KAAA,MAAM,WAAS,eAAsB,SAAS,UAAU,KAAC;;AAE7D,WAACA;EAAD,EARwC,uCAAuC;;AAiBzE,SAAU,sBACd,gBAA8B;AAExB,MAAAtC,MAA2B,gBAAzB,OAAIA,IAAA,MAAE,iBAAcA,IAAA;AAC5B,MAAI,KAAK,eAAe,CAAC,gBAAgB;AAGvC,WAAO;MACL,YAAY;MACZ,WAAW;MACX,SAAS;;EAEZ;AAED,SAAO,qBAAqB,cAAc;AAC5C;AC3FgB,SAAA,eACd,MACA,aAAwB;AAExB,SAAO,mBAAmB,IAAI,EAAE,eAAe,WAAW;AAC5D;AA6BM,SAAU,0BAA0B,MAAU;AAClD,SAAO,2BAA2B,IAAI;AACxC;AAyBsB,SAAA,iBACpB,MACA,UAAgB;;;;AAEV,qBAAe,UAAU,IAAI;AACnC,aAAA,CAAA,GAAO,aAAa,iBAAiB,QAAQ,CAAC;;;AAC/C;AAkBK,SAAU,iBACd,MACA,gBACA,OACA,WAAsB;AAEtB,SAAO,mBAAmB,IAAI,EAAE,iBAC9B,gBACA,OACA,SAAS;AAEb;SAWgB,uBACd,MACA,UACA,SAAoB;AAEpB,SAAO,mBAAmB,IAAI,EAAE,uBAAuB,UAAU,OAAO;AAC1E;AAgBM,SAAU,mBACd,MACA,gBACA,OACA,WAAsB;AAEtB,SAAO,mBAAmB,IAAI,EAAE,mBAC9B,gBACA,OACA,SAAS;AAEb;AAQM,SAAU,kBAAkB,MAAU;AAC1C,qBAAmB,IAAI,EAAE,kBAAiB;AAC5C;AAmBgB,SAAA,kBACd,MACA,MAAiB;AAEjB,SAAO,mBAAmB,IAAI,EAAE,kBAAkB,IAAI;AACxD;AAQM,SAAU,QAAQ,MAAU;AAChC,SAAO,mBAAmB,IAAI,EAAE,QAAO;AACzC;AAUgB,SAAA,kBAAkB,MAAY,OAAa;AACzD,MAAM,eAAe,UAAU,IAAI;AACnC,SAAO,aAAa,kBAAkB,KAAK;AAC7C;AA+EM,SAAgB,WAAW,MAAU;;;AACzC,aAAA,CAAA,GAAO,mBAAmB,IAAI,EAAE,OAAM,CAAE;;;AACzC;ACnTD,IAAA;;EAAA,WAAA;AACE,aAAAuC,wBACW,MACA,YACA,MAAmB;AAFnB,WAAI,OAAJ;AACA,WAAU,aAAV;AACA,WAAI,OAAJ;;AAGJ,IAAAA,wBAAA,eAAP,SACE,SACA,MAAmB;AAEnB,aAAO,IAAIA,wBAAsB,UAE/B,SACA,IAAI;;AAID,IAAAA,wBAAyB,4BAAhC,SACE,sBAA4B;AAE5B,aAAO,IAAIA,wBAET,UAAA,oBAAoB;;AAIxB,IAAAA,wBAAA,UAAA,SAAA,WAAA;;AACE,UAAM,MACJ,KAAK,SAAsC,WACvC,YACA;AACN,aAAO;QACL,qBAAkBvC,MAAA,CAAA,GAChBA,IAAC,GAAG,IAAG,KAAK,YACbA;;;AAIE,IAAAuC,wBAAQ,WAAf,SACE,KAA0C;;AAE1C,UAAI,QAAA,QAAA,QAAG,SAAA,SAAH,IAAK,oBAAoB;AAC3B,aAAIvC,MAAA,IAAI,wBAAkB,QAAAA,QAAA,SAAA,SAAAA,IAAE,mBAAmB;AAC7C,iBAAOuC,wBAAuB,0BAC5B,IAAI,mBAAmB,iBAAiB;QAE3C,YAAU,KAAA,IAAI,wBAAkB,QAAA,OAAA,SAAA,SAAA,GAAE,SAAS;AAC1C,iBAAOA,wBAAuB,aAC5B,IAAI,mBAAmB,OAAO;QAEjC;MACF;AACD,aAAO;;AAEX,WAACA;EAAD,EAAC;;ACnDD,IAAA;;EAAA,WAAA;AACE,aAAAC,yBACW,SACA,OACQ,gBAEmB;AAJ3B,WAAO,UAAP;AACA,WAAK,QAAL;AACQ,WAAc,iBAAd;;AAMZ,IAAAA,yBAAA,aAAP,SACE,YACA,OAA+B;AAFjC,UA4DC,QAAA;AAxDC,UAAM,OAAO,UAAU,UAAU;AACjC,UAAM,iBAAiB,MAAM,WAAW;AACxC,UAAM,SAAS,eAAe,WAAW,CAAA,GAAI,IAAI,SAAA,YAAU;AACzD,eAAA,oBAAoB,oBAAoB,MAAM,UAAU;MAAxD,CAAyD;AAG3D;QACE,eAAe;QACf;QAAI;;MAAA;AAGN,UAAM,UAAU,uBAAuB,0BACrC,eAAe,oBAAoB;AAGrC,aAAO,IAAIA,yBACT,SACA,OACA,SACE,WAAmC;AAAA,eAAA,UAAA,OAAA,QAAA,QAAA,WAAA;;;;;AAEf,uBAAM,CAAA,GAAA,UAAU,SAAS,MAAM,OAAO,CAAC;;AAArD,8BAAc,GAAuC,KAAA;AAE3D,uBAAO,eAAe;AACtB,uBAAO,eAAe;AAGhB,kCACD,SAAA,SAAA,CAAA,GAAA,cAAc,GACjB,EAAA,SAAS,YAAY,SACrB,cAAc,YAAY,aAAY,CAAA;AAIhC,gBAAAxC,MAAA,MAAM;;kBACc,KAAA;AAArB,2BAAqB,CAAA,GAAA,CAAA;kBASO,KAAA;AAA5B,2BAA4B,CAAA,GAAA,CAAA;;;cAP7B,KAAA;AAAA,uBAAA,CAAA,GAAM,mBAAmB,qBACvB,MACA,MAAM,eACN,eAAe,CAChB;;AALG,iCACJ,GAIC,KAAA;AACH,uBAAM,CAAA,GAAA,KAAK,mBAAmB,eAAe,IAAI,CAAC;;AAAlD,mBAAA,KAAA;AACA,uBAAA,CAAA,GAAO,cAAc;;AAErB;kBAAQ,MAAM;kBAAM;kBAAI;;gBAAA;AACxB,uBAAA,CAAA,GAAO,mBAAmB,cACxB,MAAM,MACN,MAAM,eACN,eAAe,CAChB;;AAED;kBAAM;kBAAI;;gBAAA;;;;;;;;;QAEf,CAAA;MAAA,CAAA;;AAIC,IAAAwC,yBAAa,UAAA,gBAAnB,SACE,iBAAyC;;;;AAEnC,sBAAY;AAClB,iBAAA,CAAA,GAAO,KAAK,eAAe,SAAS,CAAC;;;IACtC;AACH,WAACA;EAAD,EAAC;;AAYe,SAAA,uBACd,MACA,OAAuB;;AAEvB,MAAM,cAAc,mBAAmB,IAAI;AAC3C,MAAM,gBAAgB;AACtB;IACE,MAAM,WAAW;IACjB;IAAW;;EAAA;AAGb;KACExC,MAAA,cAAc,WAAW,qBAAe,QAAAA,QAAA,SAAA,SAAAA,IAAE;IAC1C;IAAW;;EAAA;AAIb,SAAO,wBAAwB,WAAW,aAAa,aAAa;AACtE;ACgCgB,SAAA,YACd,MACA,SAA2B;AAE3B,SAAO,mBACL,MAGA,QAAA,uCAAA,mBAAmB,MAAM,OAAO,CAAC;AAErC;AC1JA,IAAA;;EAAA,WAAA;AAGE,aAAAyC,qBAA6B,MAAkB;AAA/C,UAQC,QAAA;AAR4B,WAAI,OAAJ;AAF7B,WAAe,kBAAsB,CAAA;AAGnC,WAAK,UAAU,SAAA,UAAQ;AACrB,YAAI,SAAS,SAAS;AACpB,gBAAK,kBAAkB,SAAS,QAAQ,IAAI,SAAA,YAAU;AACpD,mBAAA,oBAAoB,oBAAoB,KAAK,MAAM,UAAU;UAA7D,CAA8D;QAEjE;MACH,CAAC;;AAGI,IAAAA,qBAAS,YAAhB,SAAiB,MAAkB;AACjC,aAAO,IAAIA,qBAAoB,IAAI;;AAG/B,IAAAA,qBAAA,UAAA,aAAN,WAAA;;;;;;AACS,oBAAAC,MAAA,wBAAuB;AAC5B,qBAAA,CAAA,GAAM,KAAK,KAAK,WAAU,CAAE;YAD9B,KAAA;AAAA,qBAAA,CAAA,GAAO,GAAA,MAAAA,KAAA,CACL,GAA4B,KAAA,GAC5B,KAAK,IAAI,CAAA,CACV;;;;IACF;AAEK,IAAAD,qBAAA,UAAA,SAAN,SACE,iBACA,aAA2B;;;;;;AAErB,0BAAY;AACD,qBAAA,CAAA,GAAM,KAAK,WAAU,CAAE;;AAAlC,wBAAWC,IAAA,KAAA;AACW,qBAAM,CAAA,GAAA,qBAChC,KAAK,MACL,UAAU,SAAS,KAAK,KAAK,MAAM,SAAS,WAAW,CAAC,CACzD;;AAHK,oCAAsBA,IAG3B,KAAA;AAGD,qBAAM,CAAA,GAAA,KAAK,KAAK,yBAAyB,mBAAmB,CAAC;;AAA7D,cAAAA,IAAA,KAAA;AAIA,qBAAA,CAAA,GAAO,KAAK,KAAK,OAAM,CAAE;;;;IAC1B;AAEK,IAAAD,qBAAQ,UAAA,WAAd,SAAe,WAAmC;;;;;;AAC1C,gCACJ,OAAO,cAAc,WAAW,YAAY,UAAU;AACxC,qBAAA,CAAA,GAAM,KAAK,KAAK,WAAU,CAAE;;AAAtC,wBAAUC,IAA4B,KAAA;;;;AAElB,qBAAA,CAAA,GAAM,qBAC5B,KAAK,MACL,YAAY,KAAK,KAAK,MAAM;gBAC1B;gBACA;cACD,CAAA,CAAC,CACH;;AANK,gCAAkBA,IAMvB,KAAA;AAED,mBAAK,kBAAkB,KAAK,gBAAgB,OAC1C,SAACA,KAAO;AAAL,oBAAA,MAAGA,IAAA;AAAO,uBAAA,QAAQ;cAAR,CAAuB;AAMtC,qBAAM,CAAA,GAAA,KAAK,KAAK,yBAAyB,eAAe,CAAC;;AAAzD,cAAAA,IAAA,KAAA;AACA,qBAAA,CAAA,GAAM,KAAK,KAAK,OAAM,CAAE;;AAAxB,cAAAA,IAAA,KAAA;;;;AAEA,oBAAM;;;;;;;;;IAET;AACH,WAACD;EAAD,EAAC;;AAED,IAAM,uBAAuB,oBAAI,QAAO;AAYlC,SAAU,YAAY,MAAU;AACpC,MAAM,cAAc,mBAAmB,IAAI;AAC3C,MAAI,CAAC,qBAAqB,IAAI,WAAW,GAAG;AAC1C,yBAAqB,IACnB,aACA,oBAAoB,UAAU,WAA2B,CAAC;EAE7D;AACD,SAAO,qBAAqB,IAAI,WAAW;AAC7C;;;AC/FA,IAAA;;EAAA,WAAA;AAIE,aAAAE,aAA6B,MAAkB;AAAlB,WAAI,OAAJ;AAHZ,WAAA,oBACf,oBAAI,IAAG;;AAIT,IAAAA,aAAA,UAAA,SAAA,WAAA;;AACE,WAAK,qBAAoB;AACzB,eAAOD,MAAA,KAAK,KAAK,iBAAa,QAAAA,QAAA,SAAA,SAAAA,IAAA,QAAO;;AAGjC,IAAAC,aAAQ,UAAA,WAAd,SACE,cAAsB;;;;;;AAEtB,mBAAK,qBAAoB;AACzB,qBAAA,CAAA,GAAM,KAAK,KAAK,sBAAsB;;AAAtC,cAAAD,IAAA,KAAA;AACA,kBAAI,CAAC,KAAK,KAAK,aAAa;AAC1B,uBAAA,CAAA,GAAO,IAAI;cACZ;AAEmB,qBAAM,CAAA,GAAA,KAAK,KAAK,YAAY,WAAW,YAAY,CAAC;;AAAlE,4BAAcA,IAAoD,KAAA;AACxE,qBAAA,CAAA,GAAO,EAAE,YAAW,CAAE;;;;IACvB;AAED,IAAAC,aAAoB,UAAA,uBAApB,SAAqB,UAAuB;AAC1C,WAAK,qBAAoB;AACzB,UAAI,KAAK,kBAAkB,IAAI,QAAQ,GAAG;AACxC;MACD;AAED,UAAM,cAAc,KAAK,KAAK,iBAAiB,SAAA,MAAI;AACjD,kBACG,SAA4B,QAA5B,SAAA,SAAA,SAAA,KAA8B,gBAAgB,gBAAe,IAAI;MAEtE,CAAC;AACD,WAAK,kBAAkB,IAAI,UAAU,WAAW;AAChD,WAAK,uBAAsB;;AAG7B,IAAAA,aAAuB,UAAA,0BAAvB,SAAwB,UAAuB;AAC7C,WAAK,qBAAoB;AACzB,UAAM,cAAc,KAAK,kBAAkB,IAAI,QAAQ;AACvD,UAAI,CAAC,aAAa;AAChB;MACD;AAED,WAAK,kBAAkB,OAAO,QAAQ;AACtC,kBAAW;AACX,WAAK,uBAAsB;;AAGrB,IAAAA,aAAA,UAAA,uBAAR,WAAA;AACE;QACE,KAAK,KAAK;QAAsB;;MAAA;;AAK5B,IAAAA,aAAA,UAAA,yBAAR,WAAA;AACE,UAAI,KAAK,kBAAkB,OAAO,GAAG;AACnC,aAAK,KAAK,uBAAsB;MACjC,OAAM;AACL,aAAK,KAAK,sBAAqB;MAChC;;AAEL,WAACA;EAAD,EAAC;;ACvDD,SAAS,sBACP,gBAA8B;AAE9B,UAAQ,gBAAc;IACpB,KAAA;AACE,aAAO;IACT,KAAA;AACE,aAAO;IACT,KAAA;AACE,aAAO;IACT,KAAA;AACE,aAAO;IACT;AACE,aAAO;EACV;AACH;AAGM,SAAU,aAAa,gBAA8B;AACzD,qBACE,IAAI;IAAS;IAEX,SAAC,WAAWD,KAA6C;AAAlC,UAAA,OAAIA,IAAA;AACzB,UAAM,MAAM,UAAU,YAAY,KAAK,EAAE,aAAY;AACrD,UAAM,2BACJ,UAAU,YAAyB,WAAW;AAChD,UAAM,0BACJ,UAAU,YAAkC,oBAAoB;AAC5D,UAAA,KAAyB,IAAI,SAA3B,SAAM,GAAA,QAAE,aAAU,GAAA;AAE1B,cACE,UAAU,CAAC,OAAO,SAAS,GAAG,GAE9B,mBAAA,EAAE,SAAS,IAAI,KAAI,CAAE;AAGvB,UAAM,SAAyB;QAC7B;QACA;QACA;QACA,SAA+B;QAC/B,cAA0C;QAC1C,WAAmC;QACnC,kBAAkB,kBAAkB,cAAc;;AAGpD,UAAM,eAAe,IAAI,SACvB,KACA,0BACA,yBACA,MAAM;AAER,8BAAwB,cAAc,IAAI;AAE1C,aAAO;IACT;IAED;;EAAA,EAKE;IAAgD;;EAAA,EAKhD,2BACC,SAAC,WAAW,qBAAqB,WAAS;AACxC,QAAM,uBAAuB,UAAU;MAAW;;IAAA;AAGlD,yBAAqB,WAAU;GAChC,CACF;AAGL,qBACE,IAAI;IAAS;IAEX,SAAA,WAAS;AACP,UAAM,OAAO,UACX,UAAU;QAAW;;MAAA,EAAsB,aAAY,CAAG;AAE5D,aAAQ,SAAAE,OAAQ;AAAA,eAAA,IAAI,YAAYA,KAAI;MAAC,EAAE,IAAI;IAC7C;IAED;;EAAA,EAAC;IAAoB;;EAAA,CAA4B;AAGpD,kBAAgB,MAAM,SAAS,sBAAsB,cAAc,CAAC;AAEpE,kBAAgB,MAAM,SAAS,MAAkB;AACnD;AC9Ga,IAAA,WAAW;;EAEtB,OAAO;EACP,MAAM;;AAQK,IAAA,aAAa;;EAExB,UAAU;;EAEV,QAAQ;;EAER,QAAQ;;EAER,UAAU;;EAEV,OAAO;;EAEP,SAAS;;AAQE,IAAA,eAAe;;EAE1B,YAAY;;EAEZ,gBAAgB;;EAEhB,UAAU;;EAEV,QAAQ;;EAER,QAAQ;;EAER,OAAO;;EAEP,SAAS;;AAQE,IAAA,gBAAgB;;EAE3B,MAAM;;EAEN,gBAAgB;;EAEhB,SAAS;;AAQE,IAAA,sBAAsB;;EAEjC,cAAc;;EAEd,gBAAgB;;EAEhB,eAAe;;EAEf,+BAA+B;;EAE/B,yBAAyB;;EAEzB,cAAc;;AC1EhB,IAAA;;EAAA,WAAA;AACE,aACqBC,yBAAA,kBACV,MAAqB;AADX,WAAgB,mBAAhB;AACV,WAAI,OAAJ;;AAGX,IAAAA,yBAAA,UAAA,eAAA,WAAA;AACE,UAAI;AACF,YAAI,CAAC,KAAK,SAAS;AACjB,iBAAO,QAAQ,QAAQ,KAAK;QAC7B;AACD,aAAK,QAAQ,QAAQ,uBAAuB,GAAG;AAC/C,aAAK,QAAQ,WAAW,qBAAqB;AAC7C,eAAO,QAAQ,QAAQ,IAAI;MAC5B,SAAOH,KAAA;AACN,eAAO,QAAQ,QAAQ,KAAK;MAC7B;;AAGH,IAAAG,yBAAA,UAAA,OAAA,SAAK,KAAa,OAAuB;AACvC,WAAK,QAAQ,QAAQ,KAAK,KAAK,UAAU,KAAK,CAAC;AAC/C,aAAO,QAAQ,QAAO;;AAGxB,IAAAA,yBAAI,UAAA,OAAJ,SAAiC,KAAW;AAC1C,UAAM,OAAO,KAAK,QAAQ,QAAQ,GAAG;AACrC,aAAO,QAAQ,QAAQ,OAAO,KAAK,MAAM,IAAI,IAAI,IAAI;;AAGvD,IAAAA,yBAAO,UAAA,UAAP,SAAQ,KAAW;AACjB,WAAK,QAAQ,WAAW,GAAG;AAC3B,aAAO,QAAQ,QAAO;;AAGxB,WAAA,eAAcA,yBAAO,WAAA,WAAA;MAArB,KAAA,WAAA;AACE,eAAO,KAAK,iBAAgB;;;;IAC7B,CAAA;AACH,WAACA;EAAD,EAAC;;AC7BD,SAAS,8BAA2B;AAClC,MAAM,KAAK,MAAK;AAChB,SAAO,UAAU,EAAE,KAAK,OAAO,EAAE;AACnC;AAGO,IAAM,uBAAuB;AAGpC,IAAM,gCAAgC;AAEtC,IAAA;;EAAA,SAAA,QAAA;AACU,cAAuBC,0BAAA,MAAA;AAK/B,aAAAA,2BAAA;AAAA,UACE,QAAA,OAAA;QAAA;QAAM,WAAA;AAAM,iBAAA,OAAO;QAAY;QAAA;;MAAA,KAChC;AAEgB,YAAA,oBAAoB,SACnC,OACA,MAAc;AACL,eAAA,MAAK,eAAe,OAAO,IAAI;MAAC;AAC1B,YAAS,YAA8C,CAAA;AACvD,YAAU,aAAkC,CAAA;AAGrD,YAAS,YAAe;AAGf,YAAA,8BACf,4BAA2B,KAAM,UAAS;AAE3B,YAAiB,oBAAG,iBAAgB;AAC5C,YAAqB,wBAAG;;;AAEzB,IAAAA,yBAAiB,UAAA,oBAAzB,SACE,IAA2E;AAG3E,eAA6C,KAAA,GAA3BJ,MAAA,OAAO,KAAK,KAAK,SAAS,GAA1B,KAA2BA,IAAA,QAA3B,MAA6B;AAA1C,YAAM,MAAGA,IAAA,EAAA;AAEZ,YAAM,WAAW,KAAK,QAAQ,QAAQ,GAAG;AACzC,YAAM,WAAW,KAAK,WAAW,GAAG;AAGpC,YAAI,aAAa,UAAU;AACzB,aAAG,KAAK,UAAU,QAAQ;QAC3B;MACF;;AAGK,IAAAI,yBAAA,UAAA,iBAAR,SAAuB,OAAqB,MAAY;AAAxD,UAuEC,QAAA;AAvE2C,UAAA,SAAA,QAAA;AAAA,eAAY;MAAA;AAEtD,UAAI,CAAC,MAAM,KAAK;AACd,aAAK,kBACH,SAACC,MAAa,WAA0B,UAAuB;AAC7D,gBAAK,gBAAgBA,MAAK,QAAQ;QACpC,CAAC;AAEH;MACD;AAED,UAAM,MAAM,MAAM;AAIlB,UAAI,MAAM;AAGR,aAAK,eAAc;MACpB,OAAM;AAGL,aAAK,YAAW;MACjB;AAID,UAAI,KAAK,6BAA6B;AAEpC,YAAM,gBAAc,KAAK,QAAQ,QAAQ,GAAG;AAE5C,YAAI,MAAM,aAAa,eAAa;AAClC,cAAI,MAAM,aAAa,MAAM;AAE3B,iBAAK,QAAQ,QAAQ,KAAK,MAAM,QAAQ;UACzC,OAAM;AAEL,iBAAK,QAAQ,WAAW,GAAG;UAC5B;QACF,WAAU,KAAK,WAAW,GAAG,MAAM,MAAM,YAAY,CAAC,MAAM;AAE3D;QACD;MACF;AAED,UAAM,mBAAmB,WAAA;AAGvB,YAAMC,eAAc,MAAK,QAAQ,QAAQ,GAAG;AAC5C,YAAI,CAAC,QAAQ,MAAK,WAAW,GAAG,MAAMA,cAAa;AAGjD;QACD;AACD,cAAK,gBAAgB,KAAKA,YAAW;MACvC;AAEA,UAAM,cAAc,KAAK,QAAQ,QAAQ,GAAG;AAC5C,UACE,QAAO,KACP,gBAAgB,MAAM,YACtB,MAAM,aAAa,MAAM,UACzB;AAKA,mBAAW,kBAAkB,6BAA6B;MAC3D,OAAM;AACL,yBAAgB;MACjB;;AAGK,IAAAF,yBAAA,UAAA,kBAAR,SAAwB,KAAa,OAAoB;AACvD,WAAK,WAAW,GAAG,IAAI;AACvB,UAAM,YAAY,KAAK,UAAU,GAAG;AACpC,UAAI,WAAW;AACb,iBAA4C,KAAA,GAArBJ,MAAA,MAAM,KAAK,SAAS,GAApB,KAAqBA,IAAA,QAArB,MAAuB;AAAzC,cAAM,WAAQA,IAAA,EAAA;AACjB,mBAAS,QAAQ,KAAK,MAAM,KAAK,IAAI,KAAK;QAC3C;MACF;;AAGK,IAAAI,yBAAA,UAAA,eAAR,WAAA;AAAA,UAiBC,QAAA;AAhBC,WAAK,YAAW;AAEhB,WAAK,YAAY,YAAY,WAAA;AAC3B,cAAK,kBACH,SAAC,KAAa,UAAyB,UAAuB;AAC5D,gBAAK;YACH,IAAI,aAAa,WAAW;cAC1B;cACA;cACA;aACD;;YACU;UAAI;QAEnB,CAAC;SAEF,oBAAoB;;AAGjB,IAAAA,yBAAA,UAAA,cAAR,WAAA;AACE,UAAI,KAAK,WAAW;AAClB,sBAAc,KAAK,SAAS;AAC5B,aAAK,YAAY;MAClB;;AAGK,IAAAA,yBAAA,UAAA,iBAAR,WAAA;AACE,aAAO,iBAAiB,WAAW,KAAK,iBAAiB;;AAGnD,IAAAA,yBAAA,UAAA,iBAAR,WAAA;AACE,aAAO,oBAAoB,WAAW,KAAK,iBAAiB;;AAG9D,IAAAA,yBAAA,UAAA,eAAA,SAAa,KAAa,UAA8B;AACtD,UAAI,OAAO,KAAK,KAAK,SAAS,EAAE,WAAW,GAAG;AAK5C,YAAI,KAAK,mBAAmB;AAC1B,eAAK,aAAY;QAClB,OAAM;AACL,eAAK,eAAc;QACpB;MACF;AACD,UAAI,CAAC,KAAK,UAAU,GAAG,GAAG;AACxB,aAAK,UAAU,GAAG,IAAI,oBAAI,IAAG;AAE7B,aAAK,WAAW,GAAG,IAAI,KAAK,QAAQ,QAAQ,GAAG;MAChD;AACD,WAAK,UAAU,GAAG,EAAE,IAAI,QAAQ;;AAGlC,IAAAA,yBAAA,UAAA,kBAAA,SAAgB,KAAa,UAA8B;AACzD,UAAI,KAAK,UAAU,GAAG,GAAG;AACvB,aAAK,UAAU,GAAG,EAAE,OAAO,QAAQ;AAEnC,YAAI,KAAK,UAAU,GAAG,EAAE,SAAS,GAAG;AAClC,iBAAO,KAAK,UAAU,GAAG;QAC1B;MACF;AAED,UAAI,OAAO,KAAK,KAAK,SAAS,EAAE,WAAW,GAAG;AAC5C,aAAK,eAAc;AACnB,aAAK,YAAW;MACjB;;AAKG,IAAAA,yBAAA,UAAA,OAAN,SAAW,KAAa,OAAuB;;;;YAC7C,KAAA;AAAA,qBAAA,CAAA,GAAM,OAAA,UAAM,KAAI,KAAA,MAAC,KAAK,KAAK,CAAC;;AAA5B,cAAAJ,IAAA,KAAA;AACA,mBAAK,WAAW,GAAG,IAAI,KAAK,UAAU,KAAK;;;;;;;;IAC5C;AAEK,IAAAI,yBAAI,UAAA,OAAV,SAAuC,KAAW;;;;;YAClC,KAAA;AAAA,qBAAA,CAAA,GAAM,OAAM,UAAA,KAAQ,KAAA,MAAA,GAAG,CAAC;;AAAhC,sBAAQJ,IAAwB,KAAA;AACtC,mBAAK,WAAW,GAAG,IAAI,KAAK,UAAU,KAAK;AAC3C,qBAAA,CAAA,GAAO,KAAK;;;;IACb;AAEK,IAAAI,yBAAO,UAAA,UAAb,SAAc,KAAW;;;;YACvB,KAAA;AAAA,qBAAA,CAAA,GAAM,OAAM,UAAA,QAAQ,KAAA,MAAA,GAAG,CAAC;;AAAxB,cAAAJ,IAAA,KAAA;AACA,qBAAO,KAAK,WAAW,GAAG;;;;;;;;IAC3B;AA/MM,IAAAI,yBAAI,OAAY;AAgNzB,WAACA;IAnNS,uBAAuB;;AA2N1B,IAAM,0BAAuC;AChPpD,IAAA;;EAAA,SAAA,QAAA;AACU,cAAuBG,4BAAA,MAAA;AAK/B,aAAAA,6BAAA;AACE,aAAA,OAAA;QAAA;QAAM,WAAA;AAAM,iBAAA,OAAO;QAAc;QAA0B;;MAAA,KAAA;;AAG7D,IAAAA,2BAAA,UAAA,eAAA,SAAa,MAAc,WAA+B;AAExD;;AAGF,IAAAA,2BAAA,UAAA,kBAAA,SAAgB,MAAc,WAA+B;AAE3D;;AAbK,IAAAA,2BAAI,OAAc;AAe3B,WAACA;IAlBS,uBAAuB;;AA0B1B,IAAM,4BAAyC;ACxBtC,SAAA,qBACd,MACA,kBAAmD;AAEnD,MAAI,kBAAkB;AACpB,WAAO,aAAa,gBAAgB;EACrC;AAED;IAAQ,KAAK;IAAwB;IAAI;;EAAA;AAEzC,SAAO,KAAK;AACd;ACQA,IAAA;;EAAA,SAAA,QAAA;AAA4B,cAAcC,gBAAA,MAAA;AACxC,aAAAA,eAAqB,QAAqB;AAA1C,UAAA,QACE,OAAA;QAAA;QAAA;QAAA;;MAAA,KACD;AAFoB,YAAM,SAAN;;;AAIrB,IAAAA,eAAmB,UAAA,sBAAnB,SAAoB,MAAkB;AACpC,aAAO,cAAc,MAAM,KAAK,iBAAgB,CAAE;;AAGpD,IAAAA,eAAA,UAAA,iBAAA,SACE,MACA,SAAe;AAEf,aAAO,cAAc,MAAM,KAAK,iBAAiB,OAAO,CAAC;;AAG3D,IAAAA,eAA4B,UAAA,+BAA5B,SAA6B,MAAkB;AAC7C,aAAO,cAAc,MAAM,KAAK,iBAAgB,CAAE;;AAG5C,IAAAA,eAAgB,UAAA,mBAAxB,SAAyB,SAAgB;AACvC,UAAM,UAAgC;QACpC,YAAY,KAAK,OAAO;QACxB,WAAW,KAAK,OAAO;QACvB,UAAU,KAAK,OAAO;QACtB,UAAU,KAAK,OAAO;QACtB,cAAc,KAAK,OAAO;QAC1B,mBAAmB;QACnB,qBAAqB;;AAGvB,UAAI,SAAS;AACX,gBAAQ,UAAU;MACnB;AAED,aAAO;;AAEX,WAACA;EAAD,EArC4B,cAAc;;AAuCpC,SAAU,QACd,QAAqB;AAErB,SAAO,sBACL,OAAO,MACP,IAAI,cAAc,MAAM,GACxB,OAAO,eAAe;AAE1B;AAEM,SAAU,QACd,QAAqB;AAEb,MAAA,OAAe,OAAM,MAAf,OAAS,OAAM;AAC7B;IAAQ;IAAM;IAAI;;EAAA;AAClB,SAAO,gBACL,MACA,IAAI,cAAc,MAAM,GACxB,OAAO,eAAe;AAE1B;AAEM,SAAgB,MACpB,QAAqB;;;;AAEb,aAAe,OAAX,MAAE,OAAS,OAAM;AAC7B;QAAQ;QAAM;QAAI;;MAAA;AAClB,aAAA,CAAA,GAAOC,QAAU,MAAM,IAAI,cAAc,MAAM,GAAG,OAAO,eAAe,CAAC;;;AAC1E;ACpED,IAAA;;EAAA,WAAA;AASE,aACqBC,gCAAA,MACnB,QACmB,UACT,MACS,iBAAuB;AAAvB,UAAA,oBAAA,QAAA;AAAA,0BAAuB;MAAA;AAJvB,WAAI,OAAJ;AAEA,WAAQ,WAAR;AACT,WAAI,OAAJ;AACS,WAAe,kBAAf;AAXb,WAAc,iBAA0B;AACxC,WAAY,eAAwB;AAY1C,WAAK,SAAS,MAAM,QAAQ,MAAM,IAAI,SAAS,CAAC,MAAM;;AAKxD,IAAAA,gCAAA,UAAA,UAAA,WAAA;AAAA,UAcC,QAAA;AAbC,aAAO,IAAI,QACT,SAAO,SAAS,QAAM;AAAA,eAAA,UAAA,OAAA,QAAA,QAAA,WAAA;;;;;AACpB,qBAAK,iBAAiB,EAAE,SAAS,OAAM;;;;AAGrC,gBAAAV,MAAA;AAAoB,uBAAM,CAAA,GAAA,KAAK,SAAS,YAAY,KAAK,IAAI,CAAC;;AAA9D,gBAAAA,IAAK,eAAe,GAAA,KAAA;AACpB,uBAAA,CAAA,GAAM,KAAK,YAAW,CAAE;;AAAxB,mBAAA,KAAA;AACA,qBAAK,aAAa,iBAAiB,IAAI;;;;AAEvC,qBAAK,OAAO,GAAU;;;;;;;;;QAEzB,CAAA;MAAA,CAAA;;AAIC,IAAAU,gCAAW,UAAA,cAAjB,SAAkB,OAAgB;;;;;;AACxB,4BAA4D,MAAjD,aAAE,YAA+C,MAAK,WAAzC,WAAoC,MAA5B,UAAE,WAA0B,MAAK,UAArB,QAAgB,MAAX,OAAE,OAAS,MAAK;AACzE,kBAAI,OAAO;AACT,qBAAK,OAAO,KAAK;AACjB,uBAAO;kBAAA;;gBAAA;cACR;AAEK,uBAAwB;gBAC5B,MAAM,KAAK;gBACX,YAAY;gBACZ;gBACA,UAAU,YAAY;gBACtB,UAAU,YAAY;gBACtB,MAAM,KAAK;gBACX,iBAAiB,KAAK;;;;;AAItB,cAAAV,MAAA,KAAK;AAAQ,qBAAM,CAAA,GAAA,KAAK,WAAW,IAAI,EAAE,MAAM,CAAC;;AAAhD,cAAAA,IAAA,MAAA,MAAI,CAAS,GAAmC,KAAA,CAAA,CAAA;;;;AAEhD,mBAAK,OAAO,GAAU;;;;;;;;;;IAEzB;AAED,IAAAU,gCAAO,UAAA,UAAP,SAAQ,OAAoB;AAC1B,WAAK,OAAO,KAAK;;AAGX,IAAAA,gCAAU,UAAA,aAAlB,SAAmB,MAAmB;AACpC,cAAQ,MAAI;QACV,KAAqC;QACrC,KAAA;AACE,iBAAO;QACT,KAAkC;QAClC,KAAA;AACE,iBAAO;QACT,KAAoC;QACpC,KAAA;AACE,iBAAO;QACT;AACE;YAAM,KAAK;YAAI;;UAAA;MAClB;;AAGO,IAAAA,gCAAO,UAAA,UAAjB,SAAkB,MAAmC;AACnD,kBAAY,KAAK,gBAAgB,+BAA+B;AAChE,WAAK,eAAe,QAAQ,IAAI;AAChC,WAAK,qBAAoB;;AAGjB,IAAAA,gCAAM,UAAA,SAAhB,SAAiB,OAAY;AAC3B,kBAAY,KAAK,gBAAgB,+BAA+B;AAChE,WAAK,eAAe,OAAO,KAAK;AAChC,WAAK,qBAAoB;;AAGnB,IAAAA,gCAAA,UAAA,uBAAR,WAAA;AACE,UAAI,KAAK,cAAc;AACrB,aAAK,aAAa,mBAAmB,IAAI;MAC1C;AAED,WAAK,iBAAiB;AACtB,WAAK,QAAO;;AAIhB,WAACA;EAAD,EAAC;;ACzHD,IAAM,uBAAuB;AAI7B,IAAM,qBAGF,oBAAI,IAAG;AAEX,IAAA;;EAAA,SAAA,QAAA;AAAoC,cAA8BC,iBAAA,MAAA;AAGhE,aAAAA,gBACE,MACA,UACA,iBAAuB;AAAvB,UAAA,oBAAA,QAAA;AAAA,0BAAuB;MAAA;AAHzB,UAKE,QAAA,OAAA,KAAA,MACE,MACA;;;;;;MAKC,GACD,UACA,QACA,eAAe,KAElB;AAnBD,YAAO,UAAG;;;AAyBJ,IAAAA,gBAAA,UAAA,UAAN,WAAA;;;;;;AACM,6BAAe,mBAAmB,IAAI,KAAK,KAAK,KAAI,CAAE;mBACtD,CAAC;AAAD,uBAAa,CAAA,GAAA,CAAA;;;;AAEc,qBAAM,CAAA,GAAA,kCAC/B,KAAK,UACL,KAAK,IAAI,CACV;;AAHK,mCAAqB,GAG1B,KAAA;AACc,kBAAA,CAAA;AAAA,uBAAkB,CAAA,GAAA,CAAA;AAAG,qBAAM,CAAA,GAAA,OAAA,UAAM,QAAO,KAAA,IAAA,CAAE;;AAArB,cAAAX,MAAA,GAAA,KAAA;;;AAAwB,cAAAA,MAAA;;;AAAtD,yBAA0DA;AAChE,6BAAe,WAAM;AAAA,uBAAA,QAAQ,QAAQ,QAAM;cAAtB;;;;AAErB,6BAAe,WAAM;AAAA,uBAAA,QAAQ,OAAO,GAAC;cAAhB;;;AAGvB,iCAAmB,IAAI,KAAK,KAAK,KAAI,GAAI,YAAY;;;AAKvD,kBAAI,CAAC,KAAK,iBAAiB;AACzB,mCAAmB,IAAI,KAAK,KAAK,KAAI,GAAI,WAAA;AAAM,yBAAA,QAAQ,QAAQ,IAAI;gBAAC,CAAA;cACrE;AAED,qBAAO,CAAA,GAAA,aAAY,CAAE;;;;IACtB;AAEK,IAAAW,gBAAW,UAAA,cAAjB,SAAkB,OAAgB;;;;;;AAChC,kBAAI,MAAM,SAAI,qBAAyC;AACrD,uBAAA,CAAA,GAAO,OAAM,UAAA,YAAY,KAAA,MAAA,KAAK,CAAC;cAChC,WAAU,MAAM,SAAI,WAA4B;AAE/C,qBAAK,QAAQ,IAAI;AACjB,uBAAO;kBAAA;;gBAAA;cACR;mBAEG,MAAM;AAAN,uBAAa,CAAA,GAAA,CAAA;AACF,qBAAM,CAAA,GAAA,KAAK,KAAK,mBAAmB,MAAM,OAAO,CAAC;;AAAxD,qBAAOX,IAAiD,KAAA;AAC9D,kBAAI,MAAM;AACR,qBAAK,OAAO;AACZ,uBAAA,CAAA,GAAO,OAAM,UAAA,YAAY,KAAA,MAAA,KAAK,CAAC;cAChC,OAAM;AACL,qBAAK,QAAQ,IAAI;cAClB;;;;;;;;;;IAEJ;AAEK,IAAAW,gBAAA,UAAA,cAAN,WAAA;;;;;;;;;IAAqC;AAErC,IAAAA,gBAAO,UAAA,UAAP,WAAA;IAAA;AACF,WAACA;EAAD,EA3EoC,8BAA8B;;AA6E5C,SAAA,kCACpB,UACA,MAAkB;;;;;;AAEZ,gBAAM,mBAAmB,IAAI;AAC7B,wBAAc,oBAAoB,QAAQ;AAC1C,iBAAA,CAAA,GAAM,YAAY,aAAY,CAAE;;AAAtC,cAAI,CAAEX,IAAgC,KAAA,GAAG;AACvC,mBAAA,CAAA,GAAO,KAAK;UACb;AAC2B,iBAAA,CAAA,GAAM,YAAY,KAAK,GAAG,CAAC;;AAAjD,+BAAsBA,IAA2B,KAAA,MAAM;AAC7D,iBAAA,CAAA,GAAM,YAAY,QAAQ,GAAG,CAAC;;AAA9B,UAAAA,IAAA,KAAA;AACA,iBAAA,CAAA,GAAO,kBAAkB;;;;AAC1B;AAEqB,SAAA,0BACpB,UACA,MAAkB;;;AAElB,aAAA,CAAA,GAAO,oBAAoB,QAAQ,EAAE,KAAK,mBAAmB,IAAI,GAAG,MAAM,CAAC;;;AAC5E;SAEe,yBAAsB;AACpC,qBAAmB,MAAK;AAC1B;AAEgB,SAAA,wBACd,MACA,QAAoD;AAEpD,qBAAmB,IAAI,KAAK,KAAI,GAAI,MAAM;AAC5C;AAEA,SAAS,oBACP,UAAuC;AAEvC,SAAO,aAAa,SAAS,oBAAoB;AACnD;AAEA,SAAS,mBAAmB,MAAkB;AAC5C,SAAO,oBACL,sBACA,KAAK,OAAO,QACZ,KAAK,IAAI;AAEb;SCrEsB,oBACpB,MACA,UACA,UAAgC;;;;;;AAE1B,yBAAe,UAAU,IAAI;AACnC,4BAAkB,MAAM,UAAU,qBAAqB;AAIvD,iBAAM,CAAA,GAAA,aAAa,sBAAsB;;AAAzC,UAAAY,IAAA,KAAA;AACM,6BAAmB,qBAAqB,cAAc,QAAQ;AACpE,iBAAA,CAAA,GAAM,0BAA0B,kBAAkB,YAAY,CAAC;;AAA/D,UAAAA,IAAA,KAAA;AAEA,iBAAO,CAAA,GAAA,iBAAiB;YACtB;YACA;YAAQ;;UAAA,CAET;;;;AACF;SA+CqB,4BACpB,MACA,UACA,UAAgC;;;;;;AAE1B,yBAAe,mBAAmB,IAAI;AAC5C,4BAAkB,aAAa,MAAM,UAAU,qBAAqB;AAIpE,iBAAA,CAAA,GAAM,aAAa,KAAK,sBAAsB;;AAA9C,UAAAC,IAAA,KAAA;AAEM,6BAAmB,qBAAqB,aAAa,MAAM,QAAQ;AACzE,iBAAM,CAAA,GAAA,0BAA0B,kBAAkB,aAAa,IAAI,CAAC;;AAApE,UAAAA,IAAA,KAAA;AAEgB,iBAAA,CAAA,GAAM,uBAAuB,YAAY,CAAC;;AAApD,oBAAUA,IAA0C,KAAA;AAC1D,iBAAA,CAAA,GAAO,iBAAiB,cACtB,aAAa,MACb,UAAQ,qBAER,OAAO,CACR;;;;AACF;SAuCqB,kBACpB,MACA,UACA,UAAgC;;;;;;AAE1B,yBAAe,mBAAmB,IAAI;AAC5C,4BAAkB,aAAa,MAAM,UAAU,qBAAqB;AAIpE,iBAAA,CAAA,GAAM,aAAa,KAAK,sBAAsB;;AAA9C,UAAAC,IAAA,KAAA;AAEM,6BAAmB,qBAAqB,aAAa,MAAM,QAAQ;AACzE,iBAAM,CAAA,GAAA,oBAAoB,OAAO,cAAc,SAAS,UAAU,CAAC;;AAAnE,UAAAA,IAAA,KAAA;AACA,iBAAM,CAAA,GAAA,0BAA0B,kBAAkB,aAAa,IAAI,CAAC;;AAApE,UAAAA,IAAA,KAAA;AAEgB,iBAAA,CAAA,GAAM,uBAAuB,YAAY,CAAC;;AAApD,oBAAUA,IAA0C,KAAA;AAC1D,iBAAA,CAAA,GAAO,iBAAiB,cACtB,aAAa,MACb,UAAQ,mBAER,OAAO,CACR;;;;AACF;AA0CqB,SAAA,kBACpB,MACA,UAAgC;;;;QAEhC,KAAA;AAAA,iBAAA,CAAA,GAAM,UAAU,IAAI,EAAE,sBAAsB;;AAA5C,UAAAA,IAAA,KAAA;AACA,iBAAO,CAAA,GAAA,mBAAmB,MAAM,UAAU,KAAK,CAAC;;;;AACjD;SAEqB,mBACpB,MACA,gBACA,iBAAuB;AAAvB,MAAA,oBAAA,QAAA;AAAA,sBAAuB;EAAA;;;;;;AAEjB,yBAAe,UAAU,IAAI;AAC7B,qBAAW,qBAAqB,cAAc,cAAc;AAC5D,mBAAS,IAAI,eAAe,cAAc,UAAU,eAAe;AAC1D,iBAAA,CAAA,GAAM,OAAO,QAAO,CAAE;;AAA/B,mBAASA,IAAsB,KAAA;AAEjC,cAAA,EAAA,UAAU,CAAC;AAAX,mBAA0B,CAAA,GAAA,CAAA;AAC5B,iBAAO,OAAO,KAAK;AACnB,iBAAM,CAAA,GAAA,aAAa,sBAAsB,OAAO,IAAoB,CAAC;;AAArE,UAAAA,IAAA,KAAA;AACA,iBAAM,CAAA,GAAA,aAAa,iBAAiB,MAAM,cAAc,CAAC;;AAAzD,UAAAA,IAAA,KAAA;;QAGF,KAAA;AAAA,iBAAA,CAAA,GAAO,MAAM;;;;AACd;AAED,SAAe,uBAAuB,MAAkB;;;;;;AAChD,oBAAU,iBAAiB,GAAA,OAAG,KAAK,KAAQ,KAAA,CAAA;AACjD,eAAK,mBAAmB;AACxB,iBAAM,CAAA,GAAA,KAAK,KAAK,iBAAiB,IAAI,CAAC;;AAAtC,UAAAA,IAAA,KAAA;AACA,iBAAM,CAAA,GAAA,KAAK,KAAK,sBAAsB,IAAI,CAAC;;AAA3C,UAAAA,IAAA,KAAA;AACA,iBAAA,CAAA,GAAO,OAAO;;;;AACf;AC1RD,IAAM,cAAc;AAOpB,IAAM,uBAAuB;AAO7B,IAAM,iCAAiC,mBAAmB,KAAK;AAgBzC,SAAA,gBACpB,MACA,UACA,UACA,aACA,SACA,kBAAyC;;;;;;AAEzC;YAAQ,KAAK,OAAO;YAAY;YAAI;;UAAA;AACpC;YAAQ,KAAK,OAAO;YAAQ;YAAI;;UAAA;AAE1B,mBAAuB;YAC3B,QAAQ,KAAK,OAAO;YACpB,SAAS,KAAK;YACd;YACA;YACA,GAAG;YACH;;AAGF,cAAI,oBAAoB,uBAAuB;AAC7C,qBAAS,mBAAmB,KAAK,YAAY;AAC7C,mBAAO,aAAa,SAAS,cAAc;AAC3C,gBAAI,CAAC,QAAQ,SAAS,oBAAmB,CAAE,GAAG;AAC5C,qBAAO,mBAAmB,KAAK,UAAU,SAAS,oBAAmB,CAAE;YACxE;AAGD,iBAAA,KAAA,GAA2BA,MAAA,OAAO,QAAQ,oBAAoB,CAAA,CAAE,GAArC,KAAsCA,IAAA,QAAtC,MAAwC;AAAxD,mBAAAA,IAAA,EAAA,GAAC,MAAG,GAAA,CAAA,GAAE,QAAK,GAAA,CAAA;AACpB,qBAAO,GAAG,IAAI;YACf;UACF;AAED,cAAI,oBAAoB,mBAAmB;AACnC,qBAAS,SAAS,UAAS,EAAG,OAAO,SAAA,OAAK;AAAI,qBAAA,UAAU;YAAV,CAAY;AAChE,gBAAI,OAAO,SAAS,GAAG;AACrB,qBAAO,SAAS,OAAO,KAAK,GAAG;YAChC;UACF;AAED,cAAI,KAAK,UAAU;AACjB,mBAAO,MAAM,KAAK;UACnB;AAKK,uBAAa;AACnB,eAAA,KAAA,GAAkB,KAAA,OAAO,KAAK,UAAU,GAAtB,KAAA,GAAA,QAAA,MAAyB;AAAhC,kBAAG,GAAA,EAAA;AACZ,gBAAI,WAAW,GAAG,MAAM,QAAW;AACjC,qBAAO,WAAW,GAAG;YACtB;UACF;AAGqB,iBAAA,CAAA,GAAM,KAAK,kBAAiB,CAAE;;AAA9C,0BAAgB,GAA8B,KAAA;AAC9C,kCAAwB,gBAC1B,IAAA,OAAI,gCAA8B,GAAA,EAAA,OAAI,mBAAmB,aAAa,CAAC,IACvE;AAGJ,iBAAA,CAAA,GAAO,GAAA,OAAG,eAAe,IAAI,GAAC,GAAA,EAAA,OAAI,YAAY,UAAU,EAAE,MACxD,CAAC,CACF,EAAG,OAAA,qBAAqB,CAAE;;;;AAC5B;AAED,SAAS,eAAeA,KAAwB;AAAtB,MAAA,SAAMA,IAAA;AAC9B,MAAI,CAAC,OAAO,UAAU;AACpB,WAAO,WAAA,OAAW,OAAO,YAAc,GAAA,EAAA,OAAA,WAAW;EACnD;AAED,SAAO,aAAa,QAAQ,oBAAoB;AAClD;SCpFgB,iBAAc;AAC5B,SAAO;AACT;ACxBsB,SAAA,kBACpB,MACA,SAAqC;AAArC,MAAA,YAAA,QAAA;AAAA,cAAqC,CAAA;EAAA;;;AAErC,aAAA,CAAA,GAAO,mBACL,MAGA,OAAA,gBAAA,OAAO,CACR;;;AACF;ACAD,IAAM,sBAAsB;SAKN,oBACpB,MACA,OACA,UAAsB;;;;;;;AAGd,sBAAc,eAAc,EAAE;AACtC,sBAAY,MAAM,WAAW,wCAAwC;AAC/C,iBAAA,CAAA,GAAM,cAAc,MAAM,SAAS,CAAC;;AAApD,0BAAgB,GAAoC,KAAA;AAEpD,6BAA2C,CAAA;AACjD,cAAI,OAAM,GAAI;AAEZ,6BAAiB,KAAK,IAAI,UAAU;UACrC,WAAU,WAAU,GAAI;AAEvB,6BAAiB,KAAK,IAAI,UAAU;UACrC,OAAM;AACL;cAAM;cAAI;;YAAA;UACX;AAGD,cAAI,UAAU,aAAa;AACzB,6BAAiB,gBAAgB,IAAI,UAAU;UAChD;AAGD,2BAAiB,WAAW,IAAI;AAChC,iBAAO,CAAA,GAAA,gBACL,MACA,UACA,MAAM,MACN,SACAA,MAAA,MAAM,aAAO,QAAAA,QAAA,SAAAA,MAAI,QACjB,gBAAgB,CACjB;;;;AACF;AAKK,SAAgB,gBAAgB,MAAkB;;;;;;AAC9C,sBAAc,eAAc,EAAE;AAChC,oBAAmC,CAAA;AACzC,cAAI,OAAM,GAAI;AACZ,oBAAQ,cAAc,UAAU;UACjC,WAAU,WAAU,GAAI;AACvB,oBAAQ,qBAAqB,UAAU;UACxC,OAAM;AACL;cAAM;cAAI;;YAAA;UACX;AAGD,iBAAA,CAAA,GAAM,kBAAkB,MAAM,OAAO,CAAC;;AAAtC,UAAAA,IAAA,KAAA;;;;;;;;AACD;AAEK,SAAU,iBACd,YAAkB;AAGV,MAAA,UAAY,eAAc,EAAE;AAEpC,SAAO,IAAI,QAAQ,SAAA,SAAO;AACxB,YAAQ,QAAQ,WAAW,YAAY,SAAA,uBAAqB;AAC1D,UAAI,SAAiC;AACrC,UAAI,uBAAuB;AACzB,gBAAQ,QAAQ,WAAW,QAAQ,UAAU;MAC9C,OAAM;AAEL,iBAAS,QAAQ,aAAa,KAC5B,YACA,WAAU,IAAK,WAAW,WAC1B,cAAc;MAEjB;AACD,cAAQ,MAAM;IAChB,CAAC;EACH,CAAC;AACH;SAcsB,kBACpB,MACA,eACA,QAA8B;;;;;;AAGtB,oBAAY,eAAc,EAAE;AAEhC,oBAAU,WAAa;UAAA;;;;AAEzB,iBAAA,CAAA,GAAM,IAAI,QAAc,SAAC,SAAS,QAAM;AACtC,gBAAI,eAA8B;AAGlC,qBAAS,gBAAa;;AAGpB,sBAAO;AACP,kBAAM,mBAAkBA,MAAA,QAAQ,QAAQ,gBAAY,QAAAA,QAAA,SAAA,SAAAA,IAAA;AACpD,kBAAI,OAAO,oBAAoB,YAAY;AACzC,gCAAe;cAChB;AAGD,kBAAI,QAAO,WAAM,QAAN,WAAM,SAAA,SAAN,OAAQ,WAAU,YAAY;AACvC,uBAAO,MAAK;cACb;;AAGH,qBAAS,UAAO;AACd,kBAAI,cAAc;AAEhB;cACD;AAED,6BAAe,OAAO,WAAW,WAAA;AAE/B,uBAAO;kBAAa;kBAAI;;gBAAA,CAA2C;iBAClE,mBAAmB;;AAGxB,qBAAS,oBAAiB;AACxB,mBAAI,aAAQ,QAAR,aAAQ,SAAA,SAAR,SAAU,qBAAoB,WAAW;AAC3C,wBAAO;cACR;;AAKH,0BAAc,mBAAmB,aAAa;AAG9C,qBAAS,iBAAiB,UAAU,SAAS,KAAK;AAClD,gBAAI,WAAU,GAAI;AAChB,uBAAS,iBAAiB,oBAAoB,mBAAmB,KAAK;YACvE;AAGD,sBAAU,WAAA;AACR,4BAAc,sBAAsB,aAAa;AACjD,uBAAS,oBAAoB,UAAU,SAAS,KAAK;AACrD,uBAAS,oBACP,oBACA,mBACA,KAAK;AAEP,kBAAI,cAAc;AAChB,uBAAO,aAAa,YAAY;cACjC;YACH;UACF,CAAC,CAAC;;AA5DF,UAAAA,IAAA,KAAA;;;AA8DA,kBAAO;;;;;;;;;;;;;AAEV;AAOK,SAAU,2BAA2B,MAAkB;;AAC3D,MAAM,MAAM,eAAc;AAM1B,UACE,SAAOA,MAAA,QAAG,QAAH,QAAA,SAAA,SAAA,IAAK,oBAAc,QAAAA,QAAA,SAAA,SAAAA,IAAE,eAAc,YAC1C,MAEA,iCAAA;IACE,eAAe;EAChB,CAAA;AAIH,UACE,SAAO,KAAA,QAAG,QAAH,QAAA,SAAA,SAAA,IAAK,eAAS,QAAA,OAAA,SAAA,SAAA,GAAE,iBAAgB,aACvC,MAEA,iCAAA;IACE,eAAe;EAChB,CAAA;AAIH,UACE,SAAO,MAAA,MAAA,KAAA,QAAG,QAAH,QAAG,SAAA,SAAH,IAAK,aAAS,QAAA,OAAA,SAAA,SAAA,GAAA,aAAS,QAAA,OAAA,SAAA,SAAA,GAAA,gBAAY,QAAA,OAAA,SAAA,SAAA,GAAA,aAAY,YACtD,MAEA,iCAAA;IACE,eAAe;EAChB,CAAA;AAEH,UACE,SAAO,MAAA,MAAA,KAAA,QAAG,QAAH,QAAG,SAAA,SAAH,IAAK,aAAS,QAAA,OAAA,SAAA,SAAA,GAAA,aAAS,QAAA,OAAA,SAAA,SAAA,GAAA,gBAAY,QAAA,OAAA,SAAA,SAAA,GAAA,iBAAgB,YAC1D,MAEA,iCAAA;IACE,eAAe;EAChB,CAAA;AAIH,UACE,SAAO,MAAA,KAAA,QAAG,QAAH,QAAA,SAAA,SAAA,IAAK,aAAO,QAAA,OAAA,SAAA,SAAA,GAAE,kBAAc,QAAA,OAAA,SAAA,SAAA,GAAA,UAAS,YAC5C,MAEA,iCAAA;IACE,eAAe;EAChB,CAAA;AAEL;AAOA,SAAe,cAAc,WAAiB;;;;;;AACtC,kBAAQ,oBAAoB,SAAS;AAM/B,iBAAM,CAAA,GAAA,OAAO,OAAO,OAAO,WAAW,KAAK,CAAC;;AAAlD,gBAAMA,IAA4C,KAAA;AAClD,gBAAM,MAAM,KAAK,IAAI,WAAW,GAAG,CAAC;AAC1C,iBAAA,CAAA,GAAO,IAAI,IAAI,SAAA,KAAO;AAAA,mBAAA,IAAI,SAAS,EAAE,EAAE,SAAS,GAAG,GAAG;UAAC,CAAA,EAAE,KAAK,EAAE,CAAC;;;;AAClE;AAED,SAAS,oBAAoB,KAAW;AAGtC,cACE,eAAe,KAAK,GAAG,GACvB,wCAAwC;AAE1C,MAAI,OAAO,gBAAgB,aAAa;AACtC,WAAO,IAAI,YAAW,EAAG,OAAO,GAAG;EACpC;AAED,MAAM,OAAO,IAAI,YAAY,IAAI,MAAM;AACvC,MAAM,OAAO,IAAI,WAAW,IAAI;AAChC,WAAS,IAAI,GAAG,IAAI,IAAI,QAAQ,KAAK;AACnC,SAAK,CAAC,IAAI,IAAI,WAAW,CAAC;EAC3B;AACD,SAAO;AACT;ACrRA,IAAM,sCAAsC,KAAK,KAAK;AAEtD,IAAA;;EAAA,WAAA;AAOE,aAAAC,kBAA6B,MAAkB;AAAlB,WAAI,OAAJ;AANZ,WAAA,kBAA+B,oBAAI,IAAG;AACtC,WAAA,YAAoC,oBAAI,IAAG;AAClD,WAAmB,sBAAqB;AACxC,WAA2B,8BAAG;AAChC,WAAA,yBAAyB,KAAK,IAAG;;AAIzC,IAAAA,kBAAgB,UAAA,mBAAhB,SAAiB,mBAAoC;AACnD,WAAK,UAAU,IAAI,iBAAiB;AAEpC,UACE,KAAK,uBACL,KAAK,mBAAmB,KAAK,qBAAqB,iBAAiB,GACnE;AACA,aAAK,eAAe,KAAK,qBAAqB,iBAAiB;AAC/D,aAAK,iBAAiB,KAAK,mBAAmB;AAC9C,aAAK,sBAAsB;MAC5B;;AAGH,IAAAA,kBAAkB,UAAA,qBAAlB,SAAmB,mBAAoC;AACrD,WAAK,UAAU,OAAO,iBAAiB;;AAGzC,IAAAA,kBAAO,UAAA,UAAP,SAAQ,OAAgB;AAAxB,UA8BC,QAAA;AA5BC,UAAI,KAAK,oBAAoB,KAAK,GAAG;AACnC,eAAO;MACR;AAED,UAAI,UAAU;AACd,WAAK,UAAU,QAAQ,SAAA,UAAQ;AAC7B,YAAI,MAAK,mBAAmB,OAAO,QAAQ,GAAG;AAC5C,oBAAU;AACV,gBAAK,eAAe,OAAO,QAAQ;AACnC,gBAAK,iBAAiB,KAAK;QAC5B;MACH,CAAC;AAED,UAAI,KAAK,+BAA+B,CAAC,gBAAgB,KAAK,GAAG;AAG/D,eAAO;MACR;AAED,WAAK,8BAA8B;AAGnC,UAAI,CAAC,SAAS;AACZ,aAAK,sBAAsB;AAC3B,kBAAU;MACX;AAED,aAAO;;AAGD,IAAAA,kBAAA,UAAA,iBAAR,SAAuB,OAAkB,UAA2B;;AAClE,UAAI,MAAM,SAAS,CAAC,oBAAoB,KAAK,GAAG;AAC9C,YAAM,SACHD,MAAA,MAAM,MAAM,UAAI,QAAAA,QAAA,SAAA,SAAAA,IAAE,MAAM,OAAO,EAAE,CAAC;AAErC,iBAAS,QAAQ,aAAa,KAAK,MAAM,IAAI,CAAC;MAC/C,OAAM;AACL,iBAAS,YAAY,KAAK;MAC3B;;AAGK,IAAAC,kBAAA,UAAA,qBAAR,SACE,OACA,UAA2B;AAE3B,UAAM,iBACJ,SAAS,YAAY,QACpB,CAAC,CAAC,MAAM,WAAW,MAAM,YAAY,SAAS;AACjD,aAAO,SAAS,OAAO,SAAS,MAAM,IAAI,KAAK;;AAGzC,IAAAA,kBAAmB,UAAA,sBAA3B,SAA4B,OAAgB;AAC1C,UACE,KAAK,IAAG,IAAK,KAAK,0BAClB,qCACA;AACA,aAAK,gBAAgB,MAAK;MAC3B;AAED,aAAO,KAAK,gBAAgB,IAAI,SAAS,KAAK,CAAC;;AAGzC,IAAAA,kBAAgB,UAAA,mBAAxB,SAAyB,OAAgB;AACvC,WAAK,gBAAgB,IAAI,SAAS,KAAK,CAAC;AACxC,WAAK,yBAAyB,KAAK,IAAG;;AAE1C,WAACA;EAAD,EAAC;;AAED,SAAS,SAAS,GAAY;AAC5B,SAAO,CAAC,EAAE,MAAM,EAAE,SAAS,EAAE,WAAW,EAAE,QAAQ,EAAE,OAAO,SAAA,GAAC;AAAI,WAAA;EAAA,CAAC,EAAE,KAAK,GAAG;AAC7E;AAEA,SAAS,oBAAoBD,KAA0B;MAAxB,OAAIA,IAAA,MAAE,QAAKA,IAAA;AACxC,SACE,SAA8B,cAC9B,UAAA,QAAA,UAAA,SAAA,SAAA,MAAO,UAAS,QAAqC;IAAA;;EAAA;AAEzD;AAEA,SAAS,gBAAgB,OAAgB;AACvC,UAAQ,MAAM,MAAI;IAChB,KAAwC;IACxC,KAAqC;IACrC,KAAA;AACE,aAAO;IACT,KAAA;AACE,aAAO,oBAAoB,KAAK;IAClC;AACE,aAAO;EACV;AACH;ACtHA,IAAM,oBAAoB;AAG1B,IAAA;;EAAA,SAAA,QAAA;AAA6C,cAAgBE,0BAAA,MAAA;AAA7D,aAAAA,2BAAA;AAAA,UAgCC,QAAA,WAAA,QAAA,OAAA,MAAA,MAAA,SAAA,KAAA;AA/BkB,YAAA,mBAAmB,oBAAI,IAAG;AAEnC,YAAA,cAAc,IAAI,QAAc,SAAA,SAAO;AAC7C,cAAK,mBAAmB;MAC1B,CAAC;;;AAED,IAAAA,yBAAkB,UAAA,qBAAlB,SAAmB,IAA0B;AAC3C,WAAK,iBAAiB,IAAI,EAAE;;AAG9B,IAAAA,yBAAqB,UAAA,wBAArB,SAAsB,IAA0B;AAC9C,WAAK,iBAAiB,OAAO,EAAE;;AAKjC,IAAAA,yBAAA,UAAA,gBAAA,WAAA;AACE,WAAK,sBAAsB;AAC3B,WAAK,8BAA8B;;AAIrC,IAAAA,yBAAO,UAAA,UAAP,SAAQ,OAAgB;AACtB,WAAK,iBAAgB;AACrB,WAAK,iBAAiB,QAAQ,SAAA,IAAE;AAAI,eAAA,GAAG,KAAK;MAAR,CAAS;AAC7C,aAAO,OAAM,UAAA,QAAQ,KAAA,MAAA,KAAK;;AAGtB,IAAAA,yBAAA,UAAA,cAAN,WAAA;;;;;AACE,qBAAM,CAAA,GAAA,KAAK,WAAW;;AAAtB,cAAAF,IAAA,KAAA;;;;;;;;IACD;AACH,WAACE;EAAD,EAhC6C,gBAAgB;;SAqC7C,kBACd,MACA,MACA,SAA6B;AAA7B,MAAA,YAAA,QAAA;AAAA,cAA6B;EAAA;AAE7B,SAAO;IACL;IACA;IACA,aAAa;IACb,WAAW,kBAAiB;IAC5B,UAAU;IACV,UAAU,KAAK;IACf,OAAO;MAAa;MAAkC;;IAAA;;AAE1D;AAEgB,SAAA,kBACd,MACA,OAAgB;AAEhB,SAAO,QAAO,EAAG,KAAK,eAAe,IAAI,GAAG,KAAgC;AAC9E;AAEM,SAAgB,mBACpB,MAAkB;;;;;;AAEH,iBAAM,CAAA,GAAA,QAAO,EAAG,KAC7B,eAAe,IAAI,CAAC,CACrB;;AAFK,kBAASF,IAAA,KAAA;AAGX,cAAA,CAAA;AAAA,mBAAK,CAAA,GAAA,CAAA;AACP,iBAAM,CAAA,GAAA,QAAO,EAAG,QAAQ,eAAe,IAAI,CAAC,CAAC;;AAA7C,UAAAA,IAAA,KAAA;;QAEF,KAAA;AAAA,iBAAA,CAAA,GAAO,KAAK;;;;AACb;AAEe,SAAA,wBACd,cACA,KAAW;;AAGX,MAAM,cAAc,yBAAyB,GAAG;AAMhD,MAAI,YAAY,SAAS,mBAAmB,GAAG;AAI7C,QAAM,SAAS,oBAAoB,WAAW;AAE9C,QAAM,cAAc,OAAO,eAAe,IACtC,gBAAgB,mBAAmB,OAAO,eAAe,CAAC,CAAC,IAC3D;AACJ,QAAM,QAAO,MAAAA,MAAA,gBAAA,QAAA,gBAAW,SAAA,SAAX,YAAc,MAAM,OAAC,QAAAA,QAAA,SAAA,SAAAA,IAAE,MAAM,OAAO,OAAI,QAAA,OAAA,SAAA,SAAA,GAAA,CAAC;AACtD,QAAM,QAAQ,OAAO,aAAa,IAAI,IAAI;AAC1C,QAAI,OAAO;AACT,aAAO;QACL,MAAM,aAAa;QACnB,SAAS,aAAa;QACtB,UAAU,aAAa;QACvB;QACA,aAAa;QACb,WAAW;QACX,UAAU;;IAEb,OAAM;AACL,aAAO;QACL,MAAM,aAAa;QACnB,SAAS,aAAa;QACtB,UAAU,aAAa;QACvB,WAAW,aAAa;QACxB,aAAa;QACb,UAAU;;IAEb;EACF;AAED,SAAO;AACT;AAEA,SAAS,oBAAiB;AACxB,MAAM,QAAQ,CAAA;AACd,MAAM,eACJ;AACF,WAAS,IAAI,GAAG,IAAI,mBAAmB,KAAK;AAC1C,QAAM,MAAM,KAAK,MAAM,KAAK,OAAM,IAAK,aAAa,MAAM;AAC1D,UAAM,KAAK,aAAa,OAAO,GAAG,CAAC;EACpC;AACD,SAAO,MAAM,KAAK,EAAE;AACtB;AAEA,SAAS,UAAO;AACd,SAAO,aAAa,uBAAuB;AAC7C;AAEA,SAAS,eAAe,MAAkB;AACxC,SAAO,oBAAmB,aAAqB,KAAK,OAAO,QAAQ,KAAK,IAAI;AAC9E;AAEA,SAAS,gBAAgB,MAAY;AACnC,MAAI;AACF,WAAO,KAAK,MAAM,IAAI;EACvB,SAAQ,GAAG;AACV,WAAO;EACR;AACH;AAGM,SAAU,yBAAyB,KAAW;AAClD,MAAM,SAAS,oBAAoB,GAAG;AACtC,MAAM,OAAO,OAAO,MAAM,IAAI,mBAAmB,OAAO,MAAM,CAAC,IAAI;AAEnE,MAAM,iBAAiB,oBAAoB,IAAI,EAAE,MAAM;AAEvD,MAAM,cAAc,OAAO,cAAc,IACrC,mBAAmB,OAAO,cAAc,CAAC,IACzC;AACJ,MAAM,oBAAoB,oBAAoB,WAAW,EAAE,MAAM;AACjE,SAAO,qBAAqB,eAAe,kBAAkB,QAAQ;AACvE;AAMA,SAAS,oBAAoB,KAAuB;AAClD,MAAI,EAAC,QAAG,QAAH,QAAG,SAAA,SAAH,IAAK,SAAS,GAAG,IAAG;AACvB,WAAO,CAAA;EACR;AAEK,MAAAA,MAAe,IAAI,MAAM,GAAG;AAA1B,EAAAA,IAAA,CAAA;AAAK,MAAA,OAAIA,IAAA,MAAA,CAAA;AACjB,SAAO,kBAAkB,KAAK,KAAK,GAAG,CAAC;AACzC;ACvJA,IAAM,2BAA2B;AAEjC,IAAA;;EAAA,WAAA;AAAA,aAAAG,gCAAA;AACW,WAAoB,uBAAG;AACvB,WAAA,yBAAyB;AACjB,WAAA,gBAAgB,oBAAI,IAAG;AACvB,WAAwB,2BAAkC,CAAA;AAE3E,WAAmB,sBAAG;AACtB,WAAuB,0BAAG;;AAEpB,IAAAA,8BAAW,UAAA,cAAjB,SAAkB,MAAkB;;;;AAC5B,gBAAM,KAAK,KAAI;AACjB,oBAAU,KAAK,cAAc,IAAI,GAAG;AACxC,cAAI,CAAC,SAAS;AACZ,sBAAU,IAAI,wBAAwB,IAAI;AAC1C,iBAAK,cAAc,IAAI,KAAK,OAAO;AACnC,iBAAK,wBAAwB,MAAM,OAAO;UAC3C;AACD,iBAAA,CAAA,GAAO,OAAO;;;IACf;AAED,IAAAA,8BAAU,UAAA,aAAV,SAAW,MAAkB;AAC3B;QAAM;QAAI;;MAAA;;AAGN,IAAAA,8BAAa,UAAA,gBAAnB,SACE,MACA,UACA,UACA,SAAgB;;;;;;AAEhB,yCAA2B,IAAI;AACf,qBAAA,CAAA,GAAM,KAAK,YAAY,IAAI,CAAC;;AAAtC,wBAAUH,IAA4B,KAAA;AAC5C,qBAAA,CAAA,GAAM,QAAQ,YAAW,CAAE;;AAA3B,cAAAA,IAAA,KAAA;AAKA,sBAAQ,cAAa;AACrB,qCAAsB;AAEtB,qBAAA,CAAA,GAAM,KAAK,kBAAkB,IAAI,CAAC;;AAAlC,cAAAA,IAAA,KAAA;AAEM,sBAAQ,kBAAkB,MAAM,UAAU,OAAO;AACvD,qBAAA,CAAA,GAAM,kBAAkB,MAAM,KAAK,CAAC;;AAApC,cAAAA,IAAA,KAAA;AACY,qBAAM,CAAA,GAAA,oBAAoB,MAAM,OAAO,QAAQ,CAAC;;AAAtD,oBAAMA,IAAgD,KAAA;AAC7C,qBAAA,CAAA,GAAM,iBAAiB,GAAG,CAAC;;AAApC,uBAASA,IAA2B,KAAA;AAC1C,qBAAO,CAAA,GAAA,kBAAkB,MAAM,SAAS,MAAM,CAAC;;;;IAChD;AAED,IAAAG,8BAAA,UAAA,+BAAA,SACE,OACA,KAAkC;AAElC,YAAM,IAAI,MAAM,yBAAyB;;AAG3C,IAAAA,8BAAiB,UAAA,oBAAjB,SAAkB,MAAkB;AAClC,UAAM,MAAM,KAAK,KAAI;AACrB,UAAI,CAAC,KAAK,yBAAyB,GAAG,GAAG;AACvC,aAAK,yBAAyB,GAAG,IAAI,gBAAgB,IAAI;MAC1D;AAED,aAAO,KAAK,yBAAyB,GAAG;;AAGlC,IAAAA,8BAAA,UAAA,0BAAR,SACE,MACA,SAAyB;AAF3B,UA6DC,QAAA;AAxDO,UAAAH,MAA+C,eAAc,GAA3D,iBAAcA,IAAA,gBAAE,gBAAaA,IAAA,eAAE,YAASA,IAAA;AAEhD,UAAM,iBAAiB,WAAW,WAAA;AAAA,eAAA,UAAA,OAAA,QAAA,QAAA,WAAA;;;;AAGhC,uBAAA,CAAA,GAAM,mBAAmB,IAAI,CAAC;;AAA9B,gBAAAA,IAAA,KAAA;AACA,wBAAQ,QAAQ,gBAAe,CAAE;;;;;;;;SAChC,wBAAwB;AAE3B,UAAM,mBAAmB,SACvB,WAAwC;AAAA,eAAA,UAAA,OAAA,QAAA,QAAA,WAAA;;;;;AAGxC,6BAAa,cAAc;AAEN,uBAAA,CAAA,GAAM,mBAAmB,IAAI,CAAC;;AAA7C,+BAAeA,IAA8B,KAAA;AAC/C,6BAA+B;AACnC,oBAAI,iBAAgB,cAAA,QAAA,cAAA,SAAA,SAAA,UAAY,KAAK,IAAG;AACtC,+BAAa,wBAAwB,cAAc,UAAU,KAAK,CAAC;gBACpE;AAGD,wBAAQ,QAAQ,cAAc,gBAAe,CAAE;;;;;;;;;AAIjD,UACE,OAAO,mBAAmB,eAC1B,OAAO,eAAe,cAAc,YACpC;AACA,uBAAe,UAAU,MAAM,gBAAgB;MAChD;AAOD,UAAM,wBAAwB;AAC9B,UAAM,gBAAgB,GAAA,OAAG,UAAU,YAAY,YAAW,GAAE,KAAA;AAC5D,qBAAc,EAAG,gBAAgB,SAAM,KAAG;AAAA,eAAA,UAAA,OAAA,QAAA,QAAA,WAAA;;AACxC,gBAAI,IAAI,YAAW,EAAG,WAAW,aAAa,GAAG;AAG/C,+BAAiB,EAAE,IAAG,CAAE;YACzB;AAED,gBAAI,OAAO,0BAA0B,YAAY;AAC/C,kBAAI;AACF,sCAAsB,GAAG;cAC1B,SAAQ,GAAG;AAEV,wBAAQ,MAAM,CAAC;cAChB;YACF;;;;;;;;;AAGP,WAACG;EAAD,EAAC;;AAQM,IAAM,+BACX;AAEF,SAAS,kBAAe;AACtB,SAAO;IACL,MAA2B;IAC3B,SAAS;IACT,WAAW;IACX,aAAa;IACb,UAAU;IACV,UAAU;IACV,OAAO;MAAyC;;IAAA;;AAEpD;;;SC/KgB,mBACd,MACA,UACA,UAAgC;AAEhC,SAAO,oBAAoB,MAAM,UAAU,QAAQ;AACrD;SAEgB,2BACd,MACA,UACA,UAAgC;AAEhC,SAAO,4BAA4B,MAAM,UAAU,QAAQ;AAC7D;SAEgB,iBACd,MACA,UACA,UAAgC;AAEhC,SAAO,kBAAkB,MAAM,UAAU,QAAQ;AACnD;ACFM,SAAU,QAAQ,KAA2B;AAA3B,MAAA,QAAA,QAAA;AAAA,UAAmB,OAAM;EAAE;AACjD,MAAM,WAAW,aAAa,KAAK,MAAM;AAEzC,MAAI,SAAS,cAAa,GAAI;AAC5B,WAAO,SAAS,aAAY;EAC7B;AAED,SAAO,eAAe,KAAK;IACzB,aAAa;IACb,uBAAuB;EACxB,CAAA;AACH;AAEA;EAAY;;AAAA;",
  "names": ["_a", "Receiver", "Sender", "_a", "DBPromise", "_POLLING_INTERVAL_MS", "IndexedDBLocalPersistence", "Delay", "FetchProvider", "NetworkTimeout", "RecaptchaConfig", "_a", "_a", "ProactiveRefresh", "UserMetadata", "StsTokenManager", "UserImpl", "reload", "InMemoryPersistence", "PersistenceUserManager", "name", "persistence", "_b", "AuthMiddlewareQueue", "_a", "PasswordPolicyImpl", "AuthImpl", "Subscription", "RecaptchaEnterpriseVerifier", "_this", "jsHelpers\r\n                                    ._loadJS", "_a", "requestWithRecaptcha", "AuthCredential", "applyActionCode", "sendEmailVerification", "sendPasswordResetEmail", "sendSignInLinkToEmail", "signInWithEmailLink", "EmailAuthCredential", "IDP_REQUEST_URI", "OAuthCredential", "_a", "PhoneAuthCredential", "ActionCodeURL", "EmailAuthProvider", "FederatedAuthProvider", "BaseOAuthProvider", "OAuthProvider", "FacebookAuthProvider", "GoogleAuthProvider", "GithubAuthProvider", "SAMLAuthCredential", "SAMLAuthProvider", "TwitterAuthProvider", "UserCredentialImpl", "MultiFactorError", "_link", "signInWithCustomToken", "getIdTokenResponse", "MultiFactorInfoImpl", "PhoneMultiFactorInfoImpl", "TotpMultiFactorInfoImpl", "authentication.sendPasswordResetEmail", "account\r\n                        .resetPassword", "account.applyActionCode", "account.resetPassword", "request", "actionCodeSettings", "api.sendSignInLinkToEmail", "api.sendEmailVerification", "api.verifyAndChangeEmail", "updateProfile", "apiUpdateProfile", "apiUpdateEmailPassword", "GenericAdditionalUserInfo", "FederatedAdditionalUserInfoWithUsername", "FacebookAdditionalUserInfo", "GithubAdditionalUserInfo", "GoogleAdditionalUserInfo", "TwitterAdditionalUserInfo", "MultiFactorSessionImpl", "MultiFactorResolverImpl", "MultiFactorUserImpl", "_a", "AuthInterop", "auth", "BrowserPersistenceClass", "BrowserLocalPersistence", "key", "storedValue", "BrowserSessionPersistence", "IdpCredential", "_linkUser", "AbstractPopupRedirectOperation", "RedirectAction", "_a", "_a", "_a", "AuthEventManager", "CordovaAuthEventManager", "CordovaPopupRedirectResolver"]
}
